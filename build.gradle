// general part
buildscript {
    ext.javaVersion = '1.8'

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }

    }
    dependencies {
        classpath "gradle.plugin.org.jetbrains:gradle-intellij-plugin:0.1.10"
    }
}

plugins {
    id 'org.jetbrains.intellij' version "0.2.0"
    id 'org.jetbrains.kotlin.jvm' version '1.1.1'
}

allprojects {
    apply plugin: 'idea'
    idea {
        module {
            generatedSourceDirs += file('src/gen')
        }
    }

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        version ideaVersion
        downloadSources Boolean.valueOf(downloadIdeaSources)
        updateSinceUntilBuild = false
        instrumentCode = false
    }

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
    sourceSets {
        main {
            java.srcDirs += 'src/gen'
        }
    }
    dependencies {
        compileOnly('com.github.JetBrains:Grammar-Kit:1.5.0') {
            exclude group: 'org.jetbrains.plugins'
            exclude module: 'idea'
        }

        testCompile 'junit:junit:4.+'
    }
}

test {
    useJUnit ()
}

lexerTask(project, 'FortranLexer', 'org/jetbrains/fortran/lang/lexer')
lexerTask(project, 'FortranFixedFormLexer', 'org/jetbrains/fortran/lang/lexer')
parserTask(project, 'FortranParser', 'org/jetbrains/fortran/lang/parser')

static def codegenTask(project, task) {
    project.compileJava.dependsOn task
    project.compileTestJava.dependsOn task
    return task
}

def lexerTask(project, lexerName, pkg) {
    return codegenTask(project, tasks.create("generate${lexerName}", JavaExec) {
        def src = "$project.projectDir/src/main/java/org/jetbrains/fortran/lang/lexer/${lexerName}.flex"
        def dst = "$project.projectDir/src/main/java/$pkg"

        main = 'jflex.Main'
        classpath = files('lib/jflex/JFlex.jar')

        args = ['--skel', 'lib/jflex/idea-flex.skeleton',
                '-d', dst,
                src
        ]

        inputs.file file(src)
        outputs.dir file("$dst/_${lexerName}.java")
    })
}

def parserTask(project, parserName, pkg) {
    return codegenTask(project, tasks.create("generate${parserName}", JavaExec) {
        def dstRoot = "$project.projectDir/src/gen/"
        def src = "$project.projectDir/src/main/java/org/jetbrains/fortran/lang/parser/${parserName}.bnf"
        def dst = "$dstRoot/$pkg"
        doFirst {
            delete file(dst)
            delete file("$dstRoot/org/jetbrains/fortran/lang/")
        }

        main = 'org.intellij.grammar.Main'
        classpath(configurations.compileOnly)

        args = [dstRoot, file(src)]

        inputs.file file(src)
        outputs.dir dst
    })
}
