/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.jetbrains.fortran.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>C:/development/fortran-plugin/src/org/jetbrains/fortran/lang/lexer/Fortran.flex</tt>
 */
class _FortranLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 7, 5]
   * Total runtime size is 1888 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<7)|((ch>>5)&0x7f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\u010d\1");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\2\1\3\4\4\1\5\1\4\1\6\365\4\1\7\7\4\1\10\166\4");

  /* The ZZ_CMAP_A table has 288 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\3\1\34\1\4\1\34\22\0\1\4\1\2\37\0\1\5\1\12\1\10\1\27\1\13\1\30"+
    "\1\16\1\22\1\15\1\0\1\21\1\6\1\20\1\17\1\7\1\23\1\32\1\1\1\14\1\11\1\25\1"+
    "\33\1\31\1\24\1\26\13\0\1\34\112\0\2\15\55\0\1\14\10\0\2\34\40\0\1\21\25\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\22\1\16\0\1\4\14\0"+
    "\1\5\1\0\1\6\1\7\12\0\1\10\15\0\1\11"+
    "\3\0\1\12\16\0\1\13\26\0\1\14\11\0\1\15"+
    "\1\16\7\0\1\17\2\0\1\20\1\21\1\22\7\0"+
    "\1\23\1\24\2\0\1\25\3\0\1\26\1\0\1\27"+
    "\1\30\12\0\1\31\10\0\1\32\21\0\1\33\5\0"+
    "\1\34\2\0\1\35\1\0\1\36\5\0\1\37\13\0"+
    "\1\40\2\0\1\41\7\0\1\42\1\43\1\44\1\0"+
    "\1\45\1\46\1\47\1\0\1\50\5\0\1\51\2\0"+
    "\1\52\5\0\1\53\4\0\1\54\4\0\1\55\5\0"+
    "\1\56\1\57\2\0\1\60\4\0\1\61\4\0\1\62"+
    "\3\0\1\63\5\0\1\64\1\65\2\0\1\66\1\67"+
    "\1\0\1\70\1\0\1\71\1\0\1\72\3\0\1\73"+
    "\1\0\1\74\1\75\1\76\1\77\3\0\1\100\4\0"+
    "\1\101\1\102\3\0\1\103\1\104\2\0\1\105\1\106"+
    "\1\107\2\0\1\110\1\111\1\112\1\113\2\0\1\114"+
    "\1\0\1\115\1\116\1\117\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196\0\u01b3"+
    "\0\u01d0\0\u01ed\0\u020a\0\u0227\0\u0244\0\u0261\0\u027e\0\u029b"+
    "\0\u02b8\0\u02d5\0\u02f2\0\u030f\0\u032c\0\u0349\0\u0366\0\u0383"+
    "\0\u03a0\0\u03bd\0\u03da\0\u03f7\0\u0414\0\35\0\u0431\0\u044e"+
    "\0\u046b\0\u0488\0\u04a5\0\u04c2\0\u04df\0\u04fc\0\u0519\0\u0536"+
    "\0\u0553\0\u0570\0\u058d\0\u05aa\0\35\0\35\0\u05c7\0\u05e4"+
    "\0\u0601\0\u061e\0\u063b\0\u0658\0\u0675\0\u0692\0\u06af\0\u06cc"+
    "\0\u06e9\0\u0706\0\u0723\0\u0740\0\u075d\0\u077a\0\u0797\0\u07b4"+
    "\0\u07d1\0\u07ee\0\u080b\0\u0828\0\u0845\0\u0862\0\35\0\u087f"+
    "\0\u089c\0\u08b9\0\35\0\u08d6\0\u08f3\0\u0910\0\u092d\0\u094a"+
    "\0\u0967\0\u0984\0\u09a1\0\u09be\0\u09db\0\u09f8\0\u0a15\0\u0a32"+
    "\0\u0a4f\0\u0a6c\0\u0a89\0\u0aa6\0\u0ac3\0\u0ae0\0\u0afd\0\u0b1a"+
    "\0\u0b37\0\u0b54\0\u0b71\0\u0b8e\0\u0bab\0\u0bc8\0\u0be5\0\u0c02"+
    "\0\u0c1f\0\u0c3c\0\u0c59\0\u0c76\0\u0c93\0\u0cb0\0\u0ccd\0\u0cea"+
    "\0\35\0\u0d07\0\u0d24\0\u0d41\0\u0d5e\0\u0d7b\0\u0d98\0\u0db5"+
    "\0\u0dd2\0\u0def\0\35\0\35\0\u0e0c\0\u0e29\0\u0e46\0\u0e63"+
    "\0\u0e80\0\u0e9d\0\u0eba\0\35\0\u0ed7\0\u0ef4\0\35\0\35"+
    "\0\35\0\u0f11\0\u0f2e\0\u0f4b\0\u0f68\0\u0f85\0\u0fa2\0\u0fbf"+
    "\0\35\0\35\0\u0fdc\0\u0ff9\0\u1016\0\u1033\0\u1050\0\u106d"+
    "\0\35\0\u108a\0\35\0\35\0\u10a7\0\u10c4\0\u10e1\0\u10fe"+
    "\0\u111b\0\u1138\0\u1155\0\u1172\0\u118f\0\u11ac\0\35\0\u11c9"+
    "\0\u11e6\0\u1203\0\u1220\0\u123d\0\u125a\0\u1277\0\u1294\0\35"+
    "\0\u12b1\0\u12ce\0\u12eb\0\u1308\0\u1325\0\u1342\0\u135f\0\u137c"+
    "\0\u1399\0\u13b6\0\u13d3\0\u13f0\0\u140d\0\u142a\0\u1447\0\u1464"+
    "\0\u1481\0\35\0\u149e\0\u14bb\0\u14d8\0\u14f5\0\u1512\0\35"+
    "\0\u152f\0\u154c\0\35\0\u1569\0\35\0\u1586\0\u15a3\0\u15c0"+
    "\0\u15dd\0\u15fa\0\35\0\u1617\0\u1634\0\u1651\0\u166e\0\u168b"+
    "\0\u16a8\0\u16c5\0\u16e2\0\u16ff\0\u171c\0\u1739\0\35\0\u1756"+
    "\0\u1773\0\35\0\u1790\0\u17ad\0\u17ca\0\u17e7\0\u1804\0\u1821"+
    "\0\u183e\0\35\0\35\0\35\0\u185b\0\35\0\35\0\35"+
    "\0\u1878\0\u1895\0\u18b2\0\u18cf\0\u18ec\0\u1909\0\u1926\0\35"+
    "\0\u1943\0\u1960\0\35\0\u197d\0\u199a\0\u19b7\0\u19d4\0\u19f1"+
    "\0\35\0\u1a0e\0\u1a2b\0\u1a48\0\u1a65\0\35\0\u1a82\0\u1a9f"+
    "\0\u1abc\0\u1ad9\0\35\0\u1af6\0\u1b13\0\u1b30\0\u1b4d\0\u1b6a"+
    "\0\35\0\35\0\u1b87\0\u1ba4\0\35\0\u1bc1\0\u1bde\0\u1bfb"+
    "\0\u1c18\0\35\0\u1c35\0\u1c52\0\u1c6f\0\u1c8c\0\35\0\u1ca9"+
    "\0\u1cc6\0\u1ce3\0\35\0\u1d00\0\u1d1d\0\u1d3a\0\u1d57\0\u1d74"+
    "\0\35\0\35\0\u1d91\0\u1dae\0\35\0\35\0\u1dcb\0\35"+
    "\0\u1de8\0\35\0\u1e05\0\35\0\u1e22\0\u1e3f\0\u1e5c\0\35"+
    "\0\u1e79\0\35\0\35\0\35\0\35\0\u1e96\0\u1eb3\0\u1ed0"+
    "\0\35\0\u1eed\0\u1f0a\0\u1f27\0\u1f44\0\35\0\35\0\u1f61"+
    "\0\u1f7e\0\u1f9b\0\35\0\35\0\u1fb8\0\u1fd5\0\35\0\35"+
    "\0\35\0\u1ff2\0\u200f\0\35\0\35\0\35\0\35\0\u202c"+
    "\0\u2049\0\35\0\u2066\0\35\0\35\0\35\0\35";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\2\1\23\1\2\1\24\1\2\1\25\1\26"+
    "\1\27\2\2\51\0\1\30\21\0\3\4\1\0\31\4"+
    "\3\0\2\5\36\0\1\31\5\0\1\32\27\0\1\33"+
    "\3\0\1\34\40\0\1\35\3\0\1\36\1\0\1\37"+
    "\14\0\1\40\1\41\1\42\12\0\1\43\3\0\1\44"+
    "\13\0\1\45\1\0\1\46\12\0\1\47\3\0\1\50"+
    "\13\0\1\51\1\52\34\0\1\53\10\0\1\54\4\0"+
    "\1\55\5\0\1\56\7\0\1\57\3\0\1\60\1\0"+
    "\1\61\11\0\1\62\26\0\1\63\1\64\7\0\1\65"+
    "\13\0\1\66\32\0\1\67\17\0\1\70\16\0\1\71"+
    "\42\0\1\72\20\0\1\73\3\0\1\74\1\0\1\75"+
    "\15\0\1\76\23\0\1\77\25\0\1\100\1\0\1\101"+
    "\3\0\1\102\30\0\1\103\15\0\1\104\10\0\1\105"+
    "\20\0\1\106\17\0\1\107\2\0\1\110\1\111\2\0"+
    "\1\112\14\0\1\113\11\0\1\114\42\0\1\115\36\0"+
    "\1\116\35\0\1\117\23\0\1\120\37\0\1\121\1\0"+
    "\1\122\32\0\1\123\31\0\1\124\5\0\1\125\27\0"+
    "\1\126\44\0\1\127\1\130\21\0\1\131\37\0\1\132"+
    "\25\0\1\133\46\0\1\134\44\0\1\135\21\0\1\136"+
    "\33\0\1\137\41\0\1\140\31\0\1\141\15\0\1\142"+
    "\16\0\1\143\3\0\1\144\44\0\1\145\42\0\1\146"+
    "\10\0\1\147\33\0\1\150\40\0\1\151\31\0\1\152"+
    "\1\0\1\153\20\0\1\154\25\0\1\155\31\0\1\156"+
    "\22\0\1\157\55\0\1\160\24\0\1\161\24\0\1\162"+
    "\3\0\1\163\1\0\1\164\20\0\1\165\23\0\1\166"+
    "\24\0\1\167\31\0\1\170\35\0\1\171\32\0\1\172"+
    "\50\0\1\173\14\0\1\174\22\0\1\175\5\0\1\176"+
    "\52\0\1\177\32\0\1\200\32\0\1\201\1\0\1\202"+
    "\25\0\1\203\20\0\1\204\32\0\1\205\34\0\1\206"+
    "\34\0\1\207\24\0\1\210\26\0\1\211\42\0\1\212"+
    "\34\0\1\213\45\0\1\214\23\0\1\215\20\0\1\216"+
    "\15\0\1\217\23\0\1\220\41\0\1\221\35\0\1\222"+
    "\31\0\1\223\43\0\1\224\2\0\1\225\12\0\1\226"+
    "\41\0\1\227\44\0\1\230\35\0\1\231\30\0\1\232"+
    "\42\0\1\233\23\0\1\234\37\0\1\235\22\0\1\236"+
    "\63\0\1\237\17\0\1\240\32\0\1\241\40\0\1\242"+
    "\32\0\1\243\44\0\1\244\24\0\1\245\22\0\1\246"+
    "\60\0\1\247\10\0\1\250\11\0\1\251\46\0\1\252"+
    "\15\0\1\253\41\0\1\254\27\0\1\255\53\0\1\256"+
    "\36\0\1\257\23\0\1\260\26\0\1\261\43\0\1\262"+
    "\13\0\1\263\6\0\1\264\43\0\1\265\37\0\1\266"+
    "\23\0\1\267\33\0\1\270\41\0\1\271\30\0\1\272"+
    "\33\0\1\273\47\0\1\274\24\0\1\275\35\0\1\276"+
    "\24\0\1\277\41\0\1\300\27\0\1\301\34\0\1\302"+
    "\41\0\1\303\45\0\1\304\25\0\1\305\42\0\1\306"+
    "\26\0\1\307\33\0\1\310\32\0\1\311\42\0\1\312"+
    "\26\0\1\313\7\0\1\314\26\0\1\315\33\0\1\316"+
    "\33\0\1\317\42\0\1\320\34\0\1\321\35\0\1\322"+
    "\41\0\1\323\44\0\1\324\31\0\1\325\23\0\1\326"+
    "\20\0\1\327\66\0\1\330\11\0\1\331\33\0\1\332"+
    "\36\0\1\333\40\0\1\334\20\0\1\335\14\0\1\336"+
    "\1\337\32\0\1\340\34\0\1\341\25\0\1\342\43\0"+
    "\1\343\25\0\1\344\27\0\1\345\50\0\1\346\30\0"+
    "\1\347\30\0\1\350\47\0\1\351\27\0\1\352\32\0"+
    "\1\353\40\0\1\354\25\0\1\355\34\0\1\356\53\0"+
    "\1\357\14\0\1\360\40\0\1\361\36\0\1\362\34\0"+
    "\1\363\34\0\1\364\35\0\1\365\37\0\1\366\26\0"+
    "\1\367\52\0\1\370\12\0\1\371\46\0\1\372\22\0"+
    "\1\373\46\0\1\374\26\0\1\375\40\0\1\376\36\0"+
    "\1\377\34\0\1\u0100\30\0\1\u0101\31\0\1\u0102\35\0"+
    "\1\u0103\46\0\1\u0104\33\0\1\u0105\20\0\1\u0106\45\0"+
    "\1\u0107\22\0\1\u0108\40\0\1\u0109\50\0\1\u010a\26\0"+
    "\1\u010b\45\0\1\u010c\17\0\1\u010d\32\0\1\u010e\24\0"+
    "\1\u010f\43\0\1\u0110\41\0\1\u0111\47\0\1\u0112\17\0"+
    "\1\u0113\26\0\1\u0114\43\0\1\u0115\31\0\1\u0116\36\0"+
    "\1\u0117\34\0\1\u0118\31\0\1\u0119\37\0\1\u011a\30\0"+
    "\1\u011b\33\0\1\u011c\37\0\1\u011d\40\0\1\u011e\34\0"+
    "\1\u011f\30\0\1\u0120\43\0\1\u0121\22\0\1\u0122\33\0"+
    "\1\u0123\36\0\1\u0124\44\0\1\u0125\42\0\1\u0126\33\0"+
    "\1\u0127\21\0\1\u0128\30\0\1\u0129\42\0\1\u012a\34\0"+
    "\1\u012b\26\0\1\u012c\35\0\1\u012d\37\0\1\u012e\37\0"+
    "\1\u012f\25\0\1\u0130\30\0\1\u0131\46\0\1\u0132\36\0"+
    "\1\u0133\33\0\1\u0134\46\0\1\u0135\26\0\1\u0136\31\0"+
    "\1\u0137\32\0\1\u0138\32\0\1\u0139\24\0\1\u013a\43\0"+
    "\1\u013b\35\0\1\u013c\32\0\1\u013d\60\0\1\u013e\6\0"+
    "\1\u013f\5\0\1\u0140\34\0\1\u0141\27\0\1\u0142\27\0"+
    "\1\u0143\47\0\1\u0144\33\0\1\u0145\34\0\1\u0146\31\0"+
    "\1\u0147\25\0\1\u0148\41\0\1\u0149\41\0\1\u014a\36\0"+
    "\1\u014b\34\0\1\u014c\27\0\1\u014d\35\0\1\u014e\34\0"+
    "\1\u014f\32\0\1\u0150\40\0\1\u0151\26\0\1\u0152\46\0"+
    "\1\u0153\30\0\1\u0154\33\0\1\u0155\41\0\1\u0156\16\0"+
    "\1\u0157\46\0\1\u0158\34\0\1\u0159\40\0\1\u015a\34\0"+
    "\1\u015b\25\0\1\u015c\37\0\1\u015d\40\0\1\u015e\16\0"+
    "\1\u015f\44\0\1\u0160\31\0\1\u0161\37\0\1\u0162\33\0"+
    "\1\u0163\37\0\1\u0164\34\0\1\u0165\34\0\1\u0166\34\0"+
    "\1\u0167\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8323];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\16\0\1\11\14\0\1\1\1\0"+
    "\2\11\12\0\1\1\15\0\1\11\3\0\1\11\16\0"+
    "\1\1\26\0\1\11\11\0\2\11\7\0\1\11\2\0"+
    "\3\11\7\0\2\11\2\0\1\1\3\0\1\11\1\0"+
    "\2\11\12\0\1\11\10\0\1\11\21\0\1\11\5\0"+
    "\1\11\2\0\1\11\1\0\1\11\5\0\1\11\13\0"+
    "\1\11\2\0\1\11\7\0\3\11\1\0\3\11\1\0"+
    "\1\1\5\0\1\11\2\0\1\11\5\0\1\11\4\0"+
    "\1\11\4\0\1\11\5\0\2\11\2\0\1\11\4\0"+
    "\1\11\4\0\1\11\3\0\1\11\5\0\2\11\2\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\1\0\4\11\3\0\1\11\4\0\2\11\3\0"+
    "\2\11\2\0\3\11\2\0\4\11\2\0\1\11\1\0"+
    "\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _FortranLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 81: break;
          case 2: 
            { return FortranTokens.LINE_COMMENT;
            }
          case 82: break;
          case 3: 
            { return FortranTokens.WHITE_SPACE;
            }
          case 83: break;
          case 4: 
            { return FortranTokens.TO_KEYWORD;
            }
          case 84: break;
          case 5: 
            { return FortranTokens.IN_KEYWORD;
            }
          case 85: break;
          case 6: 
            { return FortranTokens.IF_KEYWORD;
            }
          case 86: break;
          case 7: 
            { return FortranTokens.GO_KEYWORD;
            }
          case 87: break;
          case 8: 
            { return FortranTokens.DO_KEYWORD;
            }
          case 88: break;
          case 9: 
            { return FortranTokens.LEN_KEYWORD;
            }
          case 89: break;
          case 10: 
            { return FortranTokens.OUT_KEYWORD;
            }
          case 90: break;
          case 11: 
            { return FortranTokens.END_KEYWORD;
            }
          case 91: break;
          case 12: 
            { return FortranTokens.USE_KEYWORD;
            }
          case 92: break;
          case 13: 
            { return FortranTokens.REAL_KEYWORD;
            }
          case 93: break;
          case 14: 
            { return FortranTokens.READ_KEYWORD;
            }
          case 94: break;
          case 15: 
            { return FortranTokens.ONLY_KEYWORD;
            }
          case 95: break;
          case 16: 
            { return FortranTokens.OPEN_KEYWORD;
            }
          case 96: break;
          case 17: 
            { return FortranTokens.CALL_KEYWORD;
            }
          case 97: break;
          case 18: 
            { return FortranTokens.CASE_KEYWORD;
            }
          case 98: break;
          case 19: 
            { return FortranTokens.THEN_KEYWORD;
            }
          case 99: break;
          case 20: 
            { return FortranTokens.TYPE_KEYWORD;
            }
          case 100: break;
          case 21: 
            { return FortranTokens.ELSE_KEYWORD;
            }
          case 101: break;
          case 22: 
            { return FortranTokens.EXIT_KEYWORD;
            }
          case 102: break;
          case 23: 
            { return FortranTokens.SAVE_KEYWORD;
            }
          case 103: break;
          case 24: 
            { return FortranTokens.STOP_KEYWORD;
            }
          case 104: break;
          case 25: 
            { return FortranTokens.KIND_KEYWORD;
            }
          case 105: break;
          case 26: 
            { return FortranTokens.DATA_KEYWORD;
            }
          case 106: break;
          case 27: 
            { return FortranTokens.CLOSE_KEYWORD;
            }
          case 107: break;
          case 28: 
            { return FortranTokens.CYCLE_KEYWORD;
            }
          case 108: break;
          case 29: 
            { return FortranTokens.BLOCK_KEYWORD;
            }
          case 109: break;
          case 30: 
            { return FortranTokens.ENTRY_KEYWORD;
            }
          case 110: break;
          case 31: 
            { return FortranTokens.INOUT_KEYWORD;
            }
          case 111: break;
          case 32: 
            { return FortranTokens.PRINT_KEYWORD;
            }
          case 112: break;
          case 33: 
            { return FortranTokens.PAUSE_KEYWORD;
            }
          case 113: break;
          case 34: 
            { return FortranTokens.WRITE_KEYWORD;
            }
          case 114: break;
          case 35: 
            { return FortranTokens.WHERE_KEYWORD;
            }
          case 115: break;
          case 36: 
            { return FortranTokens.WHILE_KEYWORD;
            }
          case 116: break;
          case 37: 
            { return FortranTokens.RETURN_KEYWORD;
            }
          case 117: break;
          case 38: 
            { return FortranTokens.RESULT_KEYWORD;
            }
          case 118: break;
          case 39: 
            { return FortranTokens.REWIND_KEYWORD;
            }
          case 119: break;
          case 40: 
            { return FortranTokens.ASSIGN_KEYWORD;
            }
          case 120: break;
          case 41: 
            { return FortranTokens.COMMON_KEYWORD;
            }
          case 121: break;
          case 42: 
            { return FortranTokens.TARGET_KEYWORD;
            }
          case 122: break;
          case 43: 
            { return FortranTokens.SELECT_KEYWORD;
            }
          case 123: break;
          case 44: 
            { return FortranTokens.INTENT_KEYWORD;
            }
          case 124: break;
          case 45: 
            { return FortranTokens.MODULE_KEYWORD;
            }
          case 125: break;
          case 46: 
            { return FortranTokens.PUBLIC_KEYWORD;
            }
          case 126: break;
          case 47: 
            { return FortranTokens.DOUBLE_KEYWORD;
            }
          case 127: break;
          case 48: 
            { return FortranTokens.FORMAT_KEYWORD;
            }
          case 128: break;
          case 49: 
            { return FortranTokens.LOGICAL_KEYWORD;
            }
          case 129: break;
          case 50: 
            { return FortranTokens.COMPLEX_KEYWORD;
            }
          case 130: break;
          case 51: 
            { return FortranTokens.ENDFILE_KEYWORD;
            }
          case 131: break;
          case 52: 
            { return FortranTokens.INTEGER_KEYWORD;
            }
          case 132: break;
          case 53: 
            { return FortranTokens.INQUIRE_KEYWORD;
            }
          case 133: break;
          case 54: 
            { return FortranTokens.NULLIFY_KEYWORD;
            }
          case 134: break;
          case 55: 
            { return FortranTokens.PROGRAM_KEYWORD;
            }
          case 135: break;
          case 56: 
            { return FortranTokens.PRIVATE_KEYWORD;
            }
          case 136: break;
          case 57: 
            { return FortranTokens.POINTER_KEYWORD;
            }
          case 137: break;
          case 58: 
            { return FortranTokens.DEFAULT_KEYWORD;
            }
          case 138: break;
          case 59: 
            { return FortranTokens.ALLOCATE_KEYWORD;
            }
          case 139: break;
          case 60: 
            { return FortranTokens.OPTIONAL_KEYWORD;
            }
          case 140: break;
          case 61: 
            { return FortranTokens.OPERATOR_KEYWORD;
            }
          case 141: break;
          case 62: 
            { return FortranTokens.CONTAINS_KEYWORD;
            }
          case 142: break;
          case 63: 
            { return FortranTokens.CONTINUE_KEYWORD;
            }
          case 143: break;
          case 64: 
            { return FortranTokens.EXTERNAL_KEYWORD;
            }
          case 144: break;
          case 65: 
            { return FortranTokens.IMPLICIT_KEYWORD;
            }
          case 145: break;
          case 66: 
            { return FortranTokens.NAMELIST_KEYWORD;
            }
          case 146: break;
          case 67: 
            { return FortranTokens.FUNCTION_KEYWORD;
            }
          case 147: break;
          case 68: 
            { return FortranTokens.RECURSIVE_KEYWORD;
            }
          case 148: break;
          case 69: 
            { return FortranTokens.CHARACTER_KEYWORD;
            }
          case 149: break;
          case 70: 
            { return FortranTokens.BACKSPACE_KEYWORD;
            }
          case 150: break;
          case 71: 
            { return FortranTokens.ELSEWHERE_KEYWORD;
            }
          case 151: break;
          case 72: 
            { return FortranTokens.INTRINSIC_KEYWORD;
            }
          case 152: break;
          case 73: 
            { return FortranTokens.INTERFACE_KEYWORD;
            }
          case 153: break;
          case 74: 
            { return FortranTokens.PRECISION_KEYWORD;
            }
          case 154: break;
          case 75: 
            { return FortranTokens.PARAMETER_KEYWORD;
            }
          case 155: break;
          case 76: 
            { return FortranTokens.ASSIGNMENT_KEYWORD;
            }
          case 156: break;
          case 77: 
            { return FortranTokens.SUBROUTINE_KEYWORD;
            }
          case 157: break;
          case 78: 
            { return FortranTokens.DEALLOCATE_KEYWORD;
            }
          case 158: break;
          case 79: 
            { return FortranTokens.ALLOCATABLE_KEYWORD;
            }
          case 159: break;
          case 80: 
            { return FortranTokens.EQUIVALENCE_KEYWORD;
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
