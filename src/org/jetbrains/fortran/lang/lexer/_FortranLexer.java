/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.jetbrains.fortran.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>C:/development/fortran-plugin/src/org/jetbrains/fortran/lang/lexer/Fortran.flex</tt>
 */
class _FortranLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int DQ_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13856 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\3"+
    "\13\1\15\3\13\1\16\24\13\1\17\1\20\1\21\10\1\1\22\1\23\1\13\1\24\4\13\1\25"+
    "\10\13\1\26\12\13\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13"+
    "\1\32\1\1\1\34\1\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1"+
    "\43\1\44\1\13\1\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52"+
    "\2\13\1\53\1\1\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\20\1\64"+
    "\1\57\1\60\1\65\1\1\1\66\1\67\1\70\1\71\1\24\1\60\1\72\1\1\1\73\1\55\1\74"+
    "\1\75\1\57\1\60\1\72\1\1\1\63\1\55\1\43\1\76\1\77\1\100\1\101\1\1\1\73\1\67"+
    "\1\1\1\102\1\40\1\60\1\53\1\1\1\103\1\55\1\1\1\102\1\40\1\60\1\104\1\1\1\62"+
    "\1\55\1\105\1\102\1\40\1\13\1\106\1\62\1\107\1\55\1\110\1\111\1\112\1\13\1"+
    "\113\1\114\1\1\1\67\1\1\1\27\2\13\1\115\1\114\1\116\2\1\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\2\1\1\73\1\1\1\116\1\1\1\125\1\13\1\126\1\1\1\127\7\1\2"+
    "\13\1\32\1\107\1\116\1\130\1\131\1\132\1\133\1\116\2\13\1\134\2\13\1\135\24"+
    "\13\1\136\1\137\2\13\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\32\2\1"+
    "\1\13\1\1\5\13\1\142\1\27\45\13\1\143\1\13\1\27\1\32\4\13\1\32\1\144\1\145"+
    "\1\20\1\13\1\20\1\13\1\20\1\145\1\73\3\13\1\146\1\1\1\147\1\116\2\1\1\116"+
    "\5\13\1\31\2\13\1\150\4\13\1\42\1\13\1\151\2\1\1\67\1\13\1\152\1\51\2\13\1"+
    "\153\1\13\1\101\1\116\2\1\1\13\1\114\3\13\1\51\2\1\2\116\1\154\5\1\1\111\2"+
    "\13\1\146\1\155\1\116\2\1\1\156\1\13\1\157\1\44\2\13\1\42\1\1\2\13\1\146\1"+
    "\1\1\160\1\44\1\13\1\152\6\1\1\161\1\162\14\13\4\1\21\13\1\142\2\13\1\142"+
    "\1\163\1\13\1\152\3\13\1\164\1\165\1\166\1\126\1\165\2\1\1\167\4\1\1\170\1"+
    "\1\1\126\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\151\2\13"+
    "\1\151\10\13\1\177\1\200\2\13\1\134\3\13\1\201\1\1\1\13\1\114\4\202\4\1\1"+
    "\107\35\1\1\203\2\1\1\204\1\27\4\13\1\205\1\27\4\13\1\135\1\111\1\13\1\152"+
    "\1\27\4\13\1\151\1\1\1\13\1\32\3\1\1\13\40\1\133\13\1\42\4\1\135\13\1\42\2"+
    "\1\10\13\1\126\4\1\2\13\1\152\20\13\1\126\1\13\1\206\1\1\2\13\1\151\1\107"+
    "\1\13\1\152\4\13\1\42\2\1\1\207\1\210\5\13\1\211\1\13\1\152\1\31\3\1\1\207"+
    "\1\212\1\13\1\33\1\1\3\13\1\146\1\210\2\13\1\146\1\1\1\116\1\1\1\213\1\44"+
    "\1\13\1\42\1\13\1\114\1\1\1\13\1\126\1\52\2\13\1\33\1\107\1\116\1\214\1\215"+
    "\2\13\1\50\1\1\1\216\1\116\1\13\1\217\3\13\1\220\1\221\1\222\1\32\1\70\1\223"+
    "\1\224\1\202\2\13\1\135\1\42\7\13\1\33\1\116\72\13\1\146\1\13\1\225\2\13\1"+
    "\153\20\1\26\13\1\152\6\13\1\101\2\1\1\114\1\226\1\60\1\227\1\230\6\13\1\20"+
    "\1\1\1\156\25\13\1\152\1\1\4\13\1\210\2\13\1\31\2\1\1\153\7\1\1\214\7\13\1"+
    "\126\1\1\1\116\1\27\1\32\1\27\1\32\1\231\4\13\1\151\1\232\1\233\2\1\1\234"+
    "\1\13\1\14\1\235\2\152\2\1\7\13\1\32\30\1\1\13\1\126\3\13\1\73\2\1\2\13\1"+
    "\1\1\13\1\236\2\13\1\42\1\13\1\152\2\13\1\237\3\1\11\13\1\152\1\116\5\1\2"+
    "\13\1\31\3\13\1\146\11\1\23\13\1\114\1\13\1\42\1\31\11\1\1\240\2\13\1\241"+
    "\1\13\1\42\1\13\1\114\1\13\1\151\4\1\1\13\1\242\1\13\1\42\1\13\1\101\4\1\3"+
    "\13\1\243\4\1\1\73\1\244\1\13\1\146\2\1\1\13\1\126\1\13\1\126\2\1\1\125\1"+
    "\13\1\51\1\1\3\13\1\42\1\13\1\42\1\13\1\33\1\13\1\20\6\1\4\13\1\50\3\1\3\13"+
    "\1\33\3\13\1\33\60\1\1\156\2\13\1\31\2\1\1\67\1\1\1\156\2\13\2\1\1\13\1\50"+
    "\1\116\1\156\1\13\1\114\1\67\1\1\2\13\1\245\1\156\2\13\1\33\1\246\1\247\2"+
    "\1\1\13\1\24\1\153\5\1\1\250\1\251\1\50\2\13\1\151\1\1\1\116\1\75\1\57\1\60"+
    "\1\72\1\1\1\252\1\20\21\1\3\13\1\1\1\253\1\116\12\1\2\13\1\151\2\1\1\254\2"+
    "\1\3\13\1\1\1\255\1\116\2\1\2\13\1\32\1\1\1\116\3\1\1\13\1\101\1\1\1\116\26"+
    "\1\4\13\1\116\1\107\34\1\3\13\1\50\20\1\71\13\1\101\16\1\14\13\1\146\53\1"+
    "\2\13\1\151\75\1\44\13\1\114\33\1\43\13\1\50\1\13\1\151\1\116\6\1\1\13\1\152"+
    "\1\1\3\13\1\1\1\146\1\116\1\156\1\256\1\13\67\1\4\13\1\51\1\73\3\1\1\156\6"+
    "\1\1\20\77\1\6\13\1\32\1\126\1\50\1\101\66\1\5\13\1\214\3\13\1\145\1\257\1"+
    "\260\1\261\3\13\1\262\1\263\1\13\1\264\1\265\1\40\24\13\1\266\1\13\1\40\1"+
    "\135\1\13\1\135\1\13\1\214\1\13\1\214\1\151\1\13\1\151\1\13\1\60\1\13\1\60"+
    "\1\13\1\267\3\270\14\13\1\51\123\1\1\261\1\13\1\271\1\272\1\273\1\274\1\275"+
    "\1\276\1\277\1\153\1\300\1\153\24\1\55\13\1\114\2\1\103\13\1\51\15\13\1\152"+
    "\150\13\1\20\25\1\41\13\1\152\36\1");

  /* The ZZ_CMAP_A table has 3088 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\6\1\5\1\70\1\6\1\70\22\0\1\6\1\4\1\15\1\0\1\31\1\32\1\33\1\14\1\24"+
    "\1\25\1\22\1\21\1\30\1\12\1\13\1\23\1\7\11\10\1\20\1\34\1\35\1\17\1\36\1\37"+
    "\1\0\1\45\1\52\1\51\1\64\1\43\1\44\1\54\1\60\1\53\1\2\1\57\1\46\1\56\1\55"+
    "\1\50\1\61\1\66\1\41\1\47\1\40\1\42\1\67\1\65\1\62\1\63\1\2\1\26\1\16\1\27"+
    "\1\0\1\3\1\0\1\45\1\52\1\51\1\64\1\11\1\44\1\54\1\60\1\53\1\2\1\57\1\46\1"+
    "\56\1\55\1\50\1\61\1\66\1\41\1\47\1\40\1\42\1\67\1\65\1\62\1\63\1\2\12\0\1"+
    "\70\24\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\10\2\2\53\35\2\1\47\2\2\4\0\14"+
    "\2\16\0\5\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0\1\2\1\0\3"+
    "\2\1\0\1\2\1\0\4\2\1\0\23\2\1\0\13\2\10\0\6\2\1\0\26\2\2\0\1\2\6\0\10\2\10"+
    "\0\13\2\5\0\3\2\15\0\12\1\4\0\6\2\1\0\1\2\17\0\2\2\7\0\2\2\12\1\3\2\2\0\2"+
    "\2\1\0\16\2\15\0\11\2\13\0\1\2\16\0\12\1\6\2\4\0\2\2\4\0\1\2\5\0\6\2\4\0\1"+
    "\2\11\0\1\2\3\0\1\2\7\0\11\2\7\0\5\2\17\0\26\2\3\0\1\2\2\0\1\2\7\0\12\2\4"+
    "\0\12\1\1\2\4\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0"+
    "\1\2\15\0\2\2\1\0\1\2\5\0\6\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\17\0\4\2\1\0"+
    "\1\2\7\0\12\1\2\0\3\2\20\0\11\2\1\0\2\2\1\0\2\2\1\0\5\2\3\0\1\2\2\0\1\2\30"+
    "\0\1\2\13\0\10\2\2\0\1\2\3\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1"+
    "\0\2\2\3\0\2\2\3\0\3\2\3\0\14\2\13\0\10\2\1\0\2\2\10\0\3\2\5\0\4\2\1\0\5\2"+
    "\3\0\1\2\3\0\2\2\15\0\13\2\2\0\1\2\21\0\1\2\12\0\6\2\5\0\22\2\3\0\10\2\1\0"+
    "\11\2\1\0\1\2\2\0\7\2\11\0\1\2\1\0\2\2\14\0\12\1\7\0\2\2\1\0\1\2\2\0\2\2\1"+
    "\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0"+
    "\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\1\2\0\14\2\1\0\24\2\13\0\5\2\3\0\6\2"+
    "\4\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0\6\2\1\0\1\2\5\0\1\2"+
    "\2\0\13\2\1\0\15\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\16\2\2\0\6\2\2\0\15\2\2\0\1\2\1\0\10\2\7\0\15\2\1\0\6"+
    "\2\23\0\1\2\4\0\1\2\3\0\11\2\1\0\1\2\5\0\17\2\1\0\16\2\2\0\14\2\13\0\1\2\15"+
    "\0\7\2\7\0\16\2\15\0\2\2\12\1\3\0\3\2\11\0\4\2\1\0\4\2\3\0\2\2\11\0\10\2\1"+
    "\0\1\2\1\0\1\2\1\0\1\2\1\0\6\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0"+
    "\6\2\14\0\2\70\7\0\1\2\15\0\1\2\2\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6"+
    "\0\1\2\1\0\1\2\1\0\1\2\1\0\1\57\3\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0\1\2\4\0\2"+
    "\2\13\0\5\2\6\0\4\2\3\0\2\2\14\0\10\2\7\0\10\2\1\0\7\2\6\0\2\2\12\0\5\2\5"+
    "\0\2\2\3\0\7\2\6\0\3\2\12\1\2\2\13\0\11\2\2\0\27\2\2\0\7\2\1\0\3\2\1\0\4\2"+
    "\1\0\4\2\2\0\6\2\3\0\1\2\1\0\1\2\2\0\5\2\1\0\12\2\12\1\5\2\1\0\3\2\1\0\10"+
    "\2\4\0\7\2\3\0\1\2\3\0\2\2\1\0\1\2\3\0\2\2\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3"+
    "\2\3\0\6\2\2\0\6\2\2\0\6\2\11\0\7\2\4\0\5\2\3\0\5\2\5\0\1\2\1\0\10\2\1\0\5"+
    "\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\12\2\6\0\12\2\2\0\6\2\2\0\6\2\2\0\6\2\2\0\3"+
    "\2\3\0\14\2\1\0\16\2\1\0\2\2\1\0\2\2\1\0\10\2\6\0\4\2\4\0\16\2\2\0\1\2\1\0"+
    "\14\2\1\0\2\2\3\0\1\2\2\0\4\2\1\0\2\2\12\0\10\2\6\0\6\2\1\0\3\2\1\0\12\2\3"+
    "\0\1\2\12\0\4\2\13\0\12\1\1\2\1\0\1\2\3\0\7\2\1\0\1\2\1\0\4\2\1\0\17\2\1\0"+
    "\2\2\14\0\3\2\4\0\2\2\1\0\1\2\20\0\4\2\10\0\1\2\13\0\10\2\5\0\3\2\2\0\1\2"+
    "\2\0\2\2\2\0\4\2\1\0\14\2\1\0\1\2\1\0\7\2\1\0\21\2\1\0\4\2\2\0\10\2\1\0\7"+
    "\2\1\0\14\2\1\0\4\2\1\0\5\2\1\0\1\2\3\0\14\2\2\0\13\2\1\0\10\2\2\0\22\1\1"+
    "\0\2\2\1\0\1\2\2\0\1\2\1\0\12\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2\4\0\1\2\1"+
    "\0\1\2\1\0\1\2\1\0\3\2\1\0\2\2\1\0\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\2\2\1\0\1\2\2\0\4\2\1\0\7\2\1\0\4\2\1\0\4\2\1\0\1\2\1\0\12\2\1\0"+
    "\5\2\1\0\3\2\1\0\5\2\1\0\5\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\4\2\5\1\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\22\2\1\33\1\34\1\35"+
    "\1\33\2\0\4\2\2\0\1\36\1\37\1\40\1\2"+
    "\1\41\30\2\1\42\1\43\1\2\1\44\13\2\1\45"+
    "\3\2\1\46\2\2\1\47\3\2\2\0\10\2\1\50"+
    "\4\2\1\51\5\2\1\52\44\2\1\46\1\53\3\2"+
    "\1\54\1\2\2\0\1\2\1\55\1\56\1\2\1\57"+
    "\1\60\11\2\1\61\1\2\1\62\1\63\1\2\1\64"+
    "\1\2\1\65\1\66\17\2\1\67\1\2\1\70\12\2"+
    "\1\71\5\2\1\46\1\2\1\72\3\2\2\0\16\2"+
    "\1\73\5\2\1\74\1\2\1\75\4\2\1\76\7\2"+
    "\1\77\3\2\1\100\5\2\1\101\1\102\1\103\4\2"+
    "\1\104\1\0\1\105\1\106\1\107\1\2\1\110\1\2"+
    "\1\111\1\2\1\112\1\2\1\113\5\2\1\114\5\2"+
    "\1\115\5\2\1\116\3\2\1\117\4\2\1\120\2\2"+
    "\1\121\2\2\1\122\4\2\1\123\5\2\1\124\3\2"+
    "\1\125\1\2\1\126\1\2\1\127\2\2\1\130\1\131"+
    "\1\2\1\132\1\133\3\2\1\134\2\2\1\135\1\136"+
    "\3\2\1\137\1\140\1\141\1\142\4\2\1\143\1\144"+
    "\4\2\1\145\1\2\1\146\3\2\1\147\1\150\1\151"+
    "\1\152\1\153\1\154\1\2\1\155\2\2\1\156\1\157"+
    "\1\160\1\161\1\162";

  private static int [] zzUnpackAction() {
    int [] result = new int[420];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\344\0\u01c8\0\u0201\0\253\0\u023a\0\253\0\253\0\u0273"+
    "\0\u02ac\0\253\0\u02e5\0\253\0\253\0\253\0\253\0\253"+
    "\0\253\0\253\0\253\0\253\0\253\0\253\0\253\0\253"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\253\0\253\0\u0759\0\344\0\u0792"+
    "\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\253\0\253"+
    "\0\253\0\u0921\0\u011d\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e"+
    "\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u011d\0\u0eb2\0\u0eeb\0\u011d\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec"+
    "\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4"+
    "\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u011d"+
    "\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u011d\0\u1728\0\u1761\0\u179a"+
    "\0\u17d3\0\u180c\0\u011d\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929"+
    "\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1"+
    "\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9"+
    "\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81"+
    "\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049"+
    "\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u011d\0\u2166\0\u219f\0\u21d8"+
    "\0\u2211\0\u011d\0\u011d\0\u224a\0\u011d\0\u011d\0\u2283\0\u22bc"+
    "\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u011d"+
    "\0\u2484\0\u011d\0\u011d\0\u24bd\0\u011d\0\u24f6\0\u011d\0\u011d"+
    "\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u011d"+
    "\0\u2886\0\u011d\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc"+
    "\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u011d\0\u2af9\0\u2b32\0\u2b6b"+
    "\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u011d\0\u2c88\0\u2cc1\0\u2cfa"+
    "\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2"+
    "\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a"+
    "\0\u011d\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u011d\0\u31e0"+
    "\0\u011d\0\u3219\0\u3252\0\u328b\0\u32c4\0\u011d\0\u32fd\0\u3336"+
    "\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u011d\0\u348c\0\u34c5"+
    "\0\u34fe\0\u011d\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u011d"+
    "\0\u011d\0\u011d\0\u3654\0\u368d\0\u36c6\0\u36ff\0\253\0\u3738"+
    "\0\u011d\0\u011d\0\u011d\0\u3771\0\u011d\0\u37aa\0\u011d\0\u37e3"+
    "\0\u381c\0\u3855\0\u011d\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972"+
    "\0\u011d\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u011d\0\u3ac8"+
    "\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u011d\0\u3be5\0\u3c1e\0\u3c57"+
    "\0\u011d\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u011d\0\u3d74\0\u3dad"+
    "\0\u011d\0\u3de6\0\u3e1f\0\253\0\u3e58\0\u3e91\0\u3eca\0\u3f03"+
    "\0\u011d\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u011d\0\u4059"+
    "\0\u4092\0\u40cb\0\u011d\0\u4104\0\u011d\0\u413d\0\u011d\0\u4176"+
    "\0\u41af\0\u011d\0\u011d\0\u41e8\0\u011d\0\u011d\0\u4221\0\u425a"+
    "\0\u4293\0\u011d\0\u42cc\0\u4305\0\u011d\0\u011d\0\u433e\0\u4377"+
    "\0\u43b0\0\u011d\0\u011d\0\u011d\0\u011d\0\u43e9\0\u4422\0\u445b"+
    "\0\u4494\0\u011d\0\u011d\0\u44cd\0\u4506\0\u453f\0\u4578\0\u011d"+
    "\0\u45b1\0\u011d\0\u45ea\0\u4623\0\u465c\0\u011d\0\u011d\0\u011d"+
    "\0\u011d\0\u011d\0\u011d\0\u4695\0\u011d\0\u46ce\0\u4707\0\u011d"+
    "\0\u011d\0\u011d\0\u011d\0\u011d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[420];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\2\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\4\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\13\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\6"+
    "\1\60\2\6\1\61\1\62\2\6\1\0\5\63\1\64"+
    "\6\63\1\65\1\63\1\4\52\63\5\66\1\64\7\66"+
    "\1\65\1\4\52\66\72\0\1\67\5\0\2\67\2\0"+
    "\1\70\56\0\3\6\3\0\3\6\26\0\30\6\1\0"+
    "\5\7\1\0\63\7\5\0\2\10\63\0\1\12\5\0"+
    "\2\12\2\0\1\70\56\0\3\6\3\0\3\6\26\0"+
    "\6\6\1\71\6\6\1\72\4\6\1\73\3\6\1\74"+
    "\1\6\41\0\1\75\3\0\1\76\43\0\1\77\71\0"+
    "\1\100\72\0\1\101\47\0\3\6\3\0\3\6\26\0"+
    "\5\6\1\102\2\6\1\103\7\6\1\104\2\6\1\105"+
    "\4\6\2\0\3\6\3\0\2\6\1\106\26\0\3\6"+
    "\1\106\24\6\2\0\3\6\3\0\3\6\26\0\7\6"+
    "\1\107\20\6\2\0\3\6\3\0\3\6\26\0\2\6"+
    "\1\110\5\6\1\111\17\6\2\0\3\6\3\0\3\6"+
    "\26\0\6\6\1\112\1\113\20\6\2\0\3\6\3\0"+
    "\2\6\1\114\26\0\3\6\1\114\4\6\1\115\17\6"+
    "\2\0\3\6\3\0\2\6\1\116\26\0\1\117\1\6"+
    "\1\120\1\116\1\6\1\121\22\6\2\0\3\6\3\0"+
    "\3\6\26\0\2\6\1\122\12\6\1\123\3\6\1\124"+
    "\6\6\2\0\3\6\3\0\3\6\26\0\5\6\1\125"+
    "\1\126\1\6\1\127\7\6\1\130\2\6\1\131\4\6"+
    "\2\0\3\6\3\0\3\6\26\0\5\6\1\132\1\133"+
    "\21\6\2\0\3\6\3\0\3\6\26\0\4\6\1\134"+
    "\10\6\1\135\1\136\11\6\2\0\3\6\3\0\3\6"+
    "\26\0\10\6\1\137\17\6\2\0\3\6\3\0\3\6"+
    "\26\0\2\6\1\140\2\6\1\141\2\6\1\142\17\6"+
    "\2\0\3\6\3\0\3\6\26\0\10\6\1\143\17\6"+
    "\2\0\3\6\3\0\3\6\26\0\13\6\1\144\14\6"+
    "\2\0\3\6\3\0\3\6\26\0\1\6\1\145\1\146"+
    "\2\6\1\147\2\6\1\150\17\6\2\0\3\6\3\0"+
    "\2\6\1\151\26\0\3\6\1\151\1\6\1\152\2\6"+
    "\1\153\2\6\1\154\14\6\2\0\3\6\3\0\3\6"+
    "\26\0\1\6\1\155\16\6\1\156\7\6\1\0\5\63"+
    "\1\0\6\63\1\0\1\63\1\0\52\63\5\66\1\0"+
    "\7\66\2\0\52\66\1\0\1\157\5\0\2\157\61\0"+
    "\3\6\3\0\3\6\26\0\7\6\1\160\20\6\2\0"+
    "\3\6\3\0\3\6\26\0\1\161\23\6\1\162\3\6"+
    "\2\0\3\6\3\0\3\6\26\0\1\163\12\6\1\164"+
    "\14\6\2\0\3\6\3\0\3\6\26\0\2\6\1\165"+
    "\25\6\42\0\1\166\74\0\1\167\24\0\3\6\3\0"+
    "\3\6\26\0\1\6\1\170\26\6\2\0\3\6\3\0"+
    "\2\6\1\171\26\0\3\6\1\171\24\6\2\0\3\6"+
    "\3\0\3\6\26\0\21\6\1\172\6\6\2\0\3\6"+
    "\3\0\3\6\26\0\1\173\4\6\1\174\1\6\1\175"+
    "\1\6\1\176\13\6\1\177\2\6\2\0\3\6\3\0"+
    "\2\6\1\200\26\0\3\6\1\200\24\6\2\0\3\6"+
    "\3\0\3\6\26\0\15\6\1\201\12\6\2\0\3\6"+
    "\3\0\3\6\26\0\1\6\1\202\26\6\2\0\3\6"+
    "\3\0\3\6\26\0\6\6\1\203\21\6\2\0\3\6"+
    "\3\0\3\6\26\0\7\6\1\204\20\6\2\0\3\6"+
    "\3\0\3\6\26\0\15\6\1\205\12\6\2\0\3\6"+
    "\3\0\3\6\26\0\14\6\1\206\13\6\2\0\3\6"+
    "\3\0\3\6\26\0\6\6\1\207\21\6\2\0\3\6"+
    "\3\0\3\6\26\0\10\6\1\210\17\6\2\0\3\6"+
    "\3\0\3\6\26\0\12\6\1\211\15\6\2\0\3\6"+
    "\3\0\3\6\26\0\27\6\1\212\2\0\3\6\3\0"+
    "\3\6\26\0\1\213\27\6\2\0\3\6\3\0\3\6"+
    "\26\0\6\6\1\214\21\6\2\0\3\6\3\0\2\6"+
    "\1\215\26\0\1\216\2\6\1\215\24\6\2\0\3\6"+
    "\3\0\3\6\26\0\6\6\1\217\1\220\20\6\2\0"+
    "\3\6\3\0\3\6\26\0\10\6\1\221\17\6\2\0"+
    "\3\6\3\0\3\6\26\0\15\6\1\222\1\223\11\6"+
    "\2\0\3\6\3\0\3\6\26\0\5\6\1\224\22\6"+
    "\2\0\3\6\3\0\3\6\26\0\11\6\1\225\16\6"+
    "\2\0\3\6\3\0\3\6\26\0\11\6\1\226\16\6"+
    "\2\0\3\6\3\0\3\6\26\0\10\6\1\227\17\6"+
    "\2\0\3\6\3\0\3\6\26\0\1\230\7\6\1\231"+
    "\15\6\1\232\1\6\2\0\3\6\3\0\3\6\26\0"+
    "\21\6\1\233\6\6\2\0\3\6\3\0\3\6\26\0"+
    "\6\6\1\234\21\6\2\0\3\6\3\0\3\6\26\0"+
    "\16\6\1\235\11\6\2\0\3\6\3\0\3\6\26\0"+
    "\15\6\1\236\12\6\2\0\3\6\3\0\3\6\26\0"+
    "\24\6\1\237\3\6\2\0\3\6\3\0\3\6\26\0"+
    "\15\6\1\240\12\6\2\0\3\6\3\0\2\6\1\241"+
    "\26\0\3\6\1\241\4\6\1\242\2\6\1\243\14\6"+
    "\2\0\3\6\3\0\3\6\26\0\12\6\1\244\15\6"+
    "\2\0\3\6\3\0\3\6\26\0\1\6\1\245\1\246"+
    "\25\6\2\0\3\6\3\0\3\6\26\0\13\6\1\247"+
    "\14\6\2\0\3\6\3\0\3\6\26\0\4\6\1\250"+
    "\1\251\22\6\2\0\3\6\3\0\3\6\26\0\1\252"+
    "\27\6\2\0\3\6\3\0\3\6\26\0\2\6\1\253"+
    "\25\6\2\0\3\6\3\0\3\6\26\0\16\6\1\254"+
    "\11\6\2\0\3\6\3\0\3\6\26\0\13\6\1\255"+
    "\14\6\2\0\3\6\3\0\2\6\1\256\26\0\3\6"+
    "\1\256\7\6\1\257\14\6\2\0\1\157\5\0\2\157"+
    "\1\260\60\0\3\6\3\0\2\6\1\261\26\0\3\6"+
    "\1\261\24\6\2\0\3\6\3\0\3\6\26\0\1\6"+
    "\1\262\26\6\2\0\3\6\3\0\3\6\26\0\4\6"+
    "\1\263\23\6\2\0\3\6\3\0\2\6\1\264\26\0"+
    "\3\6\1\264\24\6\2\0\3\6\3\0\3\6\26\0"+
    "\1\265\27\6\2\0\3\6\3\0\3\6\26\0\13\6"+
    "\1\266\14\6\43\0\1\267\74\0\1\270\23\0\3\6"+
    "\3\0\3\6\26\0\14\6\1\271\13\6\2\0\3\6"+
    "\3\0\3\6\26\0\15\6\1\272\12\6\2\0\3\6"+
    "\3\0\2\6\1\273\26\0\3\6\1\273\24\6\2\0"+
    "\3\6\3\0\3\6\26\0\2\6\1\274\25\6\2\0"+
    "\3\6\3\0\3\6\26\0\6\6\1\275\15\6\1\276"+
    "\3\6\2\0\3\6\3\0\3\6\26\0\2\6\1\277"+
    "\25\6\2\0\3\6\3\0\3\6\26\0\2\6\1\300"+
    "\25\6\2\0\3\6\3\0\3\6\26\0\13\6\1\301"+
    "\14\6\2\0\3\6\3\0\3\6\26\0\11\6\1\302"+
    "\16\6\2\0\3\6\3\0\3\6\26\0\16\6\1\303"+
    "\11\6\2\0\3\6\3\0\3\6\26\0\10\6\1\304"+
    "\17\6\2\0\3\6\3\0\3\6\26\0\13\6\1\305"+
    "\14\6\2\0\3\6\3\0\3\6\26\0\13\6\1\306"+
    "\14\6\2\0\3\6\3\0\2\6\1\307\26\0\3\6"+
    "\1\307\24\6\2\0\3\6\3\0\3\6\26\0\21\6"+
    "\1\310\6\6\2\0\3\6\3\0\3\6\26\0\1\6"+
    "\1\311\26\6\2\0\3\6\3\0\2\6\1\312\26\0"+
    "\3\6\1\312\24\6\2\0\3\6\3\0\3\6\26\0"+
    "\23\6\1\313\4\6\2\0\3\6\3\0\3\6\26\0"+
    "\1\6\1\314\13\6\1\315\12\6\2\0\3\6\3\0"+
    "\3\6\26\0\13\6\1\316\14\6\2\0\3\6\3\0"+
    "\3\6\26\0\6\6\1\317\21\6\2\0\3\6\3\0"+
    "\2\6\1\320\26\0\3\6\1\320\24\6\2\0\3\6"+
    "\3\0\3\6\26\0\7\6\1\321\20\6\2\0\3\6"+
    "\3\0\3\6\26\0\1\322\27\6\2\0\3\6\3\0"+
    "\3\6\26\0\16\6\1\323\2\6\1\324\6\6\2\0"+
    "\3\6\3\0\3\6\26\0\1\6\1\325\26\6\2\0"+
    "\3\6\3\0\3\6\26\0\6\6\1\326\21\6\2\0"+
    "\3\6\3\0\3\6\26\0\17\6\1\327\10\6\2\0"+
    "\3\6\3\0\3\6\26\0\11\6\1\330\16\6\2\0"+
    "\3\6\3\0\2\6\1\331\26\0\1\6\1\332\1\6"+
    "\1\331\24\6\2\0\3\6\3\0\3\6\26\0\2\6"+
    "\1\333\25\6\2\0\3\6\3\0\3\6\26\0\2\6"+
    "\1\334\25\6\2\0\3\6\3\0\3\6\26\0\6\6"+
    "\1\335\21\6\2\0\3\6\3\0\3\6\26\0\6\6"+
    "\1\336\21\6\2\0\3\6\3\0\2\6\1\337\26\0"+
    "\3\6\1\337\24\6\2\0\3\6\3\0\2\6\1\340"+
    "\26\0\3\6\1\340\24\6\2\0\3\6\3\0\3\6"+
    "\26\0\2\6\1\341\25\6\2\0\3\6\3\0\3\6"+
    "\26\0\24\6\1\342\3\6\2\0\3\6\3\0\3\6"+
    "\26\0\11\6\1\343\16\6\2\0\3\6\3\0\3\6"+
    "\26\0\14\6\1\344\13\6\2\0\3\6\3\0\3\6"+
    "\26\0\15\6\1\345\11\6\1\346\2\0\3\6\3\0"+
    "\3\6\26\0\6\6\1\347\21\6\2\0\3\6\3\0"+
    "\3\6\26\0\5\6\1\350\22\6\2\0\3\6\3\0"+
    "\3\6\26\0\7\6\1\351\20\6\2\0\3\6\3\0"+
    "\3\6\26\0\15\6\1\352\12\6\2\0\3\6\3\0"+
    "\3\6\26\0\5\6\1\353\22\6\2\0\3\6\3\0"+
    "\3\6\26\0\6\6\1\354\21\6\2\0\3\6\3\0"+
    "\3\6\26\0\5\6\1\355\22\6\2\0\3\6\3\0"+
    "\3\6\26\0\12\6\1\356\15\6\2\0\3\6\3\0"+
    "\2\6\1\357\26\0\3\6\1\357\24\6\2\0\3\6"+
    "\3\0\3\6\26\0\1\360\27\6\2\0\3\6\3\0"+
    "\3\6\26\0\1\6\1\361\26\6\2\0\3\6\3\0"+
    "\3\6\26\0\6\6\1\362\21\6\2\0\1\363\5\0"+
    "\2\363\1\0\1\363\6\0\1\363\50\0\3\6\3\0"+
    "\3\6\26\0\25\6\1\364\2\6\2\0\3\6\3\0"+
    "\3\6\26\0\23\6\1\365\4\6\2\0\3\6\3\0"+
    "\3\6\26\0\13\6\1\366\14\6\2\0\3\6\3\0"+
    "\3\6\26\0\1\6\1\367\26\6\2\0\3\6\3\0"+
    "\3\6\26\0\27\6\1\370\12\0\1\371\31\0\1\371"+
    "\74\0\1\372\22\0\3\6\3\0\2\6\1\373\26\0"+
    "\3\6\1\373\24\6\2\0\3\6\3\0\3\6\26\0"+
    "\1\6\1\374\26\6\2\0\3\6\3\0\3\6\26\0"+
    "\6\6\1\375\21\6\2\0\3\6\3\0\3\6\26\0"+
    "\1\6\1\376\26\6\2\0\3\6\3\0\3\6\26\0"+
    "\15\6\1\377\12\6\2\0\3\6\3\0\3\6\26\0"+
    "\1\u0100\27\6\2\0\3\6\3\0\3\6\26\0\5\6"+
    "\1\u0101\22\6\2\0\3\6\3\0\3\6\26\0\11\6"+
    "\1\u0102\16\6\2\0\3\6\3\0\3\6\26\0\14\6"+
    "\1\u0103\13\6\2\0\3\6\3\0\3\6\26\0\11\6"+
    "\1\u0104\16\6\2\0\3\6\3\0\3\6\26\0\11\6"+
    "\1\u0105\16\6\2\0\3\6\3\0\3\6\26\0\10\6"+
    "\1\u0106\17\6\2\0\3\6\3\0\3\6\26\0\5\6"+
    "\1\u0107\22\6\2\0\3\6\3\0\3\6\26\0\10\6"+
    "\1\u0108\17\6\2\0\3\6\3\0\2\6\1\u0109\26\0"+
    "\3\6\1\u0109\24\6\2\0\3\6\3\0\3\6\26\0"+
    "\5\6\1\u010a\5\6\1\u010b\14\6\2\0\3\6\3\0"+
    "\3\6\26\0\10\6\1\u010c\17\6\2\0\3\6\3\0"+
    "\3\6\26\0\6\6\1\u010d\21\6\2\0\3\6\3\0"+
    "\3\6\26\0\5\6\1\u010e\22\6\2\0\3\6\3\0"+
    "\2\6\1\u010f\26\0\3\6\1\u010f\24\6\2\0\3\6"+
    "\3\0\3\6\26\0\7\6\1\u0110\20\6\2\0\3\6"+
    "\3\0\3\6\26\0\17\6\1\u0111\10\6\2\0\3\6"+
    "\3\0\3\6\26\0\1\6\1\u0112\12\6\1\u0113\1\u0114"+
    "\12\6\2\0\3\6\3\0\3\6\26\0\13\6\1\u0115"+
    "\14\6\2\0\3\6\3\0\3\6\26\0\1\u0116\27\6"+
    "\2\0\3\6\3\0\3\6\26\0\13\6\1\u0117\14\6"+
    "\2\0\3\6\3\0\3\6\26\0\13\6\1\u0118\14\6"+
    "\2\0\3\6\3\0\3\6\26\0\13\6\1\u0119\14\6"+
    "\2\0\3\6\3\0\3\6\26\0\6\6\1\u011a\21\6"+
    "\2\0\3\6\3\0\3\6\26\0\6\6\1\u011b\21\6"+
    "\2\0\3\6\3\0\3\6\26\0\13\6\1\u011c\14\6"+
    "\2\0\3\6\3\0\3\6\26\0\1\6\1\u011d\26\6"+
    "\2\0\3\6\3\0\3\6\26\0\1\u011e\27\6\2\0"+
    "\3\6\3\0\3\6\26\0\5\6\1\u011f\22\6\2\0"+
    "\3\6\3\0\3\6\26\0\13\6\1\u0120\14\6\2\0"+
    "\3\6\3\0\3\6\26\0\16\6\1\u0121\11\6\2\0"+
    "\3\6\3\0\2\6\1\u0122\26\0\3\6\1\u0122\24\6"+
    "\2\0\3\6\3\0\3\6\26\0\1\u0123\27\6\2\0"+
    "\3\6\3\0\3\6\26\0\2\6\1\u0124\25\6\2\0"+
    "\3\6\3\0\3\6\26\0\6\6\1\u0125\21\6\2\0"+
    "\3\6\3\0\3\6\26\0\6\6\1\u0126\21\6\2\0"+
    "\3\6\3\0\3\6\26\0\15\6\1\u0127\12\6\2\0"+
    "\3\6\3\0\2\6\1\u0128\26\0\3\6\1\u0128\24\6"+
    "\2\0\3\6\3\0\2\6\1\u0129\26\0\3\6\1\u0129"+
    "\24\6\2\0\3\6\3\0\2\6\1\u012a\26\0\3\6"+
    "\1\u012a\24\6\2\0\1\363\5\0\2\363\61\0\3\6"+
    "\3\0\3\6\26\0\20\6\1\u012b\7\6\2\0\3\6"+
    "\3\0\3\6\26\0\6\6\1\u012c\21\6\2\0\3\6"+
    "\3\0\3\6\26\0\15\6\1\u012d\12\6\2\0\3\6"+
    "\3\0\3\6\26\0\5\6\1\u012e\22\6\14\0\1\u012f"+
    "\66\0\1\u0130\31\0\1\u0130\26\0\3\6\3\0\3\6"+
    "\26\0\1\u0131\27\6\2\0\3\6\3\0\3\6\26\0"+
    "\15\6\1\u0132\12\6\2\0\3\6\3\0\3\6\26\0"+
    "\1\u0133\27\6\2\0\3\6\3\0\3\6\26\0\7\6"+
    "\1\u0134\20\6\2\0\3\6\3\0\3\6\26\0\24\6"+
    "\1\u0135\3\6\2\0\3\6\3\0\3\6\26\0\13\6"+
    "\1\u0136\14\6\2\0\3\6\3\0\3\6\26\0\1\u0137"+
    "\27\6\2\0\3\6\3\0\3\6\26\0\5\6\1\u0138"+
    "\22\6\2\0\3\6\3\0\3\6\26\0\15\6\1\u0139"+
    "\12\6\2\0\3\6\3\0\3\6\26\0\5\6\1\u013a"+
    "\22\6\2\0\3\6\3\0\3\6\26\0\1\u013b\27\6"+
    "\2\0\3\6\3\0\3\6\26\0\2\6\1\u013c\25\6"+
    "\2\0\3\6\3\0\3\6\26\0\1\u013d\27\6\2\0"+
    "\3\6\3\0\3\6\26\0\15\6\1\u013e\12\6\2\0"+
    "\3\6\3\0\3\6\26\0\13\6\1\u013f\14\6\2\0"+
    "\3\6\3\0\3\6\26\0\15\6\1\u0140\12\6\2\0"+
    "\3\6\3\0\3\6\26\0\15\6\1\u0141\12\6\2\0"+
    "\3\6\3\0\2\6\1\u0142\26\0\3\6\1\u0142\24\6"+
    "\2\0\3\6\3\0\3\6\26\0\11\6\1\u0143\16\6"+
    "\2\0\3\6\3\0\3\6\26\0\21\6\1\u0144\6\6"+
    "\2\0\3\6\3\0\3\6\26\0\4\6\1\u0145\23\6"+
    "\2\0\3\6\3\0\2\6\1\u0146\26\0\3\6\1\u0146"+
    "\24\6\2\0\3\6\3\0\3\6\26\0\1\u0147\27\6"+
    "\2\0\3\6\3\0\3\6\26\0\15\6\1\u0148\12\6"+
    "\2\0\3\6\3\0\3\6\26\0\1\6\1\u0149\26\6"+
    "\2\0\3\6\3\0\3\6\26\0\11\6\1\u014a\16\6"+
    "\2\0\3\6\3\0\3\6\26\0\4\6\1\u014b\23\6"+
    "\2\0\3\6\3\0\3\6\26\0\13\6\1\u014c\14\6"+
    "\2\0\3\6\3\0\2\6\1\u014d\26\0\3\6\1\u014d"+
    "\24\6\2\0\3\6\3\0\3\6\26\0\7\6\1\u014e"+
    "\20\6\2\0\3\6\3\0\3\6\26\0\5\6\1\u014f"+
    "\22\6\2\0\3\6\3\0\3\6\26\0\1\u0150\27\6"+
    "\2\0\3\6\3\0\3\6\26\0\11\6\1\u0151\16\6"+
    "\2\0\3\6\3\0\2\6\1\u0152\26\0\3\6\1\u0152"+
    "\24\6\2\0\3\6\3\0\2\6\1\u0153\26\0\3\6"+
    "\1\u0153\24\6\2\0\3\6\3\0\3\6\26\0\6\6"+
    "\1\u0154\21\6\2\0\3\6\3\0\3\6\26\0\10\6"+
    "\1\u0155\17\6\2\0\3\6\3\0\2\6\1\u0156\26\0"+
    "\3\6\1\u0156\24\6\2\0\3\6\3\0\3\6\26\0"+
    "\7\6\1\u0157\20\6\2\0\3\6\3\0\2\6\1\u0158"+
    "\26\0\3\6\1\u0158\24\6\2\0\3\6\3\0\2\6"+
    "\1\u0159\26\0\3\6\1\u0159\24\6\2\0\3\6\3\0"+
    "\3\6\26\0\5\6\1\u015a\22\6\2\0\3\6\3\0"+
    "\3\6\26\0\6\6\1\u015b\21\6\14\0\1\u015c\56\0"+
    "\3\6\3\0\3\6\26\0\13\6\1\u015d\14\6\2\0"+
    "\3\6\3\0\3\6\26\0\10\6\1\u015e\17\6\2\0"+
    "\3\6\3\0\3\6\26\0\1\u015f\27\6\2\0\3\6"+
    "\3\0\3\6\26\0\16\6\1\u0160\11\6\2\0\3\6"+
    "\3\0\3\6\26\0\6\6\1\u0161\21\6\2\0\3\6"+
    "\3\0\3\6\26\0\1\u0162\27\6\2\0\3\6\3\0"+
    "\3\6\26\0\10\6\1\u0163\17\6\2\0\3\6\3\0"+
    "\3\6\26\0\5\6\1\u0164\22\6\2\0\3\6\3\0"+
    "\3\6\26\0\15\6\1\u0165\12\6\2\0\3\6\3\0"+
    "\3\6\26\0\2\6\1\u0166\25\6\2\0\3\6\3\0"+
    "\3\6\26\0\22\6\1\u0167\5\6\2\0\3\6\3\0"+
    "\3\6\26\0\1\u0168\27\6\2\0\3\6\3\0\3\6"+
    "\26\0\5\6\1\u0169\22\6\2\0\3\6\3\0\3\6"+
    "\26\0\5\6\1\u016a\22\6\2\0\3\6\3\0\3\6"+
    "\26\0\1\6\1\u016b\26\6\2\0\3\6\3\0\3\6"+
    "\26\0\7\6\1\u016c\20\6\2\0\3\6\3\0\2\6"+
    "\1\u016d\26\0\3\6\1\u016d\24\6\2\0\3\6\3\0"+
    "\3\6\26\0\13\6\1\u016e\14\6\2\0\3\6\3\0"+
    "\3\6\26\0\23\6\1\u016f\4\6\2\0\3\6\3\0"+
    "\3\6\26\0\7\6\1\u0170\20\6\2\0\3\6\3\0"+
    "\3\6\26\0\13\6\1\u0171\14\6\2\0\3\6\3\0"+
    "\3\6\26\0\16\6\1\u0172\11\6\2\0\3\6\3\0"+
    "\2\6\1\u0173\26\0\3\6\1\u0173\24\6\2\0\3\6"+
    "\3\0\3\6\26\0\1\u0174\27\6\2\0\3\6\3\0"+
    "\3\6\26\0\1\6\1\u0175\26\6\2\0\3\6\3\0"+
    "\3\6\26\0\1\u0176\27\6\2\0\3\6\3\0\3\6"+
    "\26\0\11\6\1\u0177\16\6\2\0\3\6\3\0\3\6"+
    "\26\0\13\6\1\u0178\14\6\2\0\3\6\3\0\3\6"+
    "\26\0\1\6\1\u0179\26\6\2\0\3\6\3\0\3\6"+
    "\26\0\6\6\1\u017a\21\6\2\0\3\6\3\0\2\6"+
    "\1\u017b\26\0\3\6\1\u017b\24\6\2\0\3\6\3\0"+
    "\3\6\26\0\27\6\1\u017c\2\0\3\6\3\0\3\6"+
    "\26\0\15\6\1\u017d\12\6\2\0\3\6\3\0\2\6"+
    "\1\u017e\26\0\3\6\1\u017e\1\6\1\u017f\22\6\2\0"+
    "\3\6\3\0\2\6\1\u0180\26\0\3\6\1\u0180\24\6"+
    "\2\0\3\6\3\0\3\6\26\0\13\6\1\u0181\14\6"+
    "\2\0\3\6\3\0\3\6\26\0\1\6\1\u0182\26\6"+
    "\2\0\3\6\3\0\3\6\26\0\6\6\1\u0183\21\6"+
    "\2\0\3\6\3\0\3\6\26\0\7\6\1\u0184\20\6"+
    "\2\0\3\6\3\0\2\6\1\u0185\26\0\3\6\1\u0185"+
    "\24\6\2\0\3\6\3\0\2\6\1\u0186\26\0\3\6"+
    "\1\u0186\24\6\2\0\3\6\3\0\3\6\26\0\11\6"+
    "\1\u0187\16\6\2\0\3\6\3\0\3\6\26\0\11\6"+
    "\1\u0188\16\6\2\0\3\6\3\0\3\6\26\0\13\6"+
    "\1\u0189\14\6\2\0\3\6\3\0\3\6\26\0\1\u018a"+
    "\27\6\2\0\3\6\3\0\3\6\26\0\1\u018b\27\6"+
    "\2\0\3\6\3\0\3\6\26\0\10\6\1\u018c\17\6"+
    "\2\0\3\6\3\0\2\6\1\u018d\26\0\3\6\1\u018d"+
    "\24\6\2\0\3\6\3\0\3\6\26\0\5\6\1\u018e"+
    "\22\6\2\0\3\6\3\0\3\6\26\0\10\6\1\u018f"+
    "\17\6\2\0\3\6\3\0\2\6\1\u0190\26\0\3\6"+
    "\1\u0190\24\6\2\0\3\6\3\0\3\6\26\0\15\6"+
    "\1\u0191\12\6\2\0\3\6\3\0\2\6\1\u0192\26\0"+
    "\3\6\1\u0192\24\6\2\0\3\6\3\0\3\6\26\0"+
    "\12\6\1\u0193\15\6\2\0\3\6\3\0\3\6\26\0"+
    "\15\6\1\u0194\12\6\2\0\3\6\3\0\3\6\26\0"+
    "\15\6\1\u0195\12\6\2\0\3\6\3\0\3\6\26\0"+
    "\1\6\1\u0196\26\6\2\0\3\6\3\0\2\6\1\u0197"+
    "\26\0\3\6\1\u0197\24\6\2\0\3\6\3\0\2\6"+
    "\1\u0198\26\0\3\6\1\u0198\24\6\2\0\3\6\3\0"+
    "\3\6\26\0\11\6\1\u0199\16\6\2\0\3\6\3\0"+
    "\3\6\26\0\15\6\1\u019a\12\6\2\0\3\6\3\0"+
    "\3\6\26\0\1\6\1\u019b\26\6\2\0\3\6\3\0"+
    "\3\6\26\0\1\u019c\27\6\2\0\3\6\3\0\3\6"+
    "\26\0\15\6\1\u019d\12\6\2\0\3\6\3\0\3\6"+
    "\26\0\11\6\1\u019e\16\6\2\0\3\6\3\0\3\6"+
    "\26\0\6\6\1\u019f\21\6\2\0\3\6\3\0\3\6"+
    "\26\0\1\u01a0\27\6\2\0\3\6\3\0\2\6\1\u01a1"+
    "\26\0\3\6\1\u01a1\24\6\2\0\3\6\3\0\2\6"+
    "\1\u01a2\26\0\3\6\1\u01a2\24\6\2\0\3\6\3\0"+
    "\2\6\1\u01a3\26\0\3\6\1\u01a3\24\6\2\0\3\6"+
    "\3\0\2\6\1\u01a4\26\0\3\6\1\u01a4\24\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\7\1\1\11\1\1\2\11\2\1\1\11"+
    "\1\1\15\11\23\1\2\11\1\1\2\0\4\1\2\0"+
    "\3\11\64\1\2\0\77\1\2\0\100\1\2\0\64\1"+
    "\1\11\1\0\53\1\1\11\110\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[420];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _FortranLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 115: break;
          case 2: 
            { return FortranTokens.IDENTIFIER;
            }
          case 116: break;
          case 3: 
            { return FortranTokens.LINE_COMMENT;
            }
          case 117: break;
          case 4: 
            { return FortranTokens.WHITE_SPACE;
            }
          case 118: break;
          case 5: 
            { return FortranTokens.INTEGER_LITERAL;
            }
          case 119: break;
          case 6: 
            { return FortranTokens.MINUS;
            }
          case 120: break;
          case 7: 
            { return FortranTokens.DOT;
            }
          case 121: break;
          case 8: 
            { yybegin(STRING); return FortranTokens.OPENING_QUOTE;
            }
          case 122: break;
          case 9: 
            { yybegin(DQ_STRING); return FortranTokens.OPENING_QUOTE;
            }
          case 123: break;
          case 10: 
            { return FortranTokens.EQ;
            }
          case 124: break;
          case 11: 
            { return FortranTokens.COLON;
            }
          case 125: break;
          case 12: 
            { return FortranTokens.PLUS;
            }
          case 126: break;
          case 13: 
            { return FortranTokens.MUL;
            }
          case 127: break;
          case 14: 
            { return FortranTokens.DIV;
            }
          case 128: break;
          case 15: 
            { return FortranTokens.LPAR;
            }
          case 129: break;
          case 16: 
            { return FortranTokens.RPAR;
            }
          case 130: break;
          case 17: 
            { return FortranTokens.LBRACKET;
            }
          case 131: break;
          case 18: 
            { return FortranTokens.RBRACKET;
            }
          case 132: break;
          case 19: 
            { return FortranTokens.COMMA;
            }
          case 133: break;
          case 20: 
            { return FortranTokens.DOLLAR;
            }
          case 134: break;
          case 21: 
            { return FortranTokens.PERC;
            }
          case 135: break;
          case 22: 
            { return FortranTokens.AMP;
            }
          case 136: break;
          case 23: 
            { return FortranTokens.SEMICOLON;
            }
          case 137: break;
          case 24: 
            { return FortranTokens.LT;
            }
          case 138: break;
          case 25: 
            { return FortranTokens.GT;
            }
          case 139: break;
          case 26: 
            { return FortranTokens.QUEST;
            }
          case 140: break;
          case 27: 
            { return FortranTokens.REGULAR_STRING_PART;
            }
          case 141: break;
          case 28: 
            { yybegin(YYINITIAL); return FortranTokens.DANGLING_NEWLINE;
            }
          case 142: break;
          case 29: 
            { yybegin(YYINITIAL); return FortranTokens.CLOSING_QUOTE;
            }
          case 143: break;
          case 30: 
            { return FortranTokens.EQEQ;
            }
          case 144: break;
          case 31: 
            { return FortranTokens.COLONCOLON;
            }
          case 145: break;
          case 32: 
            { return FortranTokens.POWER;
            }
          case 146: break;
          case 33: 
            { return FortranTokens.TO_KEYWORD;
            }
          case 147: break;
          case 34: 
            { return FortranTokens.IF_KEYWORD;
            }
          case 148: break;
          case 35: 
            { return FortranTokens.IN_KEYWORD;
            }
          case 149: break;
          case 36: 
            { return FortranTokens.GO_KEYWORD;
            }
          case 150: break;
          case 37: 
            { return FortranTokens.DO_KEYWORD;
            }
          case 151: break;
          case 38: 
            { return FortranTokens.FLOATING_POINT_LITERAL;
            }
          case 152: break;
          case 39: 
            { return FortranTokens.END_KEYWORD;
            }
          case 153: break;
          case 40: 
            { return FortranTokens.USE_KEYWORD;
            }
          case 154: break;
          case 41: 
            { return FortranTokens.LEN_KEYWORD;
            }
          case 155: break;
          case 42: 
            { return FortranTokens.OUT_KEYWORD;
            }
          case 156: break;
          case 43: 
            { return FortranTokens.ELSE_KEYWORD;
            }
          case 157: break;
          case 44: 
            { return FortranTokens.EXIT_KEYWORD;
            }
          case 158: break;
          case 45: 
            { return FortranTokens.THEN_KEYWORD;
            }
          case 159: break;
          case 46: 
            { return FortranTokens.TYPE_KEYWORD;
            }
          case 160: break;
          case 47: 
            { return FortranTokens.REAL_KEYWORD;
            }
          case 161: break;
          case 48: 
            { return FortranTokens.READ_KEYWORD;
            }
          case 162: break;
          case 49: 
            { return FortranTokens.STOP_KEYWORD;
            }
          case 163: break;
          case 50: 
            { return FortranTokens.SAVE_KEYWORD;
            }
          case 164: break;
          case 51: 
            { return FortranTokens.ONLY_KEYWORD;
            }
          case 165: break;
          case 52: 
            { return FortranTokens.OPEN_KEYWORD;
            }
          case 166: break;
          case 53: 
            { return FortranTokens.CALL_KEYWORD;
            }
          case 167: break;
          case 54: 
            { return FortranTokens.CASE_KEYWORD;
            }
          case 168: break;
          case 55: 
            { return FortranTokens.NONE_KEYWORD;
            }
          case 169: break;
          case 56: 
            { return FortranTokens.KIND_KEYWORD;
            }
          case 170: break;
          case 57: 
            { return FortranTokens.DATA_KEYWORD;
            }
          case 171: break;
          case 58: 
            { return FortranTokens.ENTRY_KEYWORD;
            }
          case 172: break;
          case 59: 
            { return FortranTokens.CLOSE_KEYWORD;
            }
          case 173: break;
          case 60: 
            { return FortranTokens.CYCLE_KEYWORD;
            }
          case 174: break;
          case 61: 
            { return FortranTokens.BLOCK_KEYWORD;
            }
          case 175: break;
          case 62: 
            { return FortranTokens.INOUT_KEYWORD;
            }
          case 176: break;
          case 63: 
            { return FortranTokens.PRINT_KEYWORD;
            }
          case 177: break;
          case 64: 
            { return FortranTokens.PAUSE_KEYWORD;
            }
          case 178: break;
          case 65: 
            { return FortranTokens.WRITE_KEYWORD;
            }
          case 179: break;
          case 66: 
            { return FortranTokens.WHERE_KEYWORD;
            }
          case 180: break;
          case 67: 
            { return FortranTokens.WHILE_KEYWORD;
            }
          case 181: break;
          case 68: 
            { return FortranTokens.TRUE_KEYWORD;
            }
          case 182: break;
          case 69: 
            { return FortranTokens.TARGET_KEYWORD;
            }
          case 183: break;
          case 70: 
            { return FortranTokens.RETURN_KEYWORD;
            }
          case 184: break;
          case 71: 
            { return FortranTokens.RESULT_KEYWORD;
            }
          case 185: break;
          case 72: 
            { return FortranTokens.REWIND_KEYWORD;
            }
          case 186: break;
          case 73: 
            { return FortranTokens.FORMAT_KEYWORD;
            }
          case 187: break;
          case 74: 
            { return FortranTokens.ASSIGN_KEYWORD;
            }
          case 188: break;
          case 75: 
            { return FortranTokens.SELECT_KEYWORD;
            }
          case 189: break;
          case 76: 
            { return FortranTokens.COMMON_KEYWORD;
            }
          case 190: break;
          case 77: 
            { return FortranTokens.INTENT_KEYWORD;
            }
          case 191: break;
          case 78: 
            { return FortranTokens.MODULE_KEYWORD;
            }
          case 192: break;
          case 79: 
            { return FortranTokens.PUBLIC_KEYWORD;
            }
          case 193: break;
          case 80: 
            { return FortranTokens.DOUBLE_KEYWORD;
            }
          case 194: break;
          case 81: 
            { return FortranTokens.ENDFILE_KEYWORD;
            }
          case 195: break;
          case 82: 
            { return FortranTokens.FALSE_KEYWORD;
            }
          case 196: break;
          case 83: 
            { return FortranTokens.LOGICAL_KEYWORD;
            }
          case 197: break;
          case 84: 
            { return FortranTokens.COMPLEX_KEYWORD;
            }
          case 198: break;
          case 85: 
            { return FortranTokens.INTEGER_KEYWORD;
            }
          case 199: break;
          case 86: 
            { return FortranTokens.INQUIRE_KEYWORD;
            }
          case 200: break;
          case 87: 
            { return FortranTokens.NULLIFY_KEYWORD;
            }
          case 201: break;
          case 88: 
            { return FortranTokens.PROGRAM_KEYWORD;
            }
          case 202: break;
          case 89: 
            { return FortranTokens.PRIVATE_KEYWORD;
            }
          case 203: break;
          case 90: 
            { return FortranTokens.POINTER_KEYWORD;
            }
          case 204: break;
          case 91: 
            { return FortranTokens.DEFAULT_KEYWORD;
            }
          case 205: break;
          case 92: 
            { return FortranTokens.EXTERNAL_KEYWORD;
            }
          case 206: break;
          case 93: 
            { return FortranTokens.FUNCTION_KEYWORD;
            }
          case 207: break;
          case 94: 
            { return FortranTokens.ALLOCATE_KEYWORD;
            }
          case 208: break;
          case 95: 
            { return FortranTokens.OPERATOR_KEYWORD;
            }
          case 209: break;
          case 96: 
            { return FortranTokens.OPTIONAL_KEYWORD;
            }
          case 210: break;
          case 97: 
            { return FortranTokens.CONTAINS_KEYWORD;
            }
          case 211: break;
          case 98: 
            { return FortranTokens.CONTINUE_KEYWORD;
            }
          case 212: break;
          case 99: 
            { return FortranTokens.IMPLICIT_KEYWORD;
            }
          case 213: break;
          case 100: 
            { return FortranTokens.NAMELIST_KEYWORD;
            }
          case 214: break;
          case 101: 
            { return FortranTokens.ELSEWHERE_KEYWORD;
            }
          case 215: break;
          case 102: 
            { return FortranTokens.RECURSIVE_KEYWORD;
            }
          case 216: break;
          case 103: 
            { return FortranTokens.CHARACTER_KEYWORD;
            }
          case 217: break;
          case 104: 
            { return FortranTokens.BACKSPACE_KEYWORD;
            }
          case 218: break;
          case 105: 
            { return FortranTokens.INTERFACE_KEYWORD;
            }
          case 219: break;
          case 106: 
            { return FortranTokens.INTRINSIC_KEYWORD;
            }
          case 220: break;
          case 107: 
            { return FortranTokens.PRECISION_KEYWORD;
            }
          case 221: break;
          case 108: 
            { return FortranTokens.PARAMETER_KEYWORD;
            }
          case 222: break;
          case 109: 
            { return FortranTokens.DIMENSION_KEYWORD;
            }
          case 223: break;
          case 110: 
            { return FortranTokens.ASSIGNMENT_KEYWORD;
            }
          case 224: break;
          case 111: 
            { return FortranTokens.SUBROUTINE_KEYWORD;
            }
          case 225: break;
          case 112: 
            { return FortranTokens.DEALLOCATE_KEYWORD;
            }
          case 226: break;
          case 113: 
            { return FortranTokens.EQUIVALENCE_KEYWORD;
            }
          case 227: break;
          case 114: 
            { return FortranTokens.ALLOCATABLE_KEYWORD;
            }
          case 228: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
