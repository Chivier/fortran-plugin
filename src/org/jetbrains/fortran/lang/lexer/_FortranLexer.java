/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.jetbrains.fortran.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>C:/development/fortran-plugin/src/org/jetbrains/fortran/lang/lexer/Fortran.flex</tt>
 */
class _FortranLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\3"+
    "\13\1\15\3\13\1\16\24\13\1\17\1\20\1\21\10\1\1\22\1\23\1\13\1\24\4\13\1\25"+
    "\10\13\1\26\12\13\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13"+
    "\1\32\1\1\1\34\1\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1"+
    "\43\2\13\1\32\1\44\1\13\1\45\1\46\1\1\1\13\1\47\4\1\1\13\1\50\4\1\1\51\2\13"+
    "\1\52\1\1\1\53\1\17\1\27\1\54\1\55\1\56\1\57\1\60\1\61\1\17\1\20\1\62\1\55"+
    "\1\56\1\63\1\1\1\64\1\65\1\66\1\67\1\24\1\56\1\70\1\1\1\71\1\17\1\72\1\73"+
    "\1\55\1\56\1\70\1\1\1\61\1\17\1\43\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1"+
    "\100\1\40\1\56\1\52\1\1\1\101\1\17\1\1\1\100\1\40\1\56\1\102\1\1\1\60\1\17"+
    "\1\103\1\100\1\40\1\13\1\104\1\60\1\105\1\17\1\106\1\107\1\110\1\13\1\111"+
    "\1\112\1\1\1\65\1\1\1\27\2\13\1\113\1\112\1\77\2\1\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\2\1\1\71\1\1\1\77\1\1\1\122\1\13\1\123\1\1\1\124\7\1\2\13\1\32"+
    "\1\105\1\77\1\125\1\126\1\127\1\130\1\77\2\13\1\131\2\13\1\132\24\13\1\133"+
    "\1\134\2\13\1\133\2\13\1\135\1\136\1\14\3\13\1\136\3\13\1\32\2\1\1\13\1\1"+
    "\5\13\1\137\1\27\45\13\1\37\1\13\1\27\1\32\4\13\1\32\1\140\1\141\1\20\1\13"+
    "\1\20\1\13\1\20\1\141\1\71\3\13\1\142\1\1\1\143\1\77\2\1\1\77\5\13\1\31\2"+
    "\13\1\144\4\13\1\42\1\13\1\145\2\1\1\65\1\13\1\146\1\50\2\13\1\147\1\13\2"+
    "\77\2\1\1\13\1\112\3\13\1\50\2\1\2\77\1\150\5\1\1\107\2\13\1\142\1\151\1\77"+
    "\2\1\1\152\1\13\1\153\3\13\1\42\1\1\2\13\1\142\1\1\1\154\2\13\1\146\6\1\1"+
    "\155\1\156\14\13\4\1\21\13\1\137\2\13\1\137\1\157\1\13\1\146\3\13\1\160\1"+
    "\161\1\162\1\123\1\161\2\1\1\163\4\1\1\164\1\1\1\123\6\1\1\165\1\166\1\167"+
    "\1\121\1\170\3\1\1\171\147\1\2\13\1\145\2\13\1\145\10\13\1\172\1\173\2\13"+
    "\1\131\3\13\1\174\1\1\1\13\1\112\4\175\4\1\1\105\35\1\1\176\2\1\1\177\1\27"+
    "\4\13\1\200\1\27\4\13\1\132\1\107\1\13\1\146\1\27\4\13\1\145\1\1\1\13\1\32"+
    "\3\1\1\13\40\1\133\13\1\42\4\1\135\13\1\42\2\1\10\13\1\123\4\1\2\13\1\146"+
    "\20\13\1\123\1\13\1\147\1\1\2\13\1\145\1\105\1\13\1\146\4\13\1\42\2\1\1\201"+
    "\1\202\5\13\1\203\1\13\1\146\1\31\3\1\1\201\1\204\1\13\1\33\1\1\3\13\1\142"+
    "\1\202\2\13\1\142\1\1\1\77\1\1\1\205\2\13\1\42\1\13\1\112\1\1\1\13\1\123\1"+
    "\51\2\13\1\33\1\105\1\77\1\206\1\145\2\13\1\47\1\1\1\207\1\77\1\13\1\210\3"+
    "\13\1\211\1\212\1\213\1\32\1\66\1\214\1\215\1\175\2\13\1\132\1\42\7\13\1\33"+
    "\1\77\72\13\1\142\1\13\1\216\2\13\1\147\20\1\26\13\1\146\6\13\1\77\2\1\1\112"+
    "\1\217\1\56\1\220\1\221\6\13\1\20\1\1\1\152\25\13\1\146\1\1\4\13\1\202\2\13"+
    "\1\31\2\1\1\147\7\1\1\206\7\13\1\123\1\1\1\77\1\27\1\32\1\27\1\32\1\65\4\13"+
    "\1\145\1\222\1\223\2\1\1\224\1\13\1\14\1\225\2\146\2\1\7\13\1\32\30\1\1\13"+
    "\1\123\3\13\1\71\2\1\2\13\1\1\1\13\1\226\2\13\1\42\1\13\1\146\2\13\1\227\3"+
    "\1\11\13\1\146\1\77\5\1\2\13\1\31\3\13\1\142\11\1\23\13\1\112\1\13\1\42\1"+
    "\31\11\1\1\230\2\13\1\231\1\13\1\42\1\13\1\112\1\13\1\145\4\1\1\13\1\232\1"+
    "\13\1\42\1\13\1\77\4\1\3\13\1\233\4\1\1\71\1\234\1\13\1\142\2\1\1\13\1\123"+
    "\1\13\1\123\2\1\1\122\1\13\1\50\1\1\3\13\1\42\1\13\1\42\1\13\1\33\1\13\1\20"+
    "\6\1\4\13\1\47\3\1\3\13\1\33\3\13\1\33\60\1\1\152\2\13\1\31\2\1\1\65\1\1\1"+
    "\152\2\13\2\1\1\13\1\47\1\77\1\152\1\13\1\112\1\65\1\1\2\13\1\235\1\152\2"+
    "\13\1\33\1\236\1\237\2\1\1\13\1\24\1\147\5\1\1\240\1\241\1\47\2\13\1\145\1"+
    "\1\1\77\1\73\1\55\1\56\1\70\1\1\1\242\1\20\21\1\3\13\1\1\1\243\1\77\12\1\2"+
    "\13\1\145\2\1\1\244\2\1\3\13\1\1\1\245\1\77\2\1\2\13\1\32\1\1\1\77\3\1\1\13"+
    "\1\77\1\1\1\77\26\1\4\13\1\77\1\105\34\1\3\13\1\47\20\1\71\13\1\77\16\1\14"+
    "\13\1\142\53\1\2\13\1\145\75\1\44\13\1\112\33\1\43\13\1\47\1\13\1\145\1\77"+
    "\6\1\1\13\1\146\1\1\3\13\1\1\1\142\1\77\1\152\1\246\1\13\67\1\4\13\1\50\1"+
    "\71\3\1\1\152\6\1\1\20\77\1\6\13\1\32\1\123\1\47\1\77\66\1\5\13\1\206\3\13"+
    "\1\141\1\247\1\250\1\251\3\13\1\252\1\253\1\13\1\254\1\255\1\40\24\13\1\256"+
    "\1\13\1\40\1\132\1\13\1\132\1\13\1\206\1\13\1\206\1\145\1\13\1\145\1\13\1"+
    "\56\1\13\1\56\1\13\1\257\17\13\1\50\123\1\1\251\1\13\1\260\1\261\1\262\1\263"+
    "\1\264\1\265\1\266\1\147\1\267\1\147\24\1\55\13\1\112\2\1\103\13\1\50\15\13"+
    "\1\146\150\13\1\20\25\1\41\13\1\146\36\1");

  /* The ZZ_CMAP_A table has 2944 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\6\1\5\1\65\1\6\1\65\22\0\1\6\1\4\1\23\1\0\1\21\1\24\1\25\1\22\1\13"+
    "\1\14\1\11\1\7\1\17\1\10\1\20\1\12\12\1\1\2\1\26\1\27\1\0\1\30\1\31\1\0\1"+
    "\32\1\41\1\36\1\60\1\42\1\61\1\46\1\52\1\45\1\1\1\51\1\33\1\50\1\47\1\35\1"+
    "\54\1\63\1\53\1\44\1\37\1\56\1\64\1\62\1\55\1\57\1\1\1\15\1\0\1\16\1\0\1\1"+
    "\1\0\1\32\1\41\1\36\1\60\1\43\1\61\1\46\1\52\1\45\1\1\1\51\1\34\1\50\1\47"+
    "\1\35\1\54\1\63\1\3\1\44\1\40\1\56\1\64\1\62\1\55\1\57\1\1\12\0\1\65\24\0"+
    "\1\1\12\0\1\1\4\0\1\1\5\0\27\1\1\0\10\1\2\45\35\1\1\44\2\1\4\0\14\1\16\0\5"+
    "\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\4\1\1\0\23\1\1\0\13\1\10\0\6\1\1\0\26\1\2\0\1\1\6\0\10\1\10\0\13\1\5"+
    "\0\3\1\15\0\12\1\4\0\6\1\1\0\1\1\17\0\2\1\7\0\17\1\2\0\2\1\1\0\16\1\15\0\11"+
    "\1\13\0\1\1\22\0\2\1\4\0\1\1\5\0\6\1\4\0\1\1\11\0\1\1\3\0\1\1\7\0\11\1\7\0"+
    "\5\1\17\0\26\1\3\0\1\1\2\0\1\1\7\0\11\1\4\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1"+
    "\1\0\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0\1\1\5\0\6\1\4\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\17\0\4\1\1\0\1\1\7\0\12\1\2\0\3\1\20\0\11\1\1\0\2\1\1\0\2"+
    "\1\1\0\5\1\3\0\1\1\2\0\1\1\30\0\1\1\13\0\10\1\2\0\1\1\3\0\1\1\1\0\6\1\3\0"+
    "\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\13\0\10\1\1"+
    "\0\2\1\10\0\3\1\5\0\4\1\1\0\5\1\3\0\1\1\3\0\2\1\15\0\13\1\2\0\1\1\21\0\1\1"+
    "\12\0\6\1\5\0\22\1\3\0\10\1\1\0\11\1\1\0\1\1\2\0\7\1\11\0\1\1\1\0\2\1\15\0"+
    "\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1"+
    "\1\2\0\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\11\0\12\1\2\0\14\1\1\0"+
    "\24\1\13\0\5\1\3\0\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1\4\0\15\1\14\0\1\1\1"+
    "\0\6\1\1\0\1\1\5\0\1\1\2\0\13\1\1\0\15\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2"+
    "\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\16\1\2\0\6\1\3\0\10\1\7\0\15\1"+
    "\1\0\6\1\23\0\1\1\4\0\1\1\3\0\11\1\1\0\1\1\5\0\17\1\1\0\16\1\2\0\14\1\13\0"+
    "\1\1\15\0\7\1\7\0\16\1\15\0\14\1\3\0\3\1\11\0\4\1\1\0\4\1\3\0\2\1\11\0\10"+
    "\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1"+
    "\2\0\6\1\14\0\2\65\7\0\1\1\15\0\1\1\2\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5"+
    "\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0\1\51\3\1\1\0\1\1\5\0\5\1\4\0\1\1\4\0\2\1\13"+
    "\0\5\1\6\0\4\1\3\0\2\1\14\0\10\1\7\0\10\1\1\0\7\1\6\0\2\1\12\0\5\1\5\0\2\1"+
    "\3\0\7\1\6\0\3\1\7\0\11\1\2\0\27\1\2\0\7\1\1\0\3\1\1\0\4\1\1\0\4\1\2\0\6\1"+
    "\3\0\1\1\1\0\1\1\2\0\5\1\1\0\15\1\1\0\10\1\4\0\7\1\3\0\1\1\3\0\2\1\1\0\1\1"+
    "\3\0\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\3\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1"+
    "\4\0\5\1\3\0\5\1\5\0\1\1\1\0\10\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\12\1"+
    "\2\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0\14\1\1\0\16\1\1\0\2\1\1\0\2\1\1\0\10"+
    "\1\6\0\4\1\4\0\16\1\2\0\1\1\1\0\14\1\1\0\2\1\3\0\1\1\2\0\4\1\1\0\2\1\12\0"+
    "\10\1\6\0\6\1\1\0\3\1\1\0\12\1\3\0\1\1\12\0\4\1\13\0\13\1\1\0\1\1\3\0\7\1"+
    "\1\0\1\1\1\0\4\1\1\0\17\1\1\0\2\1\14\0\3\1\4\0\2\1\1\0\1\1\20\0\4\1\10\0\1"+
    "\1\13\0\10\1\5\0\3\1\2\0\1\1\2\0\2\1\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0"+
    "\21\1\1\0\4\1\2\0\10\1\1\0\7\1\1\0\14\1\1\0\4\1\1\0\5\1\1\0\1\1\3\0\14\1\2"+
    "\0\13\1\1\0\10\1\2\0\2\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0\1\1"+
    "\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1"+
    "\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0\7\1\1\0\4\1\1\0"+
    "\4\1\1\0\1\1\1\0\12\1\1\0\5\1\1\0\3\1\1\0\5\1\1\0\5\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\1\1\3\3\1\1\3\2\1\1\3\14\1"+
    "\2\3\4\0\2\3\11\0\1\31\2\0\1\3\1\31"+
    "\2\3\6\0\4\3\4\0\1\32\1\0\1\33\1\34"+
    "\13\0\1\35\5\0\5\3\3\0\1\36\1\3\1\36"+
    "\3\0\1\37\12\0\3\3\4\0\1\40\3\0\2\3"+
    "\1\40\3\3\30\0\1\41\11\0\1\42\1\43\4\3"+
    "\3\0\1\3\1\44\2\0\1\45\1\46\1\47\7\0"+
    "\1\50\1\51\1\3\1\50\1\51\2\0\1\52\3\0"+
    "\1\53\1\0\1\52\3\3\1\53\1\3\1\54\1\55"+
    "\12\0\1\56\1\42\1\43\14\0\1\57\10\0\4\3"+
    "\3\0\1\3\2\0\1\60\5\0\1\61\1\0\1\3"+
    "\1\0\1\62\1\0\1\63\3\0\1\3\1\63\3\3"+
    "\2\0\1\64\17\0\1\65\2\0\1\66\7\0\1\67"+
    "\1\70\1\71\1\3\1\72\1\73\1\74\1\0\1\75"+
    "\1\0\1\3\4\0\1\76\2\0\2\77\5\0\4\3"+
    "\1\100\4\0\1\101\4\0\1\102\1\0\1\72\1\73"+
    "\1\74\5\0\1\103\1\104\2\0\1\105\1\0\1\3"+
    "\2\0\2\106\4\0\1\107\3\0\1\110\2\0\1\3"+
    "\1\110\2\3\3\0\1\111\1\112\2\0\1\113\1\0"+
    "\1\114\1\0\1\115\1\0\1\116\1\0\1\117\1\0"+
    "\1\3\1\0\1\120\1\0\1\121\1\122\1\123\1\124"+
    "\3\0\1\125\1\0\1\3\1\125\1\3\3\0\1\126"+
    "\1\127\4\0\1\130\1\131\2\0\1\132\1\133\1\134"+
    "\1\0\1\134\1\3\1\0\1\135\1\136\1\131\1\137"+
    "\1\140\2\0\1\141\1\0\1\3\1\142\1\143\1\144"+
    "\2\145";

  private static int [] zzUnpackAction() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\154"+
    "\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762"+
    "\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\66\0\u0948\0\u097e\0\u09b4\0\154\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\66"+
    "\0\66\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\66\0\u12fc\0\154\0\u1332\0\u1368\0\u139e"+
    "\0\66\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518"+
    "\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28"+
    "\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\66\0\u1e96\0\u1ecc\0\u1f02"+
    "\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\154\0\154"+
    "\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6"+
    "\0\66\0\u222c\0\u2262\0\66\0\66\0\66\0\u2298\0\u22ce"+
    "\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\66\0\66\0\u2412"+
    "\0\154\0\154\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556"+
    "\0\66\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\154\0\u269a"+
    "\0\66\0\66\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de"+
    "\0\u2814\0\u284a\0\u2880\0\u28b6\0\66\0\66\0\66\0\u28ec"+
    "\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c"+
    "\0\u2ad2\0\u2b08\0\u2b3e\0\66\0\u2b74\0\u2baa\0\u2be0\0\u2c16"+
    "\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6"+
    "\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\66\0\u2f40"+
    "\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\66\0\u304e\0\u3084\0\u30ba"+
    "\0\66\0\u30f0\0\66\0\u3126\0\u315c\0\u3192\0\u31c8\0\154"+
    "\0\u31fe\0\u3234\0\u326a\0\u32a0\0\u32d6\0\66\0\u330c\0\u3342"+
    "\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2"+
    "\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600\0\66\0\u3636\0\u366c"+
    "\0\66\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6"+
    "\0\66\0\66\0\66\0\u381c\0\154\0\154\0\154\0\u3852"+
    "\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996\0\u39cc\0\66"+
    "\0\u3a02\0\u3a38\0\66\0\154\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10"+
    "\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\66\0\u3c54\0\u3c8a"+
    "\0\u3cc0\0\u3cf6\0\66\0\u3d2c\0\u3d62\0\u3d98\0\u3dce\0\66"+
    "\0\u3e04\0\66\0\66\0\66\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc"+
    "\0\u3f12\0\66\0\66\0\u3f48\0\u3f7e\0\66\0\u3fb4\0\u3fea"+
    "\0\u4020\0\u4056\0\66\0\154\0\u408c\0\u40c2\0\u40f8\0\u412e"+
    "\0\66\0\u4164\0\u419a\0\u41d0\0\66\0\u4206\0\u423c\0\u4272"+
    "\0\154\0\u42a8\0\u42de\0\u4314\0\u434a\0\u4380\0\66\0\66"+
    "\0\u43b6\0\u43ec\0\66\0\u4422\0\66\0\u4458\0\66\0\u448e"+
    "\0\66\0\u44c4\0\66\0\u44fa\0\u4530\0\u4566\0\66\0\u459c"+
    "\0\66\0\66\0\66\0\66\0\u45d2\0\u4608\0\u463e\0\66"+
    "\0\u4674\0\u46aa\0\154\0\u46e0\0\u4716\0\u474c\0\u4782\0\66"+
    "\0\66\0\u47b8\0\u47ee\0\u4824\0\u485a\0\66\0\154\0\u4890"+
    "\0\u48c6\0\66\0\66\0\66\0\u48fc\0\154\0\u4932\0\u4968"+
    "\0\66\0\66\0\66\0\66\0\66\0\u499e\0\u49d4\0\66"+
    "\0\u4a0a\0\u4a40\0\66\0\66\0\66\0\66\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\2\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\2\1\52\1\53\1\2\1\54\1\2\1\55\1\56"+
    "\1\57\2\2\70\0\1\60\1\0\1\60\26\0\33\60"+
    "\2\0\1\60\1\0\1\60\26\0\10\60\2\61\21\60"+
    "\1\0\5\5\1\0\60\5\5\0\2\6\112\0\2\62"+
    "\7\0\1\63\56\0\1\64\4\0\2\65\23\0\1\60"+
    "\1\0\1\60\26\0\3\60\1\66\4\60\2\67\21\60"+
    "\50\0\1\70\4\0\1\71\1\0\1\72\41\0\1\73"+
    "\2\74\1\75\14\0\1\76\4\0\1\77\40\0\1\100"+
    "\2\0\1\101\14\0\1\102\4\0\1\103\7\0\1\60"+
    "\1\0\1\60\26\0\1\104\2\60\1\105\14\60\1\106"+
    "\4\60\1\107\5\60\33\0\1\110\2\111\64\0\2\112"+
    "\12\0\1\113\5\0\1\114\5\0\1\115\3\0\1\60"+
    "\1\0\1\60\26\0\1\60\2\116\12\60\1\117\5\60"+
    "\1\120\5\60\1\121\1\60\33\0\1\122\4\0\2\123"+
    "\1\0\2\124\12\0\1\125\56\0\1\126\1\127\10\0"+
    "\1\130\41\0\1\131\62\0\1\132\23\0\1\133\44\0"+
    "\1\134\75\0\1\135\62\0\2\136\25\0\1\137\26\0"+
    "\1\140\2\0\1\141\15\0\1\137\2\0\1\142\53\0"+
    "\1\143\53\0\1\144\2\0\1\145\4\0\2\146\57\0"+
    "\1\147\20\0\1\150\12\0\1\151\46\0\1\152\1\151"+
    "\13\0\1\60\1\0\1\60\26\0\1\153\3\60\1\154"+
    "\2\155\3\60\1\156\15\60\1\157\2\60\34\0\2\160"+
    "\75\0\1\161\67\0\1\162\66\0\1\163\17\0\1\60"+
    "\1\0\1\60\26\0\14\60\1\164\16\60\2\0\1\60"+
    "\1\0\1\60\26\0\15\60\1\165\15\60\34\0\2\166"+
    "\70\0\2\167\1\0\2\170\61\0\2\171\60\0\2\172"+
    "\7\0\1\173\56\0\1\174\77\0\1\175\1\176\47\0"+
    "\1\177\71\0\1\200\32\0\1\201\47\0\1\201\54\0"+
    "\2\202\76\0\1\203\12\0\1\60\1\0\1\204\26\0"+
    "\21\60\1\204\11\60\2\0\1\60\1\0\1\60\26\0"+
    "\10\60\2\205\21\60\2\0\1\60\1\0\1\60\26\0"+
    "\22\60\1\206\10\60\37\0\1\207\64\0\1\210\74\0"+
    "\1\211\60\0\2\212\17\0\1\213\44\0\2\214\4\0"+
    "\1\215\76\0\1\216\10\0\1\60\1\0\1\60\26\0"+
    "\12\60\1\217\20\60\2\0\1\60\1\0\1\60\26\0"+
    "\5\60\2\220\17\60\1\221\4\60\2\0\1\60\1\0"+
    "\1\60\26\0\5\60\2\222\4\60\1\223\17\60\2\0"+
    "\1\60\1\0\1\60\26\0\24\60\1\224\6\60\65\0"+
    "\1\225\36\0\1\226\63\0\2\227\72\0\1\230\61\0"+
    "\1\231\1\0\2\232\22\0\1\233\56\0\1\234\61\0"+
    "\1\235\50\0\2\236\111\0\1\237\54\0\1\240\50\0"+
    "\1\241\3\0\1\242\2\243\3\0\1\244\15\0\1\245"+
    "\40\0\1\246\4\0\2\247\1\0\1\250\23\0\1\251"+
    "\47\0\1\251\2\0\1\252\54\0\1\253\61\0\1\254"+
    "\66\0\2\255\61\0\2\256\103\0\1\257\41\0\1\260"+
    "\26\0\1\261\7\0\1\262\47\0\1\262\61\0\1\263"+
    "\63\0\1\264\62\0\2\265\1\0\1\266\21\0\1\60"+
    "\1\0\1\60\26\0\1\60\2\267\23\60\1\270\4\60"+
    "\2\0\1\60\1\0\1\60\26\0\24\60\1\271\6\60"+
    "\2\0\1\60\1\0\1\60\26\0\24\60\1\272\6\60"+
    "\2\0\1\60\1\0\1\60\26\0\24\60\1\273\6\60"+
    "\2\0\1\60\1\0\1\60\26\0\13\60\1\274\17\60"+
    "\36\0\1\275\75\0\1\276\65\0\1\277\21\0\1\60"+
    "\1\0\1\60\26\0\13\60\1\300\17\60\60\0\1\301"+
    "\53\0\1\302\23\0\1\303\43\0\1\304\3\0\1\303"+
    "\45\0\2\305\73\0\2\306\66\0\1\307\60\0\2\310"+
    "\75\0\1\311\3\0\1\312\14\0\1\313\47\0\1\313"+
    "\45\0\2\314\77\0\1\315\66\0\1\316\60\0\2\317"+
    "\23\0\1\60\1\0\1\60\26\0\14\60\1\320\16\60"+
    "\2\0\1\60\1\0\1\60\26\0\15\60\1\321\15\60"+
    "\2\0\1\60\1\0\1\60\26\0\10\60\2\322\21\60"+
    "\52\0\1\323\52\0\1\324\71\0\2\325\25\0\1\326"+
    "\47\0\1\326\73\0\1\327\46\0\2\330\61\0\2\331"+
    "\72\0\1\332\21\0\1\60\1\0\1\60\26\0\10\60"+
    "\2\333\21\60\2\0\1\60\1\0\1\334\26\0\21\60"+
    "\1\334\11\60\2\0\1\60\1\0\1\60\26\0\27\60"+
    "\1\335\3\60\2\0\1\60\1\0\1\60\26\0\10\60"+
    "\2\336\21\60\2\0\1\60\1\0\1\60\26\0\5\60"+
    "\2\337\24\60\2\0\1\60\1\0\1\60\26\0\13\60"+
    "\1\340\17\60\43\0\2\341\76\0\1\342\53\0\2\343"+
    "\25\0\1\344\47\0\1\344\70\0\1\345\12\0\1\346"+
    "\36\0\2\347\7\0\1\346\70\0\1\350\42\0\2\351"+
    "\73\0\2\352\55\0\2\353\107\0\1\354\67\0\1\355"+
    "\40\0\2\356\23\0\1\357\63\0\1\360\65\0\1\361"+
    "\65\0\1\362\54\0\1\363\66\0\1\364\55\0\1\365"+
    "\76\0\1\366\14\0\1\367\33\0\1\370\77\0\1\371"+
    "\70\0\1\372\51\0\2\373\63\0\1\374\74\0\1\375"+
    "\57\0\2\376\63\0\1\377\103\0\1\u0100\53\0\1\u0101"+
    "\66\0\2\u0102\30\0\1\u0103\47\0\1\u0103\45\0\2\u0104"+
    "\32\0\1\60\1\0\1\u0105\26\0\21\60\1\u0105\11\60"+
    "\2\0\1\60\1\0\1\u0106\26\0\21\60\1\u0106\11\60"+
    "\2\0\1\60\1\0\1\60\26\0\1\60\2\u0107\30\60"+
    "\2\0\1\60\1\0\1\60\26\0\15\60\1\u0108\15\60"+
    "\37\0\1\u0109\75\0\1\u010a\55\0\1\u010b\30\0\1\60"+
    "\1\0\1\60\26\0\4\60\1\u010c\26\60\36\0\1\u010d"+
    "\62\0\1\u010e\75\0\2\u010f\54\0\1\u0110\12\0\1\u0111"+
    "\55\0\1\u0112\63\0\2\u0113\63\0\1\u0114\75\0\2\u0115"+
    "\64\0\2\u0116\23\0\1\60\1\0\1\60\26\0\10\60"+
    "\2\u0117\21\60\45\0\1\u0118\72\0\1\u0119\76\0\1\u011a"+
    "\62\0\1\u011b\53\0\1\u011c\23\0\1\u011d\47\0\1\u011d"+
    "\76\0\1\u011e\2\0\1\60\1\0\1\60\26\0\30\60"+
    "\1\u011f\2\60\2\0\1\60\1\0\1\60\26\0\25\60"+
    "\1\u0120\5\60\2\0\1\60\1\0\1\60\26\0\13\60"+
    "\1\u0121\17\60\2\0\1\60\1\0\1\u0122\26\0\21\60"+
    "\1\u0122\11\60\2\0\1\60\1\0\1\60\26\0\32\60"+
    "\1\u0123\37\0\1\u0124\64\0\1\u0125\67\0\2\u0126\72\0"+
    "\1\u0127\23\0\1\u0128\42\0\1\u0129\1\u012a\3\0\1\u0128"+
    "\57\0\1\u012b\65\0\1\u012c\53\0\2\u012d\76\0\1\u012e"+
    "\53\0\2\u012f\34\0\1\u0130\47\0\1\u0130\15\0\1\u0131"+
    "\47\0\1\u0131\45\0\2\u0132\100\0\1\u0133\21\0\1\u0134"+
    "\47\0\1\u0134\57\0\1\u0135\57\0\2\u0136\57\0\1\u0137"+
    "\103\0\1\u0138\57\0\2\u0139\61\0\2\u013a\72\0\1\u013b"+
    "\53\0\2\u013c\64\0\2\u013d\107\0\1\u013e\41\0\1\u013f"+
    "\72\0\2\u0140\67\0\2\u0141\64\0\2\u0142\64\0\2\u0143"+
    "\23\0\1\60\1\0\1\60\26\0\12\60\1\u0144\20\60"+
    "\2\0\1\60\1\0\1\60\26\0\15\60\1\u0145\15\60"+
    "\2\0\1\60\1\0\1\60\26\0\5\60\2\u0146\24\60"+
    "\2\0\1\60\1\0\1\60\26\0\26\60\1\u0147\4\60"+
    "\33\0\1\u0148\102\0\1\u0149\50\0\1\u014a\34\0\1\60"+
    "\1\0\1\60\26\0\1\u014b\32\60\50\0\1\u014c\55\0"+
    "\2\u014d\72\0\1\u014e\67\0\1\u014f\65\0\1\u0150\60\0"+
    "\2\u0151\60\0\1\u0152\66\0\2\u0153\26\0\1\60\1\0"+
    "\1\60\26\0\5\60\2\u0154\24\60\55\0\1\u0155\63\0"+
    "\1\u0156\46\0\2\u0157\100\0\1\u0158\50\0\1\u0159\34\0"+
    "\1\60\1\0\1\60\26\0\20\60\1\u015a\12\60\2\0"+
    "\1\60\1\0\1\60\26\0\1\60\2\u015b\30\60\2\0"+
    "\1\60\1\0\1\60\26\0\15\60\1\u015c\15\60\2\0"+
    "\1\60\1\0\1\60\26\0\1\u015d\32\60\40\0\2\u015e"+
    "\103\0\1\u015f\56\0\1\u0160\77\0\1\u0161\46\0\2\u0162"+
    "\61\0\2\u0163\30\0\1\u0164\47\0\1\u0164\50\0\1\u0165"+
    "\74\0\1\u0166\101\0\1\u0167\46\0\2\u0168\66\0\1\u0169"+
    "\70\0\1\u016a\55\0\2\u016b\105\0\1\u016c\37\0\1\u016d"+
    "\77\0\1\u016e\60\0\2\u016f\67\0\2\u0170\64\0\2\u0171"+
    "\60\0\1\u0172\71\0\2\u0173\57\0\1\u0174\63\0\2\u0175"+
    "\70\0\2\u0176\72\0\1\u0177\21\0\1\60\1\0\1\60"+
    "\26\0\13\60\1\u0178\17\60\40\0\2\u0179\75\0\1\u017a"+
    "\50\0\2\u017b\32\0\1\60\1\0\1\60\26\0\1\60"+
    "\2\u017c\30\60\33\0\1\u017d\70\0\1\u017e\77\0\1\u017f"+
    "\74\0\1\u0180\64\0\1\u0181\47\0\2\u0182\57\0\1\u0183"+
    "\75\0\2\u0184\64\0\2\u0185\54\0\1\u0186\66\0\2\u0187"+
    "\32\0\1\60\1\0\1\60\26\0\10\60\2\u0188\21\60"+
    "\2\0\1\60\1\0\1\60\26\0\10\60\2\u0189\21\60"+
    "\2\0\1\60\1\0\1\60\26\0\1\u018a\32\60\2\0"+
    "\1\60\1\0\1\60\26\0\1\60\2\u018b\30\60\40\0"+
    "\2\u018c\71\0\1\u018d\53\0\1\u018e\36\0\1\u018f\47\0"+
    "\1\u018f\54\0\2\u0190\67\0\1\u0191\64\0\1\u0192\100\0"+
    "\1\u0193\53\0\1\u0194\70\0\1\u0195\62\0\1\u0196\62\0"+
    "\2\u0197\61\0\2\u0198\30\0\1\u0199\47\0\1\u0199\50\0"+
    "\1\u019a\66\0\2\u019b\62\0\1\u019c\31\0\1\60\1\0"+
    "\1\60\26\0\32\60\1\u019d\33\0\1\u019e\7\0\2\u019f"+
    "\64\0\2\u01a0\55\0\2\u01a1\34\0\1\u01a2\47\0\1\u01a2"+
    "\56\0\1\u01a3\63\0\2\u01a4\64\0\2\u01a5\60\0\1\u01a6"+
    "\32\0\1\u01a7\47\0\1\u01a7\45\0\2\u01a8\73\0\2\u01a9"+
    "\23\0\1\60\1\0\1\u01aa\26\0\21\60\1\u01aa\11\60"+
    "\2\0\1\60\1\0\1\60\26\0\1\60\2\u01ab\30\60"+
    "\2\0\1\60\1\0\1\60\26\0\10\60\2\u01ac\21\60"+
    "\46\0\1\u01ad\65\0\1\u01ae\56\0\1\u01af\66\0\2\u01b0"+
    "\64\0\2\u01b1\111\0\1\u01b2\36\0\1\u01b3\72\0\2\u01b4"+
    "\54\0\1\u01b5\102\0\1\u01b6\17\0\1\60\1\0\1\60"+
    "\26\0\10\60\2\u01b7\21\60\42\0\1\u01b8\73\0\1\u01b9"+
    "\21\0\1\u01ba\47\0\1\u01ba\54\0\2\u01bb\64\0\2\u01bc"+
    "\71\0\1\u01bd\17\0\1\60\1\0\1\60\26\0\10\60"+
    "\2\u01be\21\60\2\0\1\60\1\0\1\60\26\0\15\60"+
    "\1\u01bf\15\60\50\0\1\u01c0\54\0\1\u01c1\71\0\2\u01c2"+
    "\64\0\2\u01c3\71\0\1\u01c4\21\0\1\u01c5\47\0\1\u01c5"+
    "\51\0\2\u01c6\60\0\2\u01c7\70\0\2\u01c8\63\0\1\u01c9"+
    "\30\0\1\60\1\0\1\60\26\0\4\60\1\u01ca\26\60"+
    "\43\0\2\u01cb\64\0\2\u01cc\64\0\2\u01cd\64\0\2\u01ce"+
    "\23\0\1\60\1\0\1\60\26\0\10\60\2\u01cf\21\60"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19062];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\23\11\30\1\4\0\2\1\11\0"+
    "\1\11\2\0\4\1\6\0\4\1\4\0\1\1\1\0"+
    "\2\11\13\0\1\1\5\0\5\1\3\0\1\11\2\1"+
    "\3\0\1\11\12\0\3\1\4\0\1\1\3\0\6\1"+
    "\30\0\1\11\11\0\6\1\3\0\1\1\1\11\2\0"+
    "\3\11\7\0\2\11\3\1\2\0\1\1\3\0\1\11"+
    "\1\0\6\1\2\11\12\0\3\11\14\0\1\11\10\0"+
    "\4\1\3\0\1\1\2\0\1\11\5\0\1\11\1\0"+
    "\1\1\1\0\1\11\1\0\1\11\3\0\5\1\2\0"+
    "\1\11\17\0\1\11\2\0\1\11\7\0\3\11\4\1"+
    "\1\0\1\1\1\0\1\1\4\0\1\11\2\0\1\11"+
    "\1\1\5\0\4\1\1\11\4\0\1\11\4\0\1\11"+
    "\1\0\3\11\5\0\2\11\2\0\1\11\1\0\1\1"+
    "\2\0\1\11\1\1\4\0\1\11\3\0\1\11\2\0"+
    "\4\1\3\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\1\1\0"+
    "\1\11\1\0\4\11\3\0\1\11\1\0\3\1\3\0"+
    "\2\11\4\0\1\11\1\1\2\0\3\11\1\0\2\1"+
    "\1\0\5\11\2\0\1\11\1\0\1\1\4\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _FortranLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 102: break;
          case 2: 
            { return FortranTokens.COLON;
            }
          case 103: break;
          case 3: 
            { return FortranTokens.IDENTIFIER;
            }
          case 104: break;
          case 4: 
            { return FortranTokens.LINE_COMMENT;
            }
          case 105: break;
          case 5: 
            { return FortranTokens.WHITE_SPACE;
            }
          case 106: break;
          case 6: 
            { return FortranTokens.PLUS;
            }
          case 107: break;
          case 7: 
            { return FortranTokens.MINUS;
            }
          case 108: break;
          case 8: 
            { return FortranTokens.MUL;
            }
          case 109: break;
          case 9: 
            { return FortranTokens.DIV;
            }
          case 110: break;
          case 10: 
            { return FortranTokens.LPAR;
            }
          case 111: break;
          case 11: 
            { return FortranTokens.RPAR;
            }
          case 112: break;
          case 12: 
            { return FortranTokens.LBRACKET;
            }
          case 113: break;
          case 13: 
            { return FortranTokens.RBRACKET;
            }
          case 114: break;
          case 14: 
            { return FortranTokens.COMMA;
            }
          case 115: break;
          case 15: 
            { return FortranTokens.DOT;
            }
          case 116: break;
          case 16: 
            { return FortranTokens.DOLLAR;
            }
          case 117: break;
          case 17: 
            { return FortranTokens.QUOTE;
            }
          case 118: break;
          case 18: 
            { return FortranTokens.DOUBLEQUOTE;
            }
          case 119: break;
          case 19: 
            { return FortranTokens.PERC;
            }
          case 120: break;
          case 20: 
            { return FortranTokens.AMP;
            }
          case 121: break;
          case 21: 
            { return FortranTokens.SEMICOLON;
            }
          case 122: break;
          case 22: 
            { return FortranTokens.LT;
            }
          case 123: break;
          case 23: 
            { return FortranTokens.GT;
            }
          case 124: break;
          case 24: 
            { return FortranTokens.QUEST;
            }
          case 125: break;
          case 25: 
            { return FortranTokens.TO_KEYWORD;
            }
          case 126: break;
          case 26: 
            { return FortranTokens.IN_KEYWORD;
            }
          case 127: break;
          case 27: 
            { return FortranTokens.IF_KEYWORD;
            }
          case 128: break;
          case 28: 
            { return FortranTokens.GO_KEYWORD;
            }
          case 129: break;
          case 29: 
            { return FortranTokens.DO_KEYWORD;
            }
          case 130: break;
          case 30: 
            { return FortranTokens.LEN_KEYWORD;
            }
          case 131: break;
          case 31: 
            { return FortranTokens.OUT_KEYWORD;
            }
          case 132: break;
          case 32: 
            { return FortranTokens.END_KEYWORD;
            }
          case 133: break;
          case 33: 
            { return FortranTokens.USE_KEYWORD;
            }
          case 134: break;
          case 34: 
            { return FortranTokens.REAL_KEYWORD;
            }
          case 135: break;
          case 35: 
            { return FortranTokens.READ_KEYWORD;
            }
          case 136: break;
          case 36: 
            { return FortranTokens.ONLY_KEYWORD;
            }
          case 137: break;
          case 37: 
            { return FortranTokens.OPEN_KEYWORD;
            }
          case 138: break;
          case 38: 
            { return FortranTokens.CALL_KEYWORD;
            }
          case 139: break;
          case 39: 
            { return FortranTokens.CASE_KEYWORD;
            }
          case 140: break;
          case 40: 
            { return FortranTokens.THEN_KEYWORD;
            }
          case 141: break;
          case 41: 
            { return FortranTokens.TYPE_KEYWORD;
            }
          case 142: break;
          case 42: 
            { return FortranTokens.ELSE_KEYWORD;
            }
          case 143: break;
          case 43: 
            { return FortranTokens.EXIT_KEYWORD;
            }
          case 144: break;
          case 44: 
            { return FortranTokens.SAVE_KEYWORD;
            }
          case 145: break;
          case 45: 
            { return FortranTokens.STOP_KEYWORD;
            }
          case 146: break;
          case 46: 
            { return FortranTokens.KIND_KEYWORD;
            }
          case 147: break;
          case 47: 
            { return FortranTokens.DATA_KEYWORD;
            }
          case 148: break;
          case 48: 
            { return FortranTokens.CLOSE_KEYWORD;
            }
          case 149: break;
          case 49: 
            { return FortranTokens.CYCLE_KEYWORD;
            }
          case 150: break;
          case 50: 
            { return FortranTokens.BLOCK_KEYWORD;
            }
          case 151: break;
          case 51: 
            { return FortranTokens.ENTRY_KEYWORD;
            }
          case 152: break;
          case 52: 
            { return FortranTokens.INOUT_KEYWORD;
            }
          case 153: break;
          case 53: 
            { return FortranTokens.PRINT_KEYWORD;
            }
          case 154: break;
          case 54: 
            { return FortranTokens.PAUSE_KEYWORD;
            }
          case 155: break;
          case 55: 
            { return FortranTokens.WRITE_KEYWORD;
            }
          case 156: break;
          case 56: 
            { return FortranTokens.WHERE_KEYWORD;
            }
          case 157: break;
          case 57: 
            { return FortranTokens.WHILE_KEYWORD;
            }
          case 158: break;
          case 58: 
            { return FortranTokens.RETURN_KEYWORD;
            }
          case 159: break;
          case 59: 
            { return FortranTokens.RESULT_KEYWORD;
            }
          case 160: break;
          case 60: 
            { return FortranTokens.REWIND_KEYWORD;
            }
          case 161: break;
          case 61: 
            { return FortranTokens.ASSIGN_KEYWORD;
            }
          case 162: break;
          case 62: 
            { return FortranTokens.COMMON_KEYWORD;
            }
          case 163: break;
          case 63: 
            { return FortranTokens.TARGET_KEYWORD;
            }
          case 164: break;
          case 64: 
            { return FortranTokens.SELECT_KEYWORD;
            }
          case 165: break;
          case 65: 
            { return FortranTokens.INTENT_KEYWORD;
            }
          case 166: break;
          case 66: 
            { return FortranTokens.MODULE_KEYWORD;
            }
          case 167: break;
          case 67: 
            { return FortranTokens.PUBLIC_KEYWORD;
            }
          case 168: break;
          case 68: 
            { return FortranTokens.DOUBLE_KEYWORD;
            }
          case 169: break;
          case 69: 
            { return FortranTokens.FORMAT_KEYWORD;
            }
          case 170: break;
          case 70: 
            { return FortranTokens.LOGICAL_KEYWORD;
            }
          case 171: break;
          case 71: 
            { return FortranTokens.COMPLEX_KEYWORD;
            }
          case 172: break;
          case 72: 
            { return FortranTokens.ENDFILE_KEYWORD;
            }
          case 173: break;
          case 73: 
            { return FortranTokens.INTEGER_KEYWORD;
            }
          case 174: break;
          case 74: 
            { return FortranTokens.INQUIRE_KEYWORD;
            }
          case 175: break;
          case 75: 
            { return FortranTokens.NULLIFY_KEYWORD;
            }
          case 176: break;
          case 76: 
            { return FortranTokens.PROGRAM_KEYWORD;
            }
          case 177: break;
          case 77: 
            { return FortranTokens.PRIVATE_KEYWORD;
            }
          case 178: break;
          case 78: 
            { return FortranTokens.POINTER_KEYWORD;
            }
          case 179: break;
          case 79: 
            { return FortranTokens.DEFAULT_KEYWORD;
            }
          case 180: break;
          case 80: 
            { return FortranTokens.ALLOCATE_KEYWORD;
            }
          case 181: break;
          case 81: 
            { return FortranTokens.OPTIONAL_KEYWORD;
            }
          case 182: break;
          case 82: 
            { return FortranTokens.OPERATOR_KEYWORD;
            }
          case 183: break;
          case 83: 
            { return FortranTokens.CONTAINS_KEYWORD;
            }
          case 184: break;
          case 84: 
            { return FortranTokens.CONTINUE_KEYWORD;
            }
          case 185: break;
          case 85: 
            { return FortranTokens.EXTERNAL_KEYWORD;
            }
          case 186: break;
          case 86: 
            { return FortranTokens.IMPLICIT_KEYWORD;
            }
          case 187: break;
          case 87: 
            { return FortranTokens.NAMELIST_KEYWORD;
            }
          case 188: break;
          case 88: 
            { return FortranTokens.FUNCTION_KEYWORD;
            }
          case 189: break;
          case 89: 
            { return FortranTokens.RECURSIVE_KEYWORD;
            }
          case 190: break;
          case 90: 
            { return FortranTokens.CHARACTER_KEYWORD;
            }
          case 191: break;
          case 91: 
            { return FortranTokens.BACKSPACE_KEYWORD;
            }
          case 192: break;
          case 92: 
            { return FortranTokens.ELSEWHERE_KEYWORD;
            }
          case 193: break;
          case 93: 
            { return FortranTokens.INTRINSIC_KEYWORD;
            }
          case 194: break;
          case 94: 
            { return FortranTokens.INTERFACE_KEYWORD;
            }
          case 195: break;
          case 95: 
            { return FortranTokens.PRECISION_KEYWORD;
            }
          case 196: break;
          case 96: 
            { return FortranTokens.PARAMETER_KEYWORD;
            }
          case 197: break;
          case 97: 
            { return FortranTokens.ASSIGNMENT_KEYWORD;
            }
          case 198: break;
          case 98: 
            { return FortranTokens.SUBROUTINE_KEYWORD;
            }
          case 199: break;
          case 99: 
            { return FortranTokens.DEALLOCATE_KEYWORD;
            }
          case 200: break;
          case 100: 
            { return FortranTokens.ALLOCATABLE_KEYWORD;
            }
          case 201: break;
          case 101: 
            { return FortranTokens.EQUIVALENCE_KEYWORD;
            }
          case 202: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
