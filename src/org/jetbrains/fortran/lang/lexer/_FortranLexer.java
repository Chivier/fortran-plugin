/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.jetbrains.fortran.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>C:/development/fortran-plugin/src/org/jetbrains/fortran/lang/lexer/Fortran.flex</tt>
 */
class _FortranLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int DQ_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13856 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\3"+
    "\13\1\15\3\13\1\16\24\13\1\17\1\20\1\21\10\1\1\22\1\23\1\13\1\24\4\13\1\25"+
    "\10\13\1\26\12\13\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13"+
    "\1\32\1\1\1\34\1\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1"+
    "\43\1\44\1\13\1\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52"+
    "\2\13\1\53\1\1\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\20\1\64"+
    "\1\57\1\60\1\65\1\1\1\66\1\67\1\70\1\71\1\24\1\60\1\72\1\1\1\73\1\55\1\74"+
    "\1\75\1\57\1\60\1\72\1\1\1\63\1\55\1\43\1\76\1\77\1\100\1\101\1\1\1\73\1\67"+
    "\1\1\1\102\1\40\1\60\1\53\1\1\1\103\1\55\1\1\1\102\1\40\1\60\1\104\1\1\1\62"+
    "\1\55\1\105\1\102\1\40\1\13\1\106\1\62\1\107\1\55\1\110\1\111\1\112\1\13\1"+
    "\113\1\114\1\1\1\67\1\1\1\27\2\13\1\115\1\114\1\116\2\1\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\2\1\1\73\1\1\1\116\1\1\1\125\1\13\1\126\1\1\1\127\7\1\2"+
    "\13\1\32\1\107\1\116\1\130\1\131\1\132\1\133\1\116\2\13\1\134\2\13\1\135\24"+
    "\13\1\136\1\137\2\13\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\32\2\1"+
    "\1\13\1\1\5\13\1\142\1\27\45\13\1\143\1\13\1\27\1\32\4\13\1\32\1\144\1\145"+
    "\1\20\1\13\1\20\1\13\1\20\1\145\1\73\3\13\1\146\1\1\1\147\1\116\2\1\1\116"+
    "\5\13\1\31\2\13\1\150\4\13\1\42\1\13\1\151\2\1\1\67\1\13\1\152\1\51\2\13\1"+
    "\153\1\13\1\101\1\116\2\1\1\13\1\114\3\13\1\51\2\1\2\116\1\154\5\1\1\111\2"+
    "\13\1\146\1\155\1\116\2\1\1\156\1\13\1\157\1\44\2\13\1\42\1\1\2\13\1\146\1"+
    "\1\1\160\1\44\1\13\1\152\6\1\1\161\1\162\14\13\4\1\21\13\1\142\2\13\1\142"+
    "\1\163\1\13\1\152\3\13\1\164\1\165\1\166\1\126\1\165\2\1\1\167\4\1\1\170\1"+
    "\1\1\126\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\151\2\13"+
    "\1\151\10\13\1\177\1\200\2\13\1\134\3\13\1\201\1\1\1\13\1\114\4\202\4\1\1"+
    "\107\35\1\1\203\2\1\1\204\1\27\4\13\1\205\1\27\4\13\1\135\1\111\1\13\1\152"+
    "\1\27\4\13\1\151\1\1\1\13\1\32\3\1\1\13\40\1\133\13\1\42\4\1\135\13\1\42\2"+
    "\1\10\13\1\126\4\1\2\13\1\152\20\13\1\126\1\13\1\206\1\1\2\13\1\151\1\107"+
    "\1\13\1\152\4\13\1\42\2\1\1\207\1\210\5\13\1\211\1\13\1\152\1\31\3\1\1\207"+
    "\1\212\1\13\1\33\1\1\3\13\1\146\1\210\2\13\1\146\1\1\1\116\1\1\1\213\1\44"+
    "\1\13\1\42\1\13\1\114\1\1\1\13\1\126\1\52\2\13\1\33\1\107\1\116\1\214\1\215"+
    "\2\13\1\50\1\1\1\216\1\116\1\13\1\217\3\13\1\220\1\221\1\222\1\32\1\70\1\223"+
    "\1\224\1\202\2\13\1\135\1\42\7\13\1\33\1\116\72\13\1\146\1\13\1\225\2\13\1"+
    "\153\20\1\26\13\1\152\6\13\1\101\2\1\1\114\1\226\1\60\1\227\1\230\6\13\1\20"+
    "\1\1\1\156\25\13\1\152\1\1\4\13\1\210\2\13\1\31\2\1\1\153\7\1\1\214\7\13\1"+
    "\126\1\1\1\116\1\27\1\32\1\27\1\32\1\231\4\13\1\151\1\232\1\233\2\1\1\234"+
    "\1\13\1\14\1\235\2\152\2\1\7\13\1\32\30\1\1\13\1\126\3\13\1\73\2\1\2\13\1"+
    "\1\1\13\1\236\2\13\1\42\1\13\1\152\2\13\1\237\3\1\11\13\1\152\1\116\5\1\2"+
    "\13\1\31\3\13\1\146\11\1\23\13\1\114\1\13\1\42\1\31\11\1\1\240\2\13\1\241"+
    "\1\13\1\42\1\13\1\114\1\13\1\151\4\1\1\13\1\242\1\13\1\42\1\13\1\101\4\1\3"+
    "\13\1\243\4\1\1\73\1\244\1\13\1\146\2\1\1\13\1\126\1\13\1\126\2\1\1\125\1"+
    "\13\1\51\1\1\3\13\1\42\1\13\1\42\1\13\1\33\1\13\1\20\6\1\4\13\1\50\3\1\3\13"+
    "\1\33\3\13\1\33\60\1\1\156\2\13\1\31\2\1\1\67\1\1\1\156\2\13\2\1\1\13\1\50"+
    "\1\116\1\156\1\13\1\114\1\67\1\1\2\13\1\245\1\156\2\13\1\33\1\246\1\247\2"+
    "\1\1\13\1\24\1\153\5\1\1\250\1\251\1\50\2\13\1\151\1\1\1\116\1\75\1\57\1\60"+
    "\1\72\1\1\1\252\1\20\21\1\3\13\1\1\1\253\1\116\12\1\2\13\1\151\2\1\1\254\2"+
    "\1\3\13\1\1\1\255\1\116\2\1\2\13\1\32\1\1\1\116\3\1\1\13\1\101\1\1\1\116\26"+
    "\1\4\13\1\116\1\107\34\1\3\13\1\50\20\1\71\13\1\101\16\1\14\13\1\146\53\1"+
    "\2\13\1\151\75\1\44\13\1\114\33\1\43\13\1\50\1\13\1\151\1\116\6\1\1\13\1\152"+
    "\1\1\3\13\1\1\1\146\1\116\1\156\1\256\1\13\67\1\4\13\1\51\1\73\3\1\1\156\6"+
    "\1\1\20\77\1\6\13\1\32\1\126\1\50\1\101\66\1\5\13\1\214\3\13\1\145\1\257\1"+
    "\260\1\261\3\13\1\262\1\263\1\13\1\264\1\265\1\40\24\13\1\266\1\13\1\40\1"+
    "\135\1\13\1\135\1\13\1\214\1\13\1\214\1\151\1\13\1\151\1\13\1\60\1\13\1\60"+
    "\1\13\1\267\3\270\14\13\1\51\123\1\1\261\1\13\1\271\1\272\1\273\1\274\1\275"+
    "\1\276\1\277\1\153\1\300\1\153\24\1\55\13\1\114\2\1\103\13\1\51\15\13\1\152"+
    "\150\13\1\20\25\1\41\13\1\152\36\1");

  /* The ZZ_CMAP_A table has 3088 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\4\1\67\1\5\1\67\22\0\1\7\1\3\1\16\1\0\1\31\1\32\1\33\1\15\1\24"+
    "\1\25\1\22\1\12\1\30\1\13\1\10\1\23\12\6\1\21\1\34\1\35\1\20\1\36\1\37\1\0"+
    "\1\45\1\52\1\51\1\14\1\43\1\44\1\54\1\60\1\53\1\2\1\57\1\46\1\56\1\55\1\50"+
    "\1\61\1\65\1\41\1\47\1\40\1\42\1\66\1\64\1\62\1\63\1\2\1\26\1\17\1\27\1\0"+
    "\1\1\1\0\1\45\1\52\1\51\1\14\1\11\1\44\1\54\1\60\1\53\1\2\1\57\1\46\1\56\1"+
    "\55\1\50\1\61\1\65\1\41\1\47\1\40\1\42\1\66\1\64\1\62\1\63\1\2\12\0\1\67\24"+
    "\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\10\2\2\53\35\2\1\47\2\2\4\0\14\2\16\0"+
    "\5\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0\1\2\1\0\3\2\1\0\1"+
    "\2\1\0\4\2\1\0\23\2\1\0\13\2\10\0\6\2\1\0\26\2\2\0\1\2\6\0\10\2\10\0\13\2"+
    "\5\0\3\2\15\0\12\1\4\0\6\2\1\0\1\2\17\0\2\2\7\0\2\2\12\1\3\2\2\0\2\2\1\0\16"+
    "\2\15\0\11\2\13\0\1\2\16\0\12\1\6\2\4\0\2\2\4\0\1\2\5\0\6\2\4\0\1\2\11\0\1"+
    "\2\3\0\1\2\7\0\11\2\7\0\5\2\17\0\26\2\3\0\1\2\2\0\1\2\7\0\12\2\4\0\12\1\1"+
    "\2\4\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0\1\2\15\0"+
    "\2\2\1\0\1\2\5\0\6\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\17\0\4\2\1\0\1\2\7\0"+
    "\12\1\2\0\3\2\20\0\11\2\1\0\2\2\1\0\2\2\1\0\5\2\3\0\1\2\2\0\1\2\30\0\1\2\13"+
    "\0\10\2\2\0\1\2\3\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3"+
    "\0\2\2\3\0\3\2\3\0\14\2\13\0\10\2\1\0\2\2\10\0\3\2\5\0\4\2\1\0\5\2\3\0\1\2"+
    "\3\0\2\2\15\0\13\2\2\0\1\2\21\0\1\2\12\0\6\2\5\0\22\2\3\0\10\2\1\0\11\2\1"+
    "\0\1\2\2\0\7\2\11\0\1\2\1\0\2\2\14\0\12\1\7\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2"+
    "\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2\2\11"+
    "\0\1\2\2\0\5\2\1\0\1\2\11\0\12\1\2\0\14\2\1\0\24\2\13\0\5\2\3\0\6\2\4\0\4"+
    "\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0\6\2\1\0\1\2\5\0\1\2\2\0\13"+
    "\2\1\0\15\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\1\2\1\0\4\2\2\0\7\2\1\0\1"+
    "\2\1\0\4\2\2\0\16\2\2\0\6\2\2\0\15\2\2\0\1\2\1\0\10\2\7\0\15\2\1\0\6\2\23"+
    "\0\1\2\4\0\1\2\3\0\11\2\1\0\1\2\5\0\17\2\1\0\16\2\2\0\14\2\13\0\1\2\15\0\7"+
    "\2\7\0\16\2\15\0\2\2\12\1\3\0\3\2\11\0\4\2\1\0\4\2\3\0\2\2\11\0\10\2\1\0\1"+
    "\2\1\0\1\2\1\0\1\2\1\0\6\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0\6\2"+
    "\14\0\2\67\7\0\1\2\15\0\1\2\2\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1"+
    "\2\1\0\1\2\1\0\1\2\1\0\1\57\3\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0\1\2\4\0\2\2\13"+
    "\0\5\2\6\0\4\2\3\0\2\2\14\0\10\2\7\0\10\2\1\0\7\2\6\0\2\2\12\0\5\2\5\0\2\2"+
    "\3\0\7\2\6\0\3\2\12\1\2\2\13\0\11\2\2\0\27\2\2\0\7\2\1\0\3\2\1\0\4\2\1\0\4"+
    "\2\2\0\6\2\3\0\1\2\1\0\1\2\2\0\5\2\1\0\12\2\12\1\5\2\1\0\3\2\1\0\10\2\4\0"+
    "\7\2\3\0\1\2\3\0\2\2\1\0\1\2\3\0\2\2\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3\2\3\0"+
    "\6\2\2\0\6\2\2\0\6\2\11\0\7\2\4\0\5\2\3\0\5\2\5\0\1\2\1\0\10\2\1\0\5\2\1\0"+
    "\1\2\1\0\2\2\1\0\2\2\1\0\12\2\6\0\12\2\2\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2\3\0"+
    "\14\2\1\0\16\2\1\0\2\2\1\0\2\2\1\0\10\2\6\0\4\2\4\0\16\2\2\0\1\2\1\0\14\2"+
    "\1\0\2\2\3\0\1\2\2\0\4\2\1\0\2\2\12\0\10\2\6\0\6\2\1\0\3\2\1\0\12\2\3\0\1"+
    "\2\12\0\4\2\13\0\12\1\1\2\1\0\1\2\3\0\7\2\1\0\1\2\1\0\4\2\1\0\17\2\1\0\2\2"+
    "\14\0\3\2\4\0\2\2\1\0\1\2\20\0\4\2\10\0\1\2\13\0\10\2\5\0\3\2\2\0\1\2\2\0"+
    "\2\2\2\0\4\2\1\0\14\2\1\0\1\2\1\0\7\2\1\0\21\2\1\0\4\2\2\0\10\2\1\0\7\2\1"+
    "\0\14\2\1\0\4\2\1\0\5\2\1\0\1\2\3\0\14\2\2\0\13\2\1\0\10\2\2\0\22\1\1\0\2"+
    "\2\1\0\1\2\2\0\1\2\1\0\12\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2\4\0\1\2\1\0\1"+
    "\2\1\0\1\2\1\0\3\2\1\0\2\2\1\0\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\2\2\1\0\1\2\2\0\4\2\1\0\7\2\1\0\4\2\1\0\4\2\1\0\1\2\1\0\12\2\1\0\5\2"+
    "\1\0\3\2\1\0\5\2\1\0\5\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\21\2\1\33\1\34"+
    "\1\35\1\33\1\0\1\36\4\0\6\2\1\37\1\2"+
    "\1\40\1\41\1\42\1\2\1\43\30\2\1\44\1\45"+
    "\1\2\1\46\13\2\1\36\3\0\1\2\1\47\21\2"+
    "\1\50\4\2\1\51\5\2\1\52\37\2\2\0\1\53"+
    "\3\2\1\54\3\2\1\55\3\2\1\56\1\57\1\2"+
    "\1\60\1\61\11\2\1\62\1\2\1\63\1\64\1\2"+
    "\1\65\1\2\1\66\1\67\17\2\1\70\1\2\1\71"+
    "\13\2\2\0\2\2\1\72\24\2\1\73\5\2\1\74"+
    "\1\2\1\75\4\2\1\76\7\2\1\77\3\2\1\100"+
    "\1\2\1\101\1\102\1\103\1\104\1\0\6\2\1\105"+
    "\1\2\1\106\1\107\1\110\1\2\1\111\1\2\1\112"+
    "\1\2\1\113\1\2\1\114\5\2\1\115\5\2\1\116"+
    "\5\2\1\117\3\2\1\120\2\2\1\121\1\2\1\122"+
    "\2\2\1\123\6\2\1\124\5\2\1\125\3\2\1\126"+
    "\1\2\1\127\1\2\1\130\2\2\1\131\1\132\1\2"+
    "\1\133\1\2\1\134\4\2\1\135\1\136\3\2\1\137"+
    "\1\140\1\141\1\142\4\2\1\143\1\144\2\2\1\145"+
    "\2\2\1\146\1\147\3\2\1\150\1\151\1\152\1\153"+
    "\1\154\1\155\1\2\1\156\1\2\1\157\1\160\1\161"+
    "\1\162";

  private static int [] zzUnpackAction() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\250\0\250\0\u0230\0\250\0\250\0\u0268"+
    "\0\u02a0\0\u02d8\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\u06c8\0\250\0\250\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0"+
    "\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0"+
    "\0\u09d8\0\u0a10\0\250\0\250\0\250\0\u0a48\0\340\0\u0a80"+
    "\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40"+
    "\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00"+
    "\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\340"+
    "\0\u0fc0\0\u0ff8\0\340\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110"+
    "\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618"+
    "\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\340\0\u1768\0\u17a0"+
    "\0\u17d8\0\u1810\0\340\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928"+
    "\0\340\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0"+
    "\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70"+
    "\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\340\0\u2178"+
    "\0\u21b0\0\u21e8\0\340\0\u2220\0\u2258\0\u2290\0\340\0\340"+
    "\0\u22c8\0\340\0\340\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0"+
    "\0\u2418\0\u2450\0\u2488\0\u24c0\0\340\0\u24f8\0\340\0\340"+
    "\0\u2530\0\340\0\u2568\0\340\0\340\0\u25a0\0\u25d8\0\u2610"+
    "\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0"+
    "\0\u2808\0\u2840\0\u2878\0\u28b0\0\340\0\u28e8\0\340\0\u2920"+
    "\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0"+
    "\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\340\0\u2c68"+
    "\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28"+
    "\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8"+
    "\0\u3020\0\u3058\0\u3090\0\340\0\u30c8\0\u3100\0\u3138\0\u3170"+
    "\0\u31a8\0\340\0\u31e0\0\340\0\u3218\0\u3250\0\u3288\0\u32c0"+
    "\0\340\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448"+
    "\0\340\0\u3480\0\u34b8\0\u34f0\0\340\0\u3528\0\340\0\340"+
    "\0\340\0\250\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678"+
    "\0\u36b0\0\340\0\u36e8\0\340\0\340\0\340\0\u3720\0\340"+
    "\0\u3758\0\340\0\u3790\0\u37c8\0\u3800\0\340\0\u3838\0\u3870"+
    "\0\u38a8\0\u38e0\0\u3918\0\340\0\u3950\0\u3988\0\u39c0\0\u39f8"+
    "\0\u3a30\0\340\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\340"+
    "\0\u3b80\0\u3bb8\0\u3bf0\0\340\0\u3c28\0\u3c60\0\250\0\u3c98"+
    "\0\340\0\u3cd0\0\u3d08\0\340\0\u3d40\0\u3d78\0\u3db0\0\u3de8"+
    "\0\u3e20\0\u3e58\0\340\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70"+
    "\0\340\0\u3fa8\0\u3fe0\0\u4018\0\340\0\u4050\0\340\0\u4088"+
    "\0\340\0\u40c0\0\u40f8\0\340\0\340\0\u4130\0\340\0\u4168"+
    "\0\340\0\u41a0\0\u41d8\0\u4210\0\u4248\0\340\0\340\0\u4280"+
    "\0\u42b8\0\u42f0\0\340\0\340\0\340\0\340\0\u4328\0\u4360"+
    "\0\u4398\0\u43d0\0\340\0\340\0\u4408\0\u4440\0\340\0\u4478"+
    "\0\u44b0\0\340\0\340\0\u44e8\0\u4520\0\u4558\0\340\0\340"+
    "\0\340\0\340\0\340\0\340\0\u4590\0\340\0\u45c8\0\340"+
    "\0\340\0\340\0\340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\4\1\5\1\6\2\7\1\10\1\7\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\4\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\12\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\5\1\57"+
    "\2\5\1\60\2\5\1\0\4\61\1\62\10\61\1\63"+
    "\1\61\1\4\50\61\4\64\1\62\11\64\1\63\1\4"+
    "\50\64\71\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\27\5\1\0\4\6\1\0\63\6\4\0"+
    "\2\7\1\0\1\7\66\0\1\10\1\65\1\66\1\67"+
    "\64\0\1\66\1\70\30\0\1\71\3\0\1\72\24\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\6\5\1\73\6\5\1\74\4\5\1\75\2\5\1\76"+
    "\1\5\2\0\2\5\3\0\1\5\2\0\1\77\2\0"+
    "\1\5\23\0\3\5\1\77\1\5\1\100\2\5\1\101"+
    "\2\5\1\102\13\5\21\0\1\103\70\0\1\104\70\0"+
    "\1\105\46\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\5\5\1\106\2\5\1\107\7\5\1\110"+
    "\2\5\1\111\3\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\112\2\0\1\5\23\0\3\5\1\112\23\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\7\5\1\113\17\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\2\5\1\114\5\5\1\115"+
    "\16\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\6\5\1\116\1\117\17\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\120\2\0\1\5\23\0\3\5"+
    "\1\120\4\5\1\121\16\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\122\2\0\1\5\23\0\1\123\1\5\1\124"+
    "\1\122\1\5\1\125\21\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\2\5\1\126\12\5"+
    "\1\127\3\5\1\130\5\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\5\5\1\131\1\132"+
    "\1\5\1\133\7\5\1\134\2\5\1\135\3\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\5\5\1\136\1\137\20\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\4\5\1\140\10\5"+
    "\1\141\1\142\10\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\10\5\1\143\16\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\2\5\1\144\2\5\1\145\2\5\1\146\16\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\10\5\1\147\16\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\13\5\1\150\13\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\1\5\1\151\1\152\2\5\1\153\2\5\1\154\16\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\1\5\1\155\16\5\1\156\6\5\1\0\4\61"+
    "\1\0\10\61\1\0\1\61\1\0\50\61\4\64\1\0"+
    "\11\64\2\0\50\64\6\0\1\10\1\65\1\66\65\0"+
    "\1\66\1\70\1\0\1\67\64\0\1\157\1\67\2\0"+
    "\2\160\62\0\1\66\1\70\121\0\1\161\73\0\1\162"+
    "\23\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\7\5\1\163\17\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\164\23\0\1\165\26\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\1\166\12\5\1\167\13\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\2\5\1\170\24\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\4\5\1\171\1\172\21\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\1\173\26\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\2\5\1\174\24\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\16\5\1\175\10\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\1\5\1\176\25\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\177\2\0\1\5\23\0\3\5\1\177\23\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\21\5\1\200\5\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\1\201\4\5\1\202"+
    "\1\5\1\203\1\5\1\204\12\5\1\205\2\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\206\2\0\1\5\23\0"+
    "\3\5\1\206\23\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\15\5\1\207\11\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\1\5\1\210\25\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\6\5\1\211\20\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\7\5\1\212\17\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\15\5\1\213\11\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\14\5\1\214\12\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\6\5\1\215\20\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\10\5\1\216\16\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\12\5\1\217\14\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\26\5\1\220\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\1\221\26\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\6\5\1\222"+
    "\20\5\2\0\2\5\3\0\1\5\2\0\1\223\2\0"+
    "\1\5\23\0\1\224\2\5\1\223\23\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\6\5"+
    "\1\225\1\226\17\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\10\5\1\227\16\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\15\5\1\230\1\231\10\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\5\5\1\232\21\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\11\5\1\233\15\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\11\5\1\234\15\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\10\5\1\235\16\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\1\236\7\5\1\237"+
    "\14\5\1\240\1\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\21\5\1\241\5\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\6\5\1\242\20\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\16\5\1\243\10\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\15\5\1\244\11\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\245\23\0\27\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\15\5\1\246"+
    "\11\5\2\0\2\5\3\0\1\5\2\0\1\247\2\0"+
    "\1\5\23\0\3\5\1\247\4\5\1\250\2\5\1\251"+
    "\13\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\12\5\1\252\14\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\1\5\1\253"+
    "\1\254\24\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\13\5\1\255\13\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\13\5"+
    "\1\256\13\5\2\0\2\5\3\0\1\5\2\0\1\257"+
    "\2\0\1\5\23\0\3\5\1\257\7\5\1\260\13\5"+
    "\7\0\1\157\1\160\122\0\1\261\73\0\1\262\22\0"+
    "\2\5\3\0\1\5\2\0\1\263\2\0\1\5\23\0"+
    "\3\5\1\263\23\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\4\5\1\264\22\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\1\5\1\265\25\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\266\2\0\1\5\23\0\3\5\1\266\23\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\1\267\26\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\13\5\1\270\13\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\5\5"+
    "\1\271\21\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\6\5\1\272\20\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\5\5"+
    "\1\273\21\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\12\5\1\274\14\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\275\2\0\1\5\23\0\3\5"+
    "\1\275\23\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\14\5\1\276\12\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\15\5"+
    "\1\277\11\5\2\0\2\5\3\0\1\5\2\0\1\300"+
    "\2\0\1\5\23\0\3\5\1\300\23\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\2\5"+
    "\1\301\24\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\302\23\0\6\5\1\303\20\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\2\5"+
    "\1\304\24\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\2\5\1\305\24\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\13\5"+
    "\1\306\13\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\11\5\1\307\15\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\16\5"+
    "\1\310\10\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\10\5\1\311\16\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\13\5"+
    "\1\312\13\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\13\5\1\313\13\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\314\2\0\1\5\23\0\3\5"+
    "\1\314\23\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\21\5\1\315\5\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\1\5"+
    "\1\316\25\5\2\0\2\5\3\0\1\5\2\0\1\317"+
    "\2\0\1\5\23\0\3\5\1\317\23\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\23\5"+
    "\1\320\3\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\1\5\1\321\13\5\1\322\11\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\13\5\1\323\13\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\6\5\1\324\20\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\325\2\0\1\5"+
    "\23\0\3\5\1\325\23\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\7\5\1\326\17\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\1\327\26\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\16\5\1\330\2\5\1\331"+
    "\5\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\1\5\1\332\25\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\6\5\1\333"+
    "\20\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\17\5\1\334\7\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\11\5\1\335"+
    "\15\5\2\0\2\5\3\0\1\5\2\0\1\336\2\0"+
    "\1\5\23\0\1\5\1\337\1\5\1\336\23\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\2\5\1\340\24\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\2\5\1\341\24\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\6\5\1\342\20\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\6\5\1\343\20\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\344\2\0\1\5\23\0"+
    "\3\5\1\344\23\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\345\2\0\1\5\23\0\3\5\1\345\23\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\2\5\1\346\24\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\347\23\0\27\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\11\5\1\350"+
    "\15\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\14\5\1\351\12\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\15\5\1\352"+
    "\10\5\1\353\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\6\5\1\354\20\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\5\5"+
    "\1\355\21\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\7\5\1\356\17\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\15\5"+
    "\1\357\11\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\1\360\26\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\1\5\1\361"+
    "\25\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\6\5\1\362\20\5\12\0\1\363\31\0"+
    "\1\363\73\0\1\364\21\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\24\5\1\365\2\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\13\5\1\366\13\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\23\5\1\367\3\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\1\5\1\370\25\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\26\5\1\371\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\2\5"+
    "\1\372\24\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\6\5\1\373\20\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\6\5"+
    "\1\374\20\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\15\5\1\375\11\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\376\2\0\1\5\23\0\3\5"+
    "\1\376\23\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\1\5\1\377\25\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\6\5"+
    "\1\u0100\20\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\1\5\1\u0101\25\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\15\5"+
    "\1\u0102\11\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\1\u0103\26\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\5\5\1\u0104"+
    "\21\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\11\5\1\u0105\15\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\14\5\1\u0106"+
    "\12\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\11\5\1\u0107\15\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\11\5\1\u0108"+
    "\15\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\10\5\1\u0109\16\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\5\5\1\u010a"+
    "\21\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\10\5\1\u010b\16\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\u010c\2\0\1\5\23\0\3\5\1\u010c"+
    "\23\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\5\5\1\u010d\5\5\1\u010e\13\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\10\5\1\u010f\16\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\6\5\1\u0110\20\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\5\5\1\u0111\21\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\u0112\2\0\1\5\23\0\3\5\1\u0112\23\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\7\5\1\u0113\17\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\17\5\1\u0114\7\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\1\5\1\u0115\12\5\1\u0116\1\u0117\11\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\13\5"+
    "\1\u0118\13\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\1\u0119\26\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\13\5\1\u011a"+
    "\13\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\13\5\1\u011b\13\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\13\5\1\u011c"+
    "\13\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\6\5\1\u011d\20\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\6\5\1\u011e"+
    "\20\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\13\5\1\u011f\13\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\1\5\1\u0120"+
    "\25\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\1\u0121\26\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\5\5\1\u0122\21\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\13\5\1\u0123\13\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\16\5\1\u0124\10\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\u0125\2\0\1\5"+
    "\23\0\3\5\1\u0125\23\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\1\u0126\26\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\u0127\2\0\1\5\23\0"+
    "\3\5\1\u0127\23\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\u0128\2\0\1\5\23\0\3\5\1\u0128\23\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\u0129\2\0\1\5\23\0"+
    "\3\5\1\u0129\23\5\11\0\1\u012a\70\0\1\u012b\31\0"+
    "\1\u012b\25\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\20\5\1\u012c\6\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\6\5\1\u012d"+
    "\20\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\15\5\1\u012e\11\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\5\5\1\u012f"+
    "\21\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\6\5\1\u0130\20\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\10\5\1\u0131"+
    "\16\5\2\0\2\5\3\0\1\5\2\0\1\u0132\2\0"+
    "\1\5\23\0\3\5\1\u0132\23\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\7\5\1\u0133"+
    "\17\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\1\u0134\26\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\15\5\1\u0135\11\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\1\u0136\26\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\7\5\1\u0137\17\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\u0138\23\0"+
    "\27\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\13\5\1\u0139\13\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\1\u013a\26\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\5\5\1\u013b\21\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\15\5\1\u013c\11\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\5\5\1\u013d\21\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\1\u013e\26\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\2\5\1\u013f\24\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\1\u0140\26\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\15\5"+
    "\1\u0141\11\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\13\5\1\u0142\13\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\15\5"+
    "\1\u0143\11\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\15\5\1\u0144\11\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\u0145\2\0\1\5\23\0\3\5"+
    "\1\u0145\23\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\11\5\1\u0146\15\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\21\5"+
    "\1\u0147\5\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\4\5\1\u0148\22\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\u0149\2\0\1\5\23\0\3\5"+
    "\1\u0149\23\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\1\u014a\26\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\15\5\1\u014b"+
    "\11\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\1\5\1\u014c\25\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\11\5\1\u014d"+
    "\15\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\4\5\1\u014e\22\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\13\5\1\u014f"+
    "\13\5\2\0\2\5\3\0\1\5\2\0\1\u0150\2\0"+
    "\1\5\23\0\3\5\1\u0150\23\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\7\5\1\u0151"+
    "\17\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\5\5\1\u0152\21\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\1\u0153\26\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\11\5\1\u0154\15\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\u0155\2\0\1\5\23\0\3\5\1\u0155\23\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\u0156\2\0\1\5"+
    "\23\0\3\5\1\u0156\23\5\11\0\1\u0157\60\0\2\5"+
    "\3\0\1\5\2\0\1\u0158\2\0\1\5\23\0\3\5"+
    "\1\u0158\23\5\2\0\2\5\3\0\1\5\2\0\1\u0159"+
    "\2\0\1\5\23\0\3\5\1\u0159\23\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\5\5"+
    "\1\u015a\21\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\6\5\1\u015b\20\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\1\u015c"+
    "\26\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\11\5\1\u015d\15\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\13\5\1\u015e"+
    "\13\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\13\5\1\u015f\13\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\10\5\1\u0160"+
    "\16\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\1\u0161\26\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\16\5\1\u0162\10\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\6\5\1\u0163\20\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\1\u0164\26\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\10\5\1\u0165\16\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\5\5\1\u0166\21\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\15\5\1\u0167\11\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\2\5\1\u0168\24\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\22\5\1\u0169\4\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\1\u016a\26\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\5\5"+
    "\1\u016b\21\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\5\5\1\u016c\21\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\1\5"+
    "\1\u016d\25\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\7\5\1\u016e\17\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\u016f\2\0\1\5\23\0\3\5"+
    "\1\u016f\23\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\13\5\1\u0170\13\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\23\5"+
    "\1\u0171\3\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\7\5\1\u0172\17\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\13\5"+
    "\1\u0173\13\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\16\5\1\u0174\10\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\u0175\2\0\1\5\23\0\3\5"+
    "\1\u0175\23\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\1\u0176\26\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\1\5\1\u0177"+
    "\25\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\1\5\1\u0178\25\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\6\5\1\u0179"+
    "\20\5\2\0\2\5\3\0\1\5\2\0\1\u017a\2\0"+
    "\1\5\23\0\3\5\1\u017a\23\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\5\5\1\u017b"+
    "\21\5\2\0\2\5\3\0\1\5\2\0\1\5\2\0"+
    "\1\5\23\0\10\5\1\u017c\16\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\26\5\1\u017d"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\15\5\1\u017e\11\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\u017f\2\0\1\5\23\0\3\5\1\u017f\1\5"+
    "\1\u0180\21\5\2\0\2\5\3\0\1\5\2\0\1\u0181"+
    "\2\0\1\5\23\0\3\5\1\u0181\23\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\13\5"+
    "\1\u0182\13\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\1\5\1\u0183\25\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\6\5"+
    "\1\u0184\20\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\7\5\1\u0185\17\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\u0186\2\0\1\5\23\0\3\5"+
    "\1\u0186\23\5\2\0\2\5\3\0\1\5\2\0\1\u0187"+
    "\2\0\1\5\23\0\3\5\1\u0187\23\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\11\5"+
    "\1\u0188\15\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\11\5\1\u0189\15\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\5\2\0\1\5\23\0\13\5"+
    "\1\u018a\13\5\2\0\2\5\3\0\1\5\2\0\1\5"+
    "\2\0\1\5\23\0\1\u018b\26\5\2\0\2\5\3\0"+
    "\1\5\2\0\1\5\2\0\1\5\23\0\1\u018c\26\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\10\5\1\u018d\16\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\u018e\2\0\1\5\23\0\3\5\1\u018e\23\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\u018f\2\0\1\5"+
    "\23\0\3\5\1\u018f\23\5\2\0\2\5\3\0\1\5"+
    "\2\0\1\5\2\0\1\5\23\0\15\5\1\u0190\11\5"+
    "\2\0\2\5\3\0\1\5\2\0\1\5\2\0\1\5"+
    "\23\0\1\u0191\26\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\15\5\1\u0192\11\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\u0193\2\0\1\5\23\0"+
    "\3\5\1\u0193\23\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\12\5\1\u0194\14\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\15\5\1\u0195\11\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\15\5\1\u0196\11\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\1\5\1\u0197\25\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\u0198\2\0\1\5\23\0\3\5\1\u0198\23\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\u0199\2\0\1\5\23\0"+
    "\3\5\1\u0199\23\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\11\5\1\u019a\15\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\15\5\1\u019b\11\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\1\5\1\u019c\25\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\11\5\1\u019d\15\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\u019e\2\0\1\5\23\0\3\5\1\u019e\23\5\2\0"+
    "\2\5\3\0\1\5\2\0\1\5\2\0\1\5\23\0"+
    "\6\5\1\u019f\20\5\2\0\2\5\3\0\1\5\2\0"+
    "\1\5\2\0\1\5\23\0\1\u01a0\26\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\u01a1\2\0\1\5\23\0\3\5"+
    "\1\u01a1\23\5\2\0\2\5\3\0\1\5\2\0\1\u01a2"+
    "\2\0\1\5\23\0\3\5\1\u01a2\23\5\2\0\2\5"+
    "\3\0\1\5\2\0\1\u01a3\2\0\1\5\23\0\3\5"+
    "\1\u01a3\23\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\6\1\2\11\1\1\2\11\3\1\15\11"+
    "\22\1\2\11\1\1\1\0\1\1\4\0\10\1\3\11"+
    "\52\1\3\0\76\1\2\0\100\1\2\0\65\1\1\11"+
    "\1\0\53\1\1\11\114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _FortranLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 115: break;
          case 2: 
            { return FortranTokens.IDENTIFIER;
            }
          case 116: break;
          case 3: 
            { return FortranTokens.LINE_COMMENT;
            }
          case 117: break;
          case 4: 
            { return FortranTokens.WHITE_SPACE;
            }
          case 118: break;
          case 5: 
            { return FortranTokens.INTEGER_LITERAL;
            }
          case 119: break;
          case 6: 
            { return FortranTokens.DOT;
            }
          case 120: break;
          case 7: 
            { return FortranTokens.PLUS;
            }
          case 121: break;
          case 8: 
            { return FortranTokens.MINUS;
            }
          case 122: break;
          case 9: 
            { yybegin(STRING); return FortranTokens.OPENING_QUOTE;
            }
          case 123: break;
          case 10: 
            { yybegin(DQ_STRING); return FortranTokens.OPENING_QUOTE;
            }
          case 124: break;
          case 11: 
            { return FortranTokens.EQ;
            }
          case 125: break;
          case 12: 
            { return FortranTokens.COLON;
            }
          case 126: break;
          case 13: 
            { return FortranTokens.MUL;
            }
          case 127: break;
          case 14: 
            { return FortranTokens.DIV;
            }
          case 128: break;
          case 15: 
            { return FortranTokens.LPAR;
            }
          case 129: break;
          case 16: 
            { return FortranTokens.RPAR;
            }
          case 130: break;
          case 17: 
            { return FortranTokens.LBRACKET;
            }
          case 131: break;
          case 18: 
            { return FortranTokens.RBRACKET;
            }
          case 132: break;
          case 19: 
            { return FortranTokens.COMMA;
            }
          case 133: break;
          case 20: 
            { return FortranTokens.DOLLAR;
            }
          case 134: break;
          case 21: 
            { return FortranTokens.PERC;
            }
          case 135: break;
          case 22: 
            { return FortranTokens.AMP;
            }
          case 136: break;
          case 23: 
            { return FortranTokens.SEMICOLON;
            }
          case 137: break;
          case 24: 
            { return FortranTokens.LT;
            }
          case 138: break;
          case 25: 
            { return FortranTokens.GT;
            }
          case 139: break;
          case 26: 
            { return FortranTokens.QUEST;
            }
          case 140: break;
          case 27: 
            { return FortranTokens.REGULAR_STRING_PART;
            }
          case 141: break;
          case 28: 
            { yybegin(YYINITIAL); return FortranTokens.DANGLING_NEWLINE;
            }
          case 142: break;
          case 29: 
            { yybegin(YYINITIAL); return FortranTokens.CLOSING_QUOTE;
            }
          case 143: break;
          case 30: 
            { return FortranTokens.FLOATING_POINT_LITERAL;
            }
          case 144: break;
          case 31: 
            { return FortranTokens.DO_KEYWORD;
            }
          case 145: break;
          case 32: 
            { return FortranTokens.EQEQ;
            }
          case 146: break;
          case 33: 
            { return FortranTokens.COLONCOLON;
            }
          case 147: break;
          case 34: 
            { return FortranTokens.POWER;
            }
          case 148: break;
          case 35: 
            { return FortranTokens.TO_KEYWORD;
            }
          case 149: break;
          case 36: 
            { return FortranTokens.IF_KEYWORD;
            }
          case 150: break;
          case 37: 
            { return FortranTokens.IN_KEYWORD;
            }
          case 151: break;
          case 38: 
            { return FortranTokens.GO_KEYWORD;
            }
          case 152: break;
          case 39: 
            { return FortranTokens.END_KEYWORD;
            }
          case 153: break;
          case 40: 
            { return FortranTokens.USE_KEYWORD;
            }
          case 154: break;
          case 41: 
            { return FortranTokens.LEN_KEYWORD;
            }
          case 155: break;
          case 42: 
            { return FortranTokens.OUT_KEYWORD;
            }
          case 156: break;
          case 43: 
            { return FortranTokens.ELSE_KEYWORD;
            }
          case 157: break;
          case 44: 
            { return FortranTokens.EXIT_KEYWORD;
            }
          case 158: break;
          case 45: 
            { return FortranTokens.DATA_KEYWORD;
            }
          case 159: break;
          case 46: 
            { return FortranTokens.THEN_KEYWORD;
            }
          case 160: break;
          case 47: 
            { return FortranTokens.TYPE_KEYWORD;
            }
          case 161: break;
          case 48: 
            { return FortranTokens.READ_KEYWORD;
            }
          case 162: break;
          case 49: 
            { return FortranTokens.REAL_KEYWORD;
            }
          case 163: break;
          case 50: 
            { return FortranTokens.STOP_KEYWORD;
            }
          case 164: break;
          case 51: 
            { return FortranTokens.SAVE_KEYWORD;
            }
          case 165: break;
          case 52: 
            { return FortranTokens.ONLY_KEYWORD;
            }
          case 166: break;
          case 53: 
            { return FortranTokens.OPEN_KEYWORD;
            }
          case 167: break;
          case 54: 
            { return FortranTokens.CALL_KEYWORD;
            }
          case 168: break;
          case 55: 
            { return FortranTokens.CASE_KEYWORD;
            }
          case 169: break;
          case 56: 
            { return FortranTokens.NONE_KEYWORD;
            }
          case 170: break;
          case 57: 
            { return FortranTokens.KIND_KEYWORD;
            }
          case 171: break;
          case 58: 
            { return FortranTokens.ENTRY_KEYWORD;
            }
          case 172: break;
          case 59: 
            { return FortranTokens.CLOSE_KEYWORD;
            }
          case 173: break;
          case 60: 
            { return FortranTokens.CYCLE_KEYWORD;
            }
          case 174: break;
          case 61: 
            { return FortranTokens.BLOCK_KEYWORD;
            }
          case 175: break;
          case 62: 
            { return FortranTokens.INOUT_KEYWORD;
            }
          case 176: break;
          case 63: 
            { return FortranTokens.PRINT_KEYWORD;
            }
          case 177: break;
          case 64: 
            { return FortranTokens.PAUSE_KEYWORD;
            }
          case 178: break;
          case 65: 
            { return FortranTokens.WRITE_KEYWORD;
            }
          case 179: break;
          case 66: 
            { return FortranTokens.WHERE_KEYWORD;
            }
          case 180: break;
          case 67: 
            { return FortranTokens.WHILE_KEYWORD;
            }
          case 181: break;
          case 68: 
            { return FortranTokens.TRUE_KEYWORD;
            }
          case 182: break;
          case 69: 
            { return FortranTokens.DOUBLE_KEYWORD;
            }
          case 183: break;
          case 70: 
            { return FortranTokens.TARGET_KEYWORD;
            }
          case 184: break;
          case 71: 
            { return FortranTokens.RETURN_KEYWORD;
            }
          case 185: break;
          case 72: 
            { return FortranTokens.RESULT_KEYWORD;
            }
          case 186: break;
          case 73: 
            { return FortranTokens.REWIND_KEYWORD;
            }
          case 187: break;
          case 74: 
            { return FortranTokens.FORMAT_KEYWORD;
            }
          case 188: break;
          case 75: 
            { return FortranTokens.ASSIGN_KEYWORD;
            }
          case 189: break;
          case 76: 
            { return FortranTokens.SELECT_KEYWORD;
            }
          case 190: break;
          case 77: 
            { return FortranTokens.COMMON_KEYWORD;
            }
          case 191: break;
          case 78: 
            { return FortranTokens.INTENT_KEYWORD;
            }
          case 192: break;
          case 79: 
            { return FortranTokens.MODULE_KEYWORD;
            }
          case 193: break;
          case 80: 
            { return FortranTokens.PUBLIC_KEYWORD;
            }
          case 194: break;
          case 81: 
            { return FortranTokens.FALSE_KEYWORD;
            }
          case 195: break;
          case 82: 
            { return FortranTokens.ENDFILE_KEYWORD;
            }
          case 196: break;
          case 83: 
            { return FortranTokens.DEFAULT_KEYWORD;
            }
          case 197: break;
          case 84: 
            { return FortranTokens.LOGICAL_KEYWORD;
            }
          case 198: break;
          case 85: 
            { return FortranTokens.COMPLEX_KEYWORD;
            }
          case 199: break;
          case 86: 
            { return FortranTokens.INTEGER_KEYWORD;
            }
          case 200: break;
          case 87: 
            { return FortranTokens.INQUIRE_KEYWORD;
            }
          case 201: break;
          case 88: 
            { return FortranTokens.NULLIFY_KEYWORD;
            }
          case 202: break;
          case 89: 
            { return FortranTokens.PROGRAM_KEYWORD;
            }
          case 203: break;
          case 90: 
            { return FortranTokens.PRIVATE_KEYWORD;
            }
          case 204: break;
          case 91: 
            { return FortranTokens.POINTER_KEYWORD;
            }
          case 205: break;
          case 92: 
            { return FortranTokens.EXTERNAL_KEYWORD;
            }
          case 206: break;
          case 93: 
            { return FortranTokens.FUNCTION_KEYWORD;
            }
          case 207: break;
          case 94: 
            { return FortranTokens.ALLOCATE_KEYWORD;
            }
          case 208: break;
          case 95: 
            { return FortranTokens.OPERATOR_KEYWORD;
            }
          case 209: break;
          case 96: 
            { return FortranTokens.OPTIONAL_KEYWORD;
            }
          case 210: break;
          case 97: 
            { return FortranTokens.CONTAINS_KEYWORD;
            }
          case 211: break;
          case 98: 
            { return FortranTokens.CONTINUE_KEYWORD;
            }
          case 212: break;
          case 99: 
            { return FortranTokens.IMPLICIT_KEYWORD;
            }
          case 213: break;
          case 100: 
            { return FortranTokens.NAMELIST_KEYWORD;
            }
          case 214: break;
          case 101: 
            { return FortranTokens.ELSEWHERE_KEYWORD;
            }
          case 215: break;
          case 102: 
            { return FortranTokens.DIMENSION_KEYWORD;
            }
          case 216: break;
          case 103: 
            { return FortranTokens.RECURSIVE_KEYWORD;
            }
          case 217: break;
          case 104: 
            { return FortranTokens.CHARACTER_KEYWORD;
            }
          case 218: break;
          case 105: 
            { return FortranTokens.BACKSPACE_KEYWORD;
            }
          case 219: break;
          case 106: 
            { return FortranTokens.INTERFACE_KEYWORD;
            }
          case 220: break;
          case 107: 
            { return FortranTokens.INTRINSIC_KEYWORD;
            }
          case 221: break;
          case 108: 
            { return FortranTokens.PRECISION_KEYWORD;
            }
          case 222: break;
          case 109: 
            { return FortranTokens.PARAMETER_KEYWORD;
            }
          case 223: break;
          case 110: 
            { return FortranTokens.DEALLOCATE_KEYWORD;
            }
          case 224: break;
          case 111: 
            { return FortranTokens.ASSIGNMENT_KEYWORD;
            }
          case 225: break;
          case 112: 
            { return FortranTokens.SUBROUTINE_KEYWORD;
            }
          case 226: break;
          case 113: 
            { return FortranTokens.EQUIVALENCE_KEYWORD;
            }
          case 227: break;
          case 114: 
            { return FortranTokens.ALLOCATABLE_KEYWORD;
            }
          case 228: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
