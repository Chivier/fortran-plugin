/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.jetbrains.fortran.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>/home/sergei/CS/fortran-plugin/src/main/java/org/jetbrains/fortran/lang/lexer/FortranLexer.flex</tt>
 */
class _FortranLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13856 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\3"+
    "\13\1\15\3\13\1\16\24\13\1\17\1\20\1\21\10\1\1\22\1\23\1\13\1\24\4\13\1\25"+
    "\10\13\1\26\12\13\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13"+
    "\1\32\1\1\1\34\1\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1"+
    "\43\1\44\1\13\1\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52"+
    "\2\13\1\53\1\1\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\20\1\64"+
    "\1\57\1\60\1\65\1\1\1\66\1\67\1\70\1\71\1\24\1\60\1\72\1\1\1\73\1\55\1\74"+
    "\1\75\1\57\1\60\1\72\1\1\1\63\1\55\1\43\1\76\1\77\1\100\1\101\1\1\1\73\1\67"+
    "\1\1\1\102\1\40\1\60\1\53\1\1\1\103\1\55\1\1\1\102\1\40\1\60\1\104\1\1\1\62"+
    "\1\55\1\105\1\102\1\40\1\13\1\106\1\62\1\107\1\55\1\110\1\111\1\112\1\13\1"+
    "\113\1\114\1\1\1\67\1\1\1\27\2\13\1\115\1\114\1\116\2\1\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\2\1\1\73\1\1\1\116\1\1\1\125\1\13\1\126\1\1\1\127\7\1\2"+
    "\13\1\32\1\107\1\116\1\130\1\131\1\132\1\133\1\116\2\13\1\134\2\13\1\135\24"+
    "\13\1\136\1\137\2\13\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\32\2\1"+
    "\1\13\1\1\5\13\1\142\1\27\45\13\1\143\1\13\1\27\1\32\4\13\1\32\1\144\1\145"+
    "\1\20\1\13\1\20\1\13\1\20\1\145\1\73\3\13\1\146\1\1\1\147\1\116\2\1\1\116"+
    "\5\13\1\31\2\13\1\150\4\13\1\42\1\13\1\151\2\1\1\67\1\13\1\152\1\51\2\13\1"+
    "\153\1\13\1\101\1\116\2\1\1\13\1\114\3\13\1\51\2\1\2\116\1\154\5\1\1\111\2"+
    "\13\1\146\1\155\1\116\2\1\1\156\1\13\1\157\1\44\2\13\1\42\1\1\2\13\1\146\1"+
    "\1\1\160\1\44\1\13\1\152\6\1\1\161\1\162\14\13\4\1\21\13\1\142\2\13\1\142"+
    "\1\163\1\13\1\152\3\13\1\164\1\165\1\166\1\126\1\165\2\1\1\167\4\1\1\170\1"+
    "\1\1\126\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\151\2\13"+
    "\1\151\10\13\1\177\1\200\2\13\1\134\3\13\1\201\1\1\1\13\1\114\4\202\4\1\1"+
    "\107\35\1\1\203\2\1\1\204\1\27\4\13\1\205\1\27\4\13\1\135\1\111\1\13\1\152"+
    "\1\27\4\13\1\151\1\1\1\13\1\32\3\1\1\13\40\1\133\13\1\42\4\1\135\13\1\42\2"+
    "\1\10\13\1\126\4\1\2\13\1\152\20\13\1\126\1\13\1\206\1\1\2\13\1\151\1\107"+
    "\1\13\1\152\4\13\1\42\2\1\1\207\1\210\5\13\1\211\1\13\1\152\1\31\3\1\1\207"+
    "\1\212\1\13\1\33\1\1\3\13\1\146\1\210\2\13\1\146\1\1\1\116\1\1\1\213\1\44"+
    "\1\13\1\42\1\13\1\114\1\1\1\13\1\126\1\52\2\13\1\33\1\107\1\116\1\214\1\215"+
    "\2\13\1\50\1\1\1\216\1\116\1\13\1\217\3\13\1\220\1\221\1\222\1\32\1\70\1\223"+
    "\1\224\1\202\2\13\1\135\1\42\7\13\1\33\1\116\72\13\1\146\1\13\1\225\2\13\1"+
    "\153\20\1\26\13\1\152\6\13\1\101\2\1\1\114\1\226\1\60\1\227\1\230\6\13\1\20"+
    "\1\1\1\156\25\13\1\152\1\1\4\13\1\210\2\13\1\31\2\1\1\153\7\1\1\214\7\13\1"+
    "\126\1\1\1\116\1\27\1\32\1\27\1\32\1\231\4\13\1\151\1\232\1\233\2\1\1\234"+
    "\1\13\1\14\1\235\2\152\2\1\7\13\1\32\30\1\1\13\1\126\3\13\1\73\2\1\2\13\1"+
    "\1\1\13\1\236\2\13\1\42\1\13\1\152\2\13\1\237\3\1\11\13\1\152\1\116\5\1\2"+
    "\13\1\31\3\13\1\146\11\1\23\13\1\114\1\13\1\42\1\31\11\1\1\240\2\13\1\241"+
    "\1\13\1\42\1\13\1\114\1\13\1\151\4\1\1\13\1\242\1\13\1\42\1\13\1\101\4\1\3"+
    "\13\1\243\4\1\1\73\1\244\1\13\1\146\2\1\1\13\1\126\1\13\1\126\2\1\1\125\1"+
    "\13\1\51\1\1\3\13\1\42\1\13\1\42\1\13\1\33\1\13\1\20\6\1\4\13\1\50\3\1\3\13"+
    "\1\33\3\13\1\33\60\1\1\156\2\13\1\31\2\1\1\67\1\1\1\156\2\13\2\1\1\13\1\50"+
    "\1\116\1\156\1\13\1\114\1\67\1\1\2\13\1\245\1\156\2\13\1\33\1\246\1\247\2"+
    "\1\1\13\1\24\1\153\5\1\1\250\1\251\1\50\2\13\1\151\1\1\1\116\1\75\1\57\1\60"+
    "\1\72\1\1\1\252\1\20\21\1\3\13\1\1\1\253\1\116\12\1\2\13\1\151\2\1\1\254\2"+
    "\1\3\13\1\1\1\255\1\116\2\1\2\13\1\32\1\1\1\116\3\1\1\13\1\101\1\1\1\116\26"+
    "\1\4\13\1\116\1\107\34\1\3\13\1\50\20\1\71\13\1\101\16\1\14\13\1\146\53\1"+
    "\2\13\1\151\75\1\44\13\1\114\33\1\43\13\1\50\1\13\1\151\1\116\6\1\1\13\1\152"+
    "\1\1\3\13\1\1\1\146\1\116\1\156\1\256\1\13\67\1\4\13\1\51\1\73\3\1\1\156\6"+
    "\1\1\20\77\1\6\13\1\32\1\126\1\50\1\101\66\1\5\13\1\214\3\13\1\145\1\257\1"+
    "\260\1\261\3\13\1\262\1\263\1\13\1\264\1\265\1\40\24\13\1\266\1\13\1\40\1"+
    "\135\1\13\1\135\1\13\1\214\1\13\1\214\1\151\1\13\1\151\1\13\1\60\1\13\1\60"+
    "\1\13\1\267\3\270\14\13\1\51\123\1\1\261\1\13\1\271\1\272\1\273\1\274\1\275"+
    "\1\276\1\277\1\153\1\300\1\153\24\1\55\13\1\114\2\1\103\13\1\51\15\13\1\152"+
    "\150\13\1\20\25\1\41\13\1\152\36\1");

  /* The ZZ_CMAP_A table has 3088 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\16\1\4\1\71\1\5\1\71\22\0\1\7\1\3\1\17\1\0\1\32\1\33\1\34\1\20\1\25"+
    "\1\26\1\24\1\12\1\31\1\13\1\10\1\22\12\6\1\23\1\35\1\36\1\21\1\37\1\40\1\0"+
    "\1\45\1\60\1\57\1\46\1\41\1\55\1\53\1\64\1\61\1\2\1\63\1\52\1\62\1\44\1\47"+
    "\1\65\1\42\1\50\1\56\1\51\1\54\1\43\1\70\1\66\1\67\1\2\1\27\1\15\1\30\1\0"+
    "\1\1\1\0\1\45\1\60\1\57\1\14\1\11\1\55\1\53\1\64\1\61\1\2\1\63\1\52\1\62\1"+
    "\44\1\47\1\65\1\42\1\50\1\56\1\51\1\54\1\43\1\70\1\66\1\67\1\2\12\0\1\71\24"+
    "\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\10\2\2\61\35\2\1\56\2\2\4\0\14\2\16\0"+
    "\5\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0\1\2\1\0\3\2\1\0\1"+
    "\2\1\0\4\2\1\0\23\2\1\0\13\2\10\0\6\2\1\0\26\2\2\0\1\2\6\0\10\2\10\0\13\2"+
    "\5\0\3\2\15\0\12\1\4\0\6\2\1\0\1\2\17\0\2\2\7\0\2\2\12\1\3\2\2\0\2\2\1\0\16"+
    "\2\15\0\11\2\13\0\1\2\16\0\12\1\6\2\4\0\2\2\4\0\1\2\5\0\6\2\4\0\1\2\11\0\1"+
    "\2\3\0\1\2\7\0\11\2\7\0\5\2\17\0\26\2\3\0\1\2\2\0\1\2\7\0\12\2\4\0\12\1\1"+
    "\2\4\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0\1\2\15\0"+
    "\2\2\1\0\1\2\5\0\6\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\17\0\4\2\1\0\1\2\7\0"+
    "\12\1\2\0\3\2\20\0\11\2\1\0\2\2\1\0\2\2\1\0\5\2\3\0\1\2\2\0\1\2\30\0\1\2\13"+
    "\0\10\2\2\0\1\2\3\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3"+
    "\0\2\2\3\0\3\2\3\0\14\2\13\0\10\2\1\0\2\2\10\0\3\2\5\0\4\2\1\0\5\2\3\0\1\2"+
    "\3\0\2\2\15\0\13\2\2\0\1\2\21\0\1\2\12\0\6\2\5\0\22\2\3\0\10\2\1\0\11\2\1"+
    "\0\1\2\2\0\7\2\11\0\1\2\1\0\2\2\14\0\12\1\7\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2"+
    "\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2\2\11"+
    "\0\1\2\2\0\5\2\1\0\1\2\11\0\12\1\2\0\14\2\1\0\24\2\13\0\5\2\3\0\6\2\4\0\4"+
    "\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0\6\2\1\0\1\2\5\0\1\2\2\0\13"+
    "\2\1\0\15\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\1\2\1\0\4\2\2\0\7\2\1\0\1"+
    "\2\1\0\4\2\2\0\16\2\2\0\6\2\2\0\15\2\2\0\1\2\1\0\10\2\7\0\15\2\1\0\6\2\23"+
    "\0\1\2\4\0\1\2\3\0\11\2\1\0\1\2\5\0\17\2\1\0\16\2\2\0\14\2\13\0\1\2\15\0\7"+
    "\2\7\0\16\2\15\0\2\2\12\1\3\0\3\2\11\0\4\2\1\0\4\2\3\0\2\2\11\0\10\2\1\0\1"+
    "\2\1\0\1\2\1\0\1\2\1\0\6\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0\6\2"+
    "\14\0\2\71\7\0\1\2\15\0\1\2\2\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1"+
    "\2\1\0\1\2\1\0\1\2\1\0\1\63\3\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0\1\2\4\0\2\2\13"+
    "\0\5\2\6\0\4\2\3\0\2\2\14\0\10\2\7\0\10\2\1\0\7\2\6\0\2\2\12\0\5\2\5\0\2\2"+
    "\3\0\7\2\6\0\3\2\12\1\2\2\13\0\11\2\2\0\27\2\2\0\7\2\1\0\3\2\1\0\4\2\1\0\4"+
    "\2\2\0\6\2\3\0\1\2\1\0\1\2\2\0\5\2\1\0\12\2\12\1\5\2\1\0\3\2\1\0\10\2\4\0"+
    "\7\2\3\0\1\2\3\0\2\2\1\0\1\2\3\0\2\2\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3\2\3\0"+
    "\6\2\2\0\6\2\2\0\6\2\11\0\7\2\4\0\5\2\3\0\5\2\5\0\1\2\1\0\10\2\1\0\5\2\1\0"+
    "\1\2\1\0\2\2\1\0\2\2\1\0\12\2\6\0\12\2\2\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2\3\0"+
    "\14\2\1\0\16\2\1\0\2\2\1\0\2\2\1\0\10\2\6\0\4\2\4\0\16\2\2\0\1\2\1\0\14\2"+
    "\1\0\2\2\3\0\1\2\2\0\4\2\1\0\2\2\12\0\10\2\6\0\6\2\1\0\3\2\1\0\12\2\3\0\1"+
    "\2\12\0\4\2\13\0\12\1\1\2\1\0\1\2\3\0\7\2\1\0\1\2\1\0\4\2\1\0\17\2\1\0\2\2"+
    "\14\0\3\2\4\0\2\2\1\0\1\2\20\0\4\2\10\0\1\2\13\0\10\2\5\0\3\2\2\0\1\2\2\0"+
    "\2\2\2\0\4\2\1\0\14\2\1\0\1\2\1\0\7\2\1\0\21\2\1\0\4\2\2\0\10\2\1\0\7\2\1"+
    "\0\14\2\1\0\4\2\1\0\5\2\1\0\1\2\3\0\14\2\2\0\13\2\1\0\10\2\2\0\22\1\1\0\2"+
    "\2\1\0\1\2\2\0\1\2\1\0\12\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2\4\0\1\2\1\0\1"+
    "\2\1\0\1\2\1\0\3\2\1\0\2\2\1\0\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\2\2\1\0\1\2\2\0\4\2\1\0\7\2\1\0\4\2\1\0\4\2\1\0\1\2\1\0\12\2\1\0\5\2"+
    "\1\0\3\2\1\0\5\2\1\0\5\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\1\7\1\10\1\2\2\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\21\2\1\0\1\32\13\0"+
    "\6\2\1\33\1\2\3\11\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\12\2\1\43\4\2\1\44\17\2"+
    "\1\45\1\46\11\2\1\32\1\0\1\47\14\0\1\2"+
    "\1\50\11\2\2\11\6\2\1\51\12\2\1\52\2\2"+
    "\1\53\40\2\4\0\1\54\1\0\1\27\1\30\1\0"+
    "\13\2\1\55\1\2\1\56\2\2\1\57\3\2\1\60"+
    "\3\2\1\61\1\62\2\2\1\63\1\64\5\2\1\65"+
    "\1\66\1\2\1\67\2\2\1\70\1\2\1\71\1\72"+
    "\1\2\1\73\1\74\16\2\1\75\13\2\1\76\1\0"+
    "\1\77\1\100\2\0\1\2\1\101\7\2\1\102\3\2"+
    "\1\103\33\2\1\104\1\2\1\105\1\2\1\106\1\2"+
    "\1\107\7\2\1\110\4\2\1\111\1\2\1\112\1\113"+
    "\1\114\1\115\1\116\1\0\13\2\1\117\4\2\1\120"+
    "\4\2\1\121\2\2\1\122\1\123\1\2\1\124\1\125"+
    "\1\2\1\126\1\2\1\127\3\2\1\130\5\2\1\131"+
    "\4\2\1\132\5\2\1\133\1\134\1\2\1\135\1\2"+
    "\1\136\12\2\1\137\2\2\1\140\5\2\1\141\4\2"+
    "\1\142\3\2\1\143\1\2\1\144\3\2\1\145\1\2"+
    "\1\146\1\147\4\2\1\150\3\2\1\151\1\2\1\152"+
    "\2\2\1\153\1\154\2\2\1\155\1\156\1\2\1\157"+
    "\1\2\1\160\1\161\5\2\1\162\4\2\1\163\3\2"+
    "\1\164\1\2\1\165\1\2\1\166\2\2\1\167\1\2"+
    "\1\170\1\171\1\172\1\173\1\174\1\175\1\176\5\2"+
    "\1\177\1\200\1\2\1\201\1\202\1\203\1\204\3\2"+
    "\1\205\1\2\1\206\1\207\1\210";

  private static int [] zzUnpackAction() {
    int [] result = new int[528];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\72\0\72\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\72\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\u0366\0\u03a0\0\72\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\72\0\u0cb0\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\164"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\164\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u15fa\0\u1634\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756"+
    "\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926"+
    "\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\164\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c"+
    "\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\164\0\u1f7e\0\u1fb8\0\164"+
    "\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188"+
    "\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358"+
    "\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528"+
    "\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8"+
    "\0\u2732\0\u276c\0\u27a6\0\u27e0\0\72\0\u281a\0\72\0\72"+
    "\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea"+
    "\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\164\0\u2b80"+
    "\0\u2bba\0\164\0\u2bf4\0\u2c2e\0\u2c68\0\164\0\u2ca2\0\u2cdc"+
    "\0\u2d16\0\164\0\164\0\u2d50\0\u2d8a\0\164\0\164\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\164\0\164\0\u2ee6\0\164"+
    "\0\u2f20\0\u2f5a\0\164\0\u2f94\0\164\0\164\0\u2fce\0\164"+
    "\0\164\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164"+
    "\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\164"+
    "\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca"+
    "\0\u3504\0\u353e\0\u3578\0\72\0\u35b2\0\72\0\72\0\u35ec"+
    "\0\u3626\0\u3660\0\164\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782"+
    "\0\u37bc\0\u37f6\0\164\0\u3830\0\u386a\0\u38a4\0\164\0\u38de"+
    "\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\u3aae"+
    "\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e"+
    "\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e"+
    "\0\u3e88\0\u3ec2\0\164\0\u3efc\0\164\0\u3f36\0\u3f70\0\u3faa"+
    "\0\164\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140"+
    "\0\164\0\u417a\0\u41b4\0\u41ee\0\u4228\0\164\0\u4262\0\164"+
    "\0\164\0\164\0\72\0\72\0\u429c\0\u42d6\0\u4310\0\u434a"+
    "\0\u4384\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a"+
    "\0\164\0\u4554\0\u458e\0\u45c8\0\u4602\0\164\0\u463c\0\u4676"+
    "\0\u46b0\0\u46ea\0\u4724\0\u475e\0\u4798\0\164\0\164\0\u47d2"+
    "\0\164\0\164\0\u480c\0\164\0\u4846\0\164\0\u4880\0\u48ba"+
    "\0\u48f4\0\164\0\u492e\0\u4968\0\u49a2\0\u49dc\0\u4a16\0\164"+
    "\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe\0\164\0\u4b38\0\u4b72\0\u4bac"+
    "\0\u4be6\0\u4c20\0\164\0\72\0\u4c5a\0\164\0\u4c94\0\164"+
    "\0\u4cce\0\u4d08\0\u4d42\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a\0\u4e64"+
    "\0\u4e9e\0\u4ed8\0\164\0\u4f12\0\u4f4c\0\164\0\u4f86\0\u4fc0"+
    "\0\u4ffa\0\u5034\0\u506e\0\164\0\u50a8\0\u50e2\0\u511c\0\u5156"+
    "\0\164\0\u5190\0\u51ca\0\u5204\0\164\0\u523e\0\164\0\u5278"+
    "\0\u52b2\0\u52ec\0\164\0\u5326\0\164\0\164\0\u5360\0\u539a"+
    "\0\u53d4\0\u540e\0\u5448\0\u5482\0\u54bc\0\u54f6\0\164\0\u5530"+
    "\0\164\0\u556a\0\u55a4\0\164\0\164\0\u55de\0\u5618\0\164"+
    "\0\164\0\u5652\0\164\0\u568c\0\164\0\164\0\u56c6\0\u5700"+
    "\0\u573a\0\u5774\0\u57ae\0\164\0\u57e8\0\u5822\0\u585c\0\u5896"+
    "\0\164\0\u58d0\0\u590a\0\u5944\0\164\0\u597e\0\164\0\u59b8"+
    "\0\164\0\u59f2\0\u5a2c\0\164\0\u5a66\0\164\0\164\0\164"+
    "\0\164\0\164\0\164\0\164\0\u5aa0\0\u5ada\0\u5b14\0\u5b4e"+
    "\0\u5b88\0\164\0\164\0\u5bc2\0\164\0\164\0\164\0\164"+
    "\0\u5bfc\0\u5c36\0\u5c70\0\164\0\u5caa\0\164\0\164\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[528];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\2\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\2\1\5\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\10"+
    "\2\3\1\36\1\37\1\13\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\3\1\55\2\3\1\56\74\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\30\3\1\0"+
    "\4\4\1\0\65\4\4\0\2\5\1\0\1\5\6\0"+
    "\1\5\61\0\1\6\1\57\1\60\1\61\2\0\1\62"+
    "\63\0\1\60\1\63\1\0\1\64\27\0\1\64\2\0"+
    "\1\65\1\66\1\0\1\67\1\0\1\70\1\71\1\72"+
    "\1\0\1\73\15\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\1\3\1\74\1\3\1\75\5\3"+
    "\1\76\13\3\1\77\2\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\100\2\0\1\3\24\0\1\100\3\3\1\101"+
    "\1\3\1\102\11\3\1\103\7\3\1\0\4\14\1\0"+
    "\10\14\1\104\1\14\1\105\52\14\4\15\1\0\10\15"+
    "\1\106\2\15\1\105\51\15\21\0\1\107\71\0\1\110"+
    "\1\111\72\0\1\112\72\0\1\113\66\0\1\114\71\0"+
    "\1\115\51\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\4\3\1\116\1\3\1\117\4\3\1\120"+
    "\14\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\11\3\1\121\3\3\1\122\12\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\3\3\1\123\7\3\1\124\10\3\1\125\3\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\126\2\0\1\3\24\0"+
    "\1\126\27\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\4\3\1\127\1\3\1\130\14\3"+
    "\1\131\2\3\1\132\1\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\133\2\0\1\3\24\0\1\133\5\3\1\134"+
    "\21\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\6\3\1\135\21\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\15\3\1\136"+
    "\12\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\6\3\1\137\4\3\1\140\4\3\1\141"+
    "\7\3\2\0\2\3\3\0\1\3\2\0\1\142\2\0"+
    "\1\3\24\0\1\142\3\3\1\143\3\3\1\144\2\3"+
    "\1\145\14\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\4\3\1\146\1\3\1\147\2\3"+
    "\1\150\11\3\1\151\2\3\1\152\1\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\4\3"+
    "\1\153\4\3\1\154\16\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\155\10\3"+
    "\1\156\4\3\1\157\6\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\6\3\1\160\21\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\20\3\1\161\7\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\4\3\1\162\1\3"+
    "\1\163\1\164\3\3\1\165\14\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\166"+
    "\13\3\1\167\4\3\7\0\1\6\1\57\1\60\67\0"+
    "\1\60\1\63\1\0\1\61\2\0\1\62\63\0\1\170"+
    "\1\61\2\0\2\171\64\0\1\172\1\62\2\0\2\173"+
    "\64\0\1\60\1\63\124\0\1\174\40\0\1\175\27\0"+
    "\1\175\5\0\1\176\66\0\1\177\75\0\1\200\71\0"+
    "\1\201\32\0\1\202\27\0\1\202\7\0\1\203\31\0"+
    "\1\204\27\0\1\204\7\0\1\205\65\0\1\206\25\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\13\3\1\207\14\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\210\24\0\5\3\1\210\2\3\1\211"+
    "\17\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\15\3\1\212\12\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\10\3\1\213"+
    "\7\3\1\214\7\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\4\3\1\215\7\3\1\216"+
    "\13\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\10\3\1\217\17\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\13\3\1\220"+
    "\14\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\21\3\1\221\6\3\1\0\7\14\1\222"+
    "\6\14\1\222\53\14\7\15\1\223\6\15\1\223\53\15"+
    "\1\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\21\3\1\224\6\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\225\24\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\11\3\1\226\16\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\11\3\1\227\16\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\15\3\1\230\12\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\11\3\1\231\16\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\10\3\1\232\17\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\233\2\0\1\3\24\0\1\233\7\3\1\234"+
    "\17\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\4\3\1\235\3\3\1\236\4\3\1\237"+
    "\1\240\10\3\1\241\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\7\3\1\242\20\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\243\2\0\1\3\24\0"+
    "\1\243\27\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\24\3\1\244\3\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\3\3"+
    "\1\245\24\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\12\3\1\246\15\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\10\3"+
    "\1\247\17\3\2\0\2\3\3\0\1\3\2\0\1\250"+
    "\2\0\1\3\24\0\1\250\27\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\251"+
    "\20\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\3\3\1\252\24\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\11\3\1\253"+
    "\16\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\11\3\1\254\16\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\2\3\1\255"+
    "\25\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\6\3\1\256\21\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\17\3\1\257"+
    "\10\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\11\3\1\260\3\3\1\261\12\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\3\3\1\262\15\3\1\263\6\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\6\3\1\264"+
    "\21\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\4\3\1\265\23\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\16\3\1\266"+
    "\11\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\16\3\1\267\11\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\6\3\1\270"+
    "\21\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\1\3\1\271\4\3\1\272\1\3\1\273"+
    "\17\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\24\3\1\274\3\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\275\24\0\5\3\1\275"+
    "\22\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\3\3\1\276\24\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\277"+
    "\3\3\1\300\14\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\20\3\1\301\7\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\302\2\0\1\3\24\0"+
    "\1\302\5\3\1\303\11\3\1\304\7\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\17\3"+
    "\1\305\10\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\20\3\1\306\7\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\307\2\0\1\3\24\0\1\307"+
    "\17\3\1\310\7\3\7\0\1\170\1\171\70\0\1\172"+
    "\1\173\72\0\1\107\32\0\1\311\36\0\1\110\31\0"+
    "\1\312\100\0\1\313\34\0\1\314\31\0\1\314\33\0"+
    "\1\315\135\0\1\316\25\0\1\114\71\0\1\317\71\0"+
    "\1\115\71\0\1\320\133\0\1\321\20\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\20\3\1\322"+
    "\7\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\323\24\0\5\3\1\323\2\3\1\324\3\3\1\325"+
    "\1\326\1\3\1\327\1\330\1\331\2\3\1\332\2\3"+
    "\1\333\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\7\3\1\334\20\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\335\2\0\1\3\24\0\1\335\27\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\336\2\0\1\3"+
    "\24\0\1\336\27\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\10\3\1\337\17\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\11\3\1\340\16\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\4\3\1\341\23\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\4\3\1\342\23\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\17\3\1\343\10\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\344\2\0\1\3\24\0"+
    "\1\344\27\3\1\0\7\14\1\222\5\14\1\104\1\222"+
    "\1\105\52\14\7\15\1\223\5\15\1\106\1\223\1\15"+
    "\1\105\51\15\1\0\2\3\3\0\1\3\2\0\1\345"+
    "\2\0\1\3\24\0\1\345\27\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\346\2\0\1\3\24\0\1\346\27\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\11\3\1\347\16\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\6\3\1\350\21\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\20\3\1\351\7\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\26\3\1\352\1\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\3\3\1\353\3\3\1\354\20\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\20\3"+
    "\1\355\7\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\356\24\0\5\3\1\356\3\3\1\357\16\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\13\3\1\360\14\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\13\3\1\361\14\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\13\3\1\362\14\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\20\3\1\363\7\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\12\3\1\364\15\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\365\24\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\366\2\0\1\3"+
    "\24\0\1\366\27\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\20\3\1\367\7\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\6\3\1\370\21\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\21\3\1\371\6\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\16\3\1\372\11\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\373\2\0\1\3\24\0\1\373\27\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\374\2\0\1\3\24\0\1\374"+
    "\27\3\2\0\2\3\3\0\1\3\2\0\1\375\2\0"+
    "\1\3\24\0\1\375\27\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\24\3\1\376\3\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\7\3\1\377\20\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\11\3\1\u0100\16\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\u0101\2\0\1\3"+
    "\24\0\1\u0101\27\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\10\3\1\u0102\17\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\21\3\1\u0103\2\3\1\u0104\3\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\15\3\1\u0105"+
    "\12\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\7\3\1\u0106\20\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\11\3\1\u0107"+
    "\16\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\22\3\1\u0108\5\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\16\3\1\u0109"+
    "\11\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\13\3\1\u010a\14\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\13\3\1\u010b"+
    "\14\3\2\0\2\3\3\0\1\3\2\0\1\u010c\2\0"+
    "\1\3\24\0\1\u010c\6\3\1\u010d\20\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\11\3"+
    "\1\u010e\16\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\13\3\1\u010f\14\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\u0110\24\0\5\3"+
    "\1\u0110\22\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\4\3\1\u0111\23\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\15\3"+
    "\1\u0112\12\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\3\3\1\u0113\24\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\16\3"+
    "\1\u0114\11\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\12\3\1\u0115\15\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\2\3"+
    "\1\u0116\1\u0117\24\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\11\3\1\u0118\16\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\10\3\1\u0119\17\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\7\3\1\u011a\20\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\11\3\1\u011b\16\3\11\0\1\u011c\124\0\1\u011d\36\0"+
    "\1\u011e\71\0\1\u011f\72\0\1\u0120\27\0\1\u0120\106\0"+
    "\1\u0121\14\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\2\3\1\u0122\25\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\6\3\1\u0123"+
    "\21\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\26\3\1\u0124\1\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\13\3\1\u0125"+
    "\4\3\1\u0126\7\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\u0127\2\0\1\3\24\0\1\u0127\12\3\1\u0128\14\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\11\3\1\u0129\16\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\u012a\10\3"+
    "\1\u012b\13\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\6\3\1\u012c\21\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\7\3"+
    "\1\u012d\20\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\23\3\1\u012e\4\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\26\3"+
    "\1\u012f\1\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\20\3\1\u0130\6\3\1\u0131\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\7\3\1\u0132\20\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\11\3\1\u0133\16\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\13\3\1\u0134\14\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\11\3\1\u0135\16\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\3\3\1\u0136\24\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\11\3\1\u0137\16\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\20\3\1\u0138\7\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\16\3\1\u0139\11\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\12\3\1\u013a\15\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\4\3\1\u013b\23\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\6\3\1\u013c\21\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\7\3\1\u013d\20\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\11\3\1\u013e\16\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\7\3\1\u013f\20\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\3\3\1\u0140\24\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\u0141\2\0\1\3\24\0\1\u0141\27\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\16\3"+
    "\1\u0142\11\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\4\3\1\u0143\23\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\10\3"+
    "\1\u0144\17\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\16\3\1\u0145\11\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\6\3"+
    "\1\u0146\21\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\4\3\1\u0147\13\3\1\u0148\7\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\6\3\1\u0149\21\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\11\3\1\u014a\16\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\u014b\2\0\1\3"+
    "\24\0\1\u014b\27\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\4\3\1\u014c\23\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\u014d\2\0\1\3\24\0"+
    "\1\u014d\27\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\15\3\1\u014e\12\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\22\3"+
    "\1\u014f\5\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\20\3\1\u0150\7\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\10\3"+
    "\1\u0151\17\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\3\3\1\u0152\3\3\1\u0153\2\3"+
    "\1\u0154\15\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\20\3\1\u0155\7\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\20\3"+
    "\1\u0156\7\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\11\3\1\u0157\16\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\21\3"+
    "\1\u0158\6\3\2\0\2\3\3\0\1\3\2\0\1\u0159"+
    "\2\0\1\3\24\0\1\u0159\27\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\10\3\1\u015a"+
    "\17\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\20\3\1\u015b\7\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\u015c"+
    "\20\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\4\3\1\u015d\23\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\10\3\1\u015e"+
    "\17\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\20\3\1\u015f\7\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\u0160\2\0\1\3\24\0\1\u0160\27\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\u0161\2\0\1\3"+
    "\24\0\1\u0161\27\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\u0162\2\0\1\3\24\0\1\u0162\27\3\11\0\1\u0163"+
    "\71\0\1\u0164\72\0\1\u0165\27\0\1\u0165\31\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\4\3"+
    "\1\u0166\23\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\24\3\1\u0167\3\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\3\3"+
    "\1\u0168\24\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\11\3\1\u0169\16\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\11\3"+
    "\1\u016a\16\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\17\3\1\u016b\10\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\6\3"+
    "\1\u016c\21\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\10\3\1\u016d\17\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\u016e\24\0\5\3"+
    "\1\u016e\22\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\6\3\1\u016f\21\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\u0170\2\0\1\3\24\0\1\u0170"+
    "\27\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\14\3\1\u0171\13\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\23\3\1\u0172"+
    "\4\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\3\3\1\u0173\24\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\6\3\1\u0174"+
    "\21\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\11\3\1\u0175\16\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\u0176\2\0\1\3\24\0\1\u0176\27\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\15\3\1\u0177\12\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\20\3\1\u0178\7\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\14\3\1\u0179\13\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\4\3\1\u017a\23\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\3\3\1\u017b\24\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\10\3\1\u017c\17\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\3\3\1\u017d\24\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\u017e\24\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\10\3\1\u017f\17\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\15\3\1\u0180\12\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\u0181"+
    "\24\0\5\3\1\u0181\22\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\10\3\1\u0182\17\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\4\3\1\u0183\23\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\10\3\1\u0184\17\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\20\3\1\u0185\7\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\10\3\1\u0186\17\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\13\3\1\u0187\14\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\20\3\1\u0188\7\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\3\3\1\u0189\24\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\u018a\24\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\u018b\2\0\1\3"+
    "\24\0\1\u018b\27\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\16\3\1\u018c\11\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\24\3\1\u018d\3\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\u018e\24\0\5\3\1\u018e\22\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\7\3\1\u018f\20\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\10\3\1\u0190\17\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\14\3\1\u0191\13\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\u0192\2\0\1\3\24\0\1\u0192\27\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\3\3"+
    "\1\u0193\24\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\16\3\1\u0194\11\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\u0195\2\0\1\3\24\0\1\u0195"+
    "\27\3\2\0\2\3\3\0\1\3\2\0\1\u0196\2\0"+
    "\1\3\24\0\1\u0196\27\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\u0197\2\0\1\3\24\0\1\u0197\27\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\15\3\1\u0198\12\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\4\3\1\u0199\23\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\10\3\1\u019a\17\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\16\3\1\u019b\11\3\11\0"+
    "\1\u019c\62\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\11\3\1\u019d\16\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\u019e\2\0\1\3\24\0\1\u019e\27\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\16\3\1\u019f\11\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\u01a0\2\0\1\3\24\0\1\u01a0\27\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\u01a1\2\0\1\3\24\0"+
    "\1\u01a1\27\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\7\3\1\u01a2\20\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\16\3"+
    "\1\u01a3\11\3\2\0\2\3\3\0\1\3\2\0\1\u01a4"+
    "\2\0\1\3\24\0\1\u01a4\27\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\13\3\1\u01a5"+
    "\14\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\12\3\1\u01a6\15\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\u01a7"+
    "\20\3\2\0\2\3\3\0\1\3\2\0\1\u01a8\2\0"+
    "\1\3\24\0\1\u01a8\27\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\4\3\1\u01a9\23\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\16\3\1\u01aa\11\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\10\3\1\u01ab\17\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\20\3\1\u01ac\7\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\15\3\1\u01ad\12\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\26\3\1\u01ae\1\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\10\3\1\u01af\17\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\21\3\1\u01b0\6\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\6\3\1\u01b1\21\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\4\3\1\u01b2\23\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\20\3\1\u01b3\7\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\11\3\1\u01b4\16\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\6\3\1\u01b5\21\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\10\3\1\u01b6\17\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\u01b7\24\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\13\3\1\u01b8\14\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\25\3\1\u01b9\2\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\10\3\1\u01ba\17\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\4\3\1\u01bb\23\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\4\3\1\u01bc\23\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\u01bd\2\0\1\3\24\0\1\u01bd\27\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\4\3\1\u01be\23\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\7\3\1\u01bf\20\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\15\3\1\u01c0\12\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\20\3\1\u01c1\7\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\10\3\1\u01c2\17\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\7\3\1\u01c3\20\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\20\3\1\u01c4\7\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\21\3\1\u01c5\6\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\u01c6\2\0\1\3\24\0"+
    "\1\u01c6\27\3\2\0\2\3\3\0\1\3\2\0\1\u01c7"+
    "\2\0\1\3\24\0\1\u01c7\27\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\10\3\1\u01c8"+
    "\17\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\16\3\1\u01c9\11\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\6\3\1\u01ca"+
    "\21\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\22\3\1\u01cb\5\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\u01cc"+
    "\20\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\11\3\1\u01cd\16\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\u01ce"+
    "\20\3\2\0\2\3\3\0\1\3\2\0\1\u01cf\2\0"+
    "\1\3\24\0\1\u01cf\27\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\7\3\1\u01d0\20\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\11\3\1\u01d1\16\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\4\3\1\u01d2\23\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\6\3\1\u01d3\21\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\10\3\1\u01d4\17\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\u01d5\2\0\1\3"+
    "\24\0\1\u01d5\3\3\1\u01d6\23\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\u01d7\2\0\1\3\24\0\1\u01d7\27\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\7\3\1\u01d8\20\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\11\3\1\u01d9\16\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\2\3\1\u01da\25\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\u01db\24\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\20\3\1\u01dc\7\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\15\3\1\u01dd\12\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\u01de\2\0\1\3"+
    "\24\0\1\u01de\27\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\u01df\2\0\1\3\24\0\1\u01df\27\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\16\3"+
    "\1\u01e0\11\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\10\3\1\u01e1\17\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\16\3"+
    "\1\u01e2\11\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\20\3\1\u01e3\7\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\10\3"+
    "\1\u01e4\17\3\2\0\2\3\3\0\1\3\2\0\1\u01e5"+
    "\2\0\1\3\24\0\1\u01e5\27\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\6\3\1\u01e6"+
    "\21\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\3\3\1\u01e7\24\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\20\3\1\u01e8"+
    "\7\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\10\3\1\u01e9\17\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\13\3\1\u01ea"+
    "\14\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\u01eb\24\0\5\3\1\u01eb\22\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\14\3\1\u01ec"+
    "\13\3\2\0\2\3\3\0\1\3\2\0\1\u01ed\2\0"+
    "\1\3\24\0\1\u01ed\27\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\4\3\1\u01ee\23\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\u01ef\2\0\1\3"+
    "\24\0\1\u01ef\27\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\10\3\1\u01f0\17\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\3\3\1\u01f1\24\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\17\3\1\u01f2\10\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\3\3\1\u01f3\24\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\u01f4\2\0\1\3\24\0\1\u01f4\27\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\3\2\0\1\3\24\0\3\3"+
    "\1\u01f5\24\3\2\0\2\3\3\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\7\3\1\u01f6\20\3\2\0\2\3"+
    "\3\0\1\3\2\0\1\u01f7\2\0\1\3\24\0\1\u01f7"+
    "\27\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\4\3\1\u01f8\23\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\u01f9\2\0\1\3\24\0\1\u01f9\27\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\16\3\1\u01fa\11\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\7\3\1\u01fb\20\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\3\3\1\u01fc\24\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\16\3\1\u01fd\11\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\6\3\1\u01fe\21\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\10\3\1\u01ff\17\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\4\3\1\u0200\23\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\4\3\1\u0201\23\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\21\3\1\u0202\6\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\u0203\2\0\1\3\24\0\1\u0203\27\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\11\3\1\u0204\16\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\10\3\1\u0205\17\3\2\0"+
    "\2\3\3\0\1\3\2\0\1\u0206\2\0\1\3\24\0"+
    "\1\u0206\27\3\2\0\2\3\3\0\1\3\2\0\1\u0207"+
    "\2\0\1\3\24\0\1\u0207\27\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\3\3\1\u0208"+
    "\24\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\20\3\1\u0209\7\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\10\3\1\u020a"+
    "\17\3\2\0\2\3\3\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\16\3\1\u020b\11\3\2\0\2\3\3\0"+
    "\1\3\2\0\1\u020c\2\0\1\3\24\0\1\u020c\27\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\3\3\1\u020d\24\3\2\0\2\3\3\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\4\3\1\u020e\23\3"+
    "\2\0\2\3\3\0\1\3\2\0\1\u020f\2\0\1\3"+
    "\24\0\1\u020f\27\3\2\0\2\3\3\0\1\3\2\0"+
    "\1\u0210\2\0\1\3\24\0\1\u0210\27\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23780];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\7\1\11\11\2\1\1\11"+
    "\21\1\1\0\1\1\13\0\11\1\1\11\1\1\7\11"+
    "\53\1\1\0\1\1\14\0\102\1\4\0\1\11\1\0"+
    "\2\11\1\0\112\1\1\11\1\0\2\11\2\0\101\1"+
    "\2\11\1\0\66\1\1\11\164\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[528];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _FortranLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 137: break;
          case 2: 
            { return FortranTokens.IDENTIFIER;
            }
          case 138: break;
          case 3: 
            { return FortranTokens.LINE_COMMENT;
            }
          case 139: break;
          case 4: 
            { return FortranTokens.WHITE_SPACE;
            }
          case 140: break;
          case 5: 
            { return FortranTokens.INTEGER_LITERAL;
            }
          case 141: break;
          case 6: 
            { return FortranTokens.DOT;
            }
          case 142: break;
          case 7: 
            { return FortranTokens.PLUS;
            }
          case 143: break;
          case 8: 
            { return FortranTokens.MINUS;
            }
          case 144: break;
          case 9: 
            { return FortranTokens.STRING_LITERAL;
            }
          case 145: break;
          case 10: 
            { return FortranTokens.EQ;
            }
          case 146: break;
          case 11: 
            { return FortranTokens.DIV;
            }
          case 147: break;
          case 12: 
            { return FortranTokens.COLON;
            }
          case 148: break;
          case 13: 
            { return FortranTokens.MUL;
            }
          case 149: break;
          case 14: 
            { return FortranTokens.LPAR;
            }
          case 150: break;
          case 15: 
            { return FortranTokens.RPAR;
            }
          case 151: break;
          case 16: 
            { return FortranTokens.LBRACKET;
            }
          case 152: break;
          case 17: 
            { return FortranTokens.RBRACKET;
            }
          case 153: break;
          case 18: 
            { return FortranTokens.COMMA;
            }
          case 154: break;
          case 19: 
            { return FortranTokens.DOLLAR;
            }
          case 155: break;
          case 20: 
            { return FortranTokens.PERC;
            }
          case 156: break;
          case 21: 
            { return FortranTokens.AMP;
            }
          case 157: break;
          case 22: 
            { return FortranTokens.SEMICOLON;
            }
          case 158: break;
          case 23: 
            { return FortranTokens.LT;
            }
          case 159: break;
          case 24: 
            { return FortranTokens.GT;
            }
          case 160: break;
          case 25: 
            { return FortranTokens.QUEST;
            }
          case 161: break;
          case 26: 
            { return FortranTokens.FLOATING_POINT_LITERAL;
            }
          case 162: break;
          case 27: 
            { return FortranTokens.DO_KEYWORD;
            }
          case 163: break;
          case 28: 
            { return FortranTokens.EQEQ;
            }
          case 164: break;
          case 29: 
            { return FortranTokens.NEQ;
            }
          case 165: break;
          case 30: 
            { return FortranTokens.DIVDIV;
            }
          case 166: break;
          case 31: 
            { return FortranTokens.COLONCOLON;
            }
          case 167: break;
          case 32: 
            { return FortranTokens.POWER;
            }
          case 168: break;
          case 33: 
            { return FortranTokens.LE;
            }
          case 169: break;
          case 34: 
            { return FortranTokens.GE;
            }
          case 170: break;
          case 35: 
            { return FortranTokens.TO_KEYWORD;
            }
          case 171: break;
          case 36: 
            { return FortranTokens.GO_KEYWORD;
            }
          case 172: break;
          case 37: 
            { return FortranTokens.IN_KEYWORD;
            }
          case 173: break;
          case 38: 
            { return FortranTokens.IF_KEYWORD;
            }
          case 174: break;
          case 39: 
            { return FortranTokens.DOUBLE_PRECISION_LITERAL;
            }
          case 175: break;
          case 40: 
            { return FortranTokens.END_KEYWORD;
            }
          case 176: break;
          case 41: 
            { return FortranTokens.OUT_KEYWORD;
            }
          case 177: break;
          case 42: 
            { return FortranTokens.LEN_KEYWORD;
            }
          case 178: break;
          case 43: 
            { return FortranTokens.USE_KEYWORD;
            }
          case 179: break;
          case 44: 
            { return FortranTokens.OR;
            }
          case 180: break;
          case 45: 
            { return FortranTokens.ELSE_KEYWORD;
            }
          case 181: break;
          case 46: 
            { return FortranTokens.EXIT_KEYWORD;
            }
          case 182: break;
          case 47: 
            { return FortranTokens.DATA_KEYWORD;
            }
          case 183: break;
          case 48: 
            { return FortranTokens.NONE_KEYWORD;
            }
          case 184: break;
          case 49: 
            { return FortranTokens.ONLY_KEYWORD;
            }
          case 185: break;
          case 50: 
            { return FortranTokens.OPEN_KEYWORD;
            }
          case 186: break;
          case 51: 
            { return FortranTokens.READ_KEYWORD;
            }
          case 187: break;
          case 52: 
            { return FortranTokens.REAL_KEYWORD;
            }
          case 188: break;
          case 53: 
            { return FortranTokens.THEN_KEYWORD;
            }
          case 189: break;
          case 54: 
            { return FortranTokens.TYPE_KEYWORD;
            }
          case 190: break;
          case 55: 
            { return FortranTokens.GOTO_KEYWORD;
            }
          case 191: break;
          case 56: 
            { return FortranTokens.FILE_KEYWORD;
            }
          case 192: break;
          case 57: 
            { return FortranTokens.SAVE_KEYWORD;
            }
          case 193: break;
          case 58: 
            { return FortranTokens.STOP_KEYWORD;
            }
          case 194: break;
          case 59: 
            { return FortranTokens.CALL_KEYWORD;
            }
          case 195: break;
          case 60: 
            { return FortranTokens.CASE_KEYWORD;
            }
          case 196: break;
          case 61: 
            { return FortranTokens.KIND_KEYWORD;
            }
          case 197: break;
          case 62: 
            { return FortranTokens.LOGICAL_EQ;
            }
          case 198: break;
          case 63: 
            { return FortranTokens.NOT;
            }
          case 199: break;
          case 64: 
            { return FortranTokens.AND;
            }
          case 200: break;
          case 65: 
            { return FortranTokens.ENDDO_KEYWORD;
            }
          case 201: break;
          case 66: 
            { return FortranTokens.ENDIF_KEYWORD;
            }
          case 202: break;
          case 67: 
            { return FortranTokens.ENTRY_KEYWORD;
            }
          case 203: break;
          case 68: 
            { return FortranTokens.CLOSE_KEYWORD;
            }
          case 204: break;
          case 69: 
            { return FortranTokens.CYCLE_KEYWORD;
            }
          case 205: break;
          case 70: 
            { return FortranTokens.BLOCK_KEYWORD;
            }
          case 206: break;
          case 71: 
            { return FortranTokens.INOUT_KEYWORD;
            }
          case 207: break;
          case 72: 
            { return FortranTokens.PAUSE_KEYWORD;
            }
          case 208: break;
          case 73: 
            { return FortranTokens.PRINT_KEYWORD;
            }
          case 209: break;
          case 74: 
            { return FortranTokens.WRITE_KEYWORD;
            }
          case 210: break;
          case 75: 
            { return FortranTokens.WHERE_KEYWORD;
            }
          case 211: break;
          case 76: 
            { return FortranTokens.WHILE_KEYWORD;
            }
          case 212: break;
          case 77: 
            { return FortranTokens.LOGICAL_NEQ;
            }
          case 213: break;
          case 78: 
            { return FortranTokens.TRUE_KEYWORD;
            }
          case 214: break;
          case 79: 
            { return FortranTokens.ELSEIF_KEYWORD;
            }
          case 215: break;
          case 80: 
            { return FortranTokens.DOUBLE_KEYWORD;
            }
          case 216: break;
          case 81: 
            { return FortranTokens.ASSIGN_KEYWORD;
            }
          case 217: break;
          case 82: 
            { return FortranTokens.RETURN_KEYWORD;
            }
          case 218: break;
          case 83: 
            { return FortranTokens.RESULT_KEYWORD;
            }
          case 219: break;
          case 84: 
            { return FortranTokens.REWIND_KEYWORD;
            }
          case 220: break;
          case 85: 
            { return FortranTokens.TARGET_KEYWORD;
            }
          case 221: break;
          case 86: 
            { return FortranTokens.FORMAT_KEYWORD;
            }
          case 222: break;
          case 87: 
            { return FortranTokens.SELECT_KEYWORD;
            }
          case 223: break;
          case 88: 
            { return FortranTokens.COMMON_KEYWORD;
            }
          case 224: break;
          case 89: 
            { return FortranTokens.INTENT_KEYWORD;
            }
          case 225: break;
          case 90: 
            { return FortranTokens.MODULE_KEYWORD;
            }
          case 226: break;
          case 91: 
            { return FortranTokens.PUBLIC_KEYWORD;
            }
          case 227: break;
          case 92: 
            { return FortranTokens.FALSE_KEYWORD;
            }
          case 228: break;
          case 93: 
            { return FortranTokens.ENDTYPE_KEYWORD;
            }
          case 229: break;
          case 94: 
            { return FortranTokens.ENDFILE_KEYWORD;
            }
          case 230: break;
          case 95: 
            { return FortranTokens.DEFAULT_KEYWORD;
            }
          case 231: break;
          case 96: 
            { return FortranTokens.NULLIFY_KEYWORD;
            }
          case 232: break;
          case 97: 
            { return FortranTokens.LOGICAL_KEYWORD;
            }
          case 233: break;
          case 98: 
            { return FortranTokens.COMPLEX_KEYWORD;
            }
          case 234: break;
          case 99: 
            { return FortranTokens.INQUIRE_KEYWORD;
            }
          case 235: break;
          case 100: 
            { return FortranTokens.INTEGER_KEYWORD;
            }
          case 236: break;
          case 101: 
            { return FortranTokens.POINTER_KEYWORD;
            }
          case 237: break;
          case 102: 
            { return FortranTokens.PROGRAM_KEYWORD;
            }
          case 238: break;
          case 103: 
            { return FortranTokens.PRIVATE_KEYWORD;
            }
          case 239: break;
          case 104: 
            { return FortranTokens.ENDBLOCK_KEYWORD;
            }
          case 240: break;
          case 105: 
            { return FortranTokens.ENDWHERE_KEYWORD;
            }
          case 241: break;
          case 106: 
            { return FortranTokens.EXTERNAL_KEYWORD;
            }
          case 242: break;
          case 107: 
            { return FortranTokens.NAMELIST_KEYWORD;
            }
          case 243: break;
          case 108: 
            { return FortranTokens.ALLOCATE_KEYWORD;
            }
          case 244: break;
          case 109: 
            { return FortranTokens.OPERATOR_KEYWORD;
            }
          case 245: break;
          case 110: 
            { return FortranTokens.OPTIONAL_KEYWORD;
            }
          case 246: break;
          case 111: 
            { return FortranTokens.FUNCTION_KEYWORD;
            }
          case 247: break;
          case 112: 
            { return FortranTokens.CONTAINS_KEYWORD;
            }
          case 248: break;
          case 113: 
            { return FortranTokens.CONTINUE_KEYWORD;
            }
          case 249: break;
          case 114: 
            { return FortranTokens.IMPLICIT_KEYWORD;
            }
          case 250: break;
          case 115: 
            { return FortranTokens.ENDSELECT_KEYWORD;
            }
          case 251: break;
          case 116: 
            { return FortranTokens.ENDMODULE_KEYWORD;
            }
          case 252: break;
          case 117: 
            { return FortranTokens.ELSEWHERE_KEYWORD;
            }
          case 253: break;
          case 118: 
            { return FortranTokens.DIMENSION_KEYWORD;
            }
          case 254: break;
          case 119: 
            { return FortranTokens.RECURSIVE_KEYWORD;
            }
          case 255: break;
          case 120: 
            { return FortranTokens.CHARACTER_KEYWORD;
            }
          case 256: break;
          case 121: 
            { return FortranTokens.BACKSPACE_KEYWORD;
            }
          case 257: break;
          case 122: 
            { return FortranTokens.BLOCKDATA_KEYWORD;
            }
          case 258: break;
          case 123: 
            { return FortranTokens.INTERFACE_KEYWORD;
            }
          case 259: break;
          case 124: 
            { return FortranTokens.INTRINSIC_KEYWORD;
            }
          case 260: break;
          case 125: 
            { return FortranTokens.PARAMETER_KEYWORD;
            }
          case 261: break;
          case 126: 
            { return FortranTokens.PRECISION_KEYWORD;
            }
          case 262: break;
          case 127: 
            { return FortranTokens.ENDPROGRAM_KEYWORD;
            }
          case 263: break;
          case 128: 
            { return FortranTokens.DEALLOCATE_KEYWORD;
            }
          case 264: break;
          case 129: 
            { return FortranTokens.ASSIGNMENT_KEYWORD;
            }
          case 265: break;
          case 130: 
            { return FortranTokens.SUBROUTINE_KEYWORD;
            }
          case 266: break;
          case 131: 
            { return FortranTokens.EQUIVALENCE_KEYWORD;
            }
          case 267: break;
          case 132: 
            { return FortranTokens.ENDFUNCTION_KEYWORD;
            }
          case 268: break;
          case 133: 
            { return FortranTokens.ALLOCATABLE_KEYWORD;
            }
          case 269: break;
          case 134: 
            { return FortranTokens.ENDBLOCKDATA_KEYWORD;
            }
          case 270: break;
          case 135: 
            { return FortranTokens.ENDINTERFACE_KEYWORD;
            }
          case 271: break;
          case 136: 
            { return FortranTokens.ENDSUBROUTINE_KEYWORD;
            }
          case 272: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
