/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.jetbrains.fortran.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import java.util.Stack;

import static com.intellij.psi.TokenType.*;
import static org.jetbrains.fortran.lang.FortranTypes.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>/home/sergei/CS/fortran-plugin/src/main/java/org/jetbrains/fortran/lang/lexer/FortranLexer.flex</tt>
 */
class _FortranLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13856 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\3"+
    "\13\1\15\3\13\1\16\24\13\1\17\1\20\1\21\10\1\1\22\1\23\1\13\1\24\4\13\1\25"+
    "\10\13\1\26\12\13\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13"+
    "\1\32\1\1\1\34\1\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1"+
    "\43\1\44\1\13\1\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52"+
    "\2\13\1\53\1\1\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\20\1\64"+
    "\1\57\1\60\1\65\1\1\1\66\1\67\1\70\1\71\1\24\1\60\1\72\1\1\1\73\1\55\1\74"+
    "\1\75\1\57\1\60\1\72\1\1\1\63\1\55\1\43\1\76\1\77\1\100\1\101\1\1\1\73\1\67"+
    "\1\1\1\102\1\40\1\60\1\53\1\1\1\103\1\55\1\1\1\102\1\40\1\60\1\104\1\1\1\62"+
    "\1\55\1\105\1\102\1\40\1\13\1\106\1\62\1\107\1\55\1\110\1\111\1\112\1\13\1"+
    "\113\1\114\1\1\1\67\1\1\1\27\2\13\1\115\1\114\1\116\2\1\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\2\1\1\73\1\1\1\116\1\1\1\125\1\13\1\126\1\1\1\127\7\1\2"+
    "\13\1\32\1\107\1\116\1\130\1\131\1\132\1\133\1\116\2\13\1\134\2\13\1\135\24"+
    "\13\1\136\1\137\2\13\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\32\2\1"+
    "\1\13\1\1\5\13\1\142\1\27\45\13\1\143\1\13\1\27\1\32\4\13\1\32\1\144\1\145"+
    "\1\20\1\13\1\20\1\13\1\20\1\145\1\73\3\13\1\146\1\1\1\147\1\116\2\1\1\116"+
    "\5\13\1\31\2\13\1\150\4\13\1\42\1\13\1\151\2\1\1\67\1\13\1\152\1\51\2\13\1"+
    "\153\1\13\1\101\1\116\2\1\1\13\1\114\3\13\1\51\2\1\2\116\1\154\5\1\1\111\2"+
    "\13\1\146\1\155\1\116\2\1\1\156\1\13\1\157\1\44\2\13\1\42\1\1\2\13\1\146\1"+
    "\1\1\160\1\44\1\13\1\152\6\1\1\161\1\162\14\13\4\1\21\13\1\142\2\13\1\142"+
    "\1\163\1\13\1\152\3\13\1\164\1\165\1\166\1\126\1\165\2\1\1\167\4\1\1\170\1"+
    "\1\1\126\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\151\2\13"+
    "\1\151\10\13\1\177\1\200\2\13\1\134\3\13\1\201\1\1\1\13\1\114\4\202\4\1\1"+
    "\107\35\1\1\203\2\1\1\204\1\27\4\13\1\205\1\27\4\13\1\135\1\111\1\13\1\152"+
    "\1\27\4\13\1\151\1\1\1\13\1\32\3\1\1\13\40\1\133\13\1\42\4\1\135\13\1\42\2"+
    "\1\10\13\1\126\4\1\2\13\1\152\20\13\1\126\1\13\1\206\1\1\2\13\1\151\1\107"+
    "\1\13\1\152\4\13\1\42\2\1\1\207\1\210\5\13\1\211\1\13\1\152\1\31\3\1\1\207"+
    "\1\212\1\13\1\33\1\1\3\13\1\146\1\210\2\13\1\146\1\1\1\116\1\1\1\213\1\44"+
    "\1\13\1\42\1\13\1\114\1\1\1\13\1\126\1\52\2\13\1\33\1\107\1\116\1\214\1\215"+
    "\2\13\1\50\1\1\1\216\1\116\1\13\1\217\3\13\1\220\1\221\1\222\1\32\1\70\1\223"+
    "\1\224\1\202\2\13\1\135\1\42\7\13\1\33\1\116\72\13\1\146\1\13\1\225\2\13\1"+
    "\153\20\1\26\13\1\152\6\13\1\101\2\1\1\114\1\226\1\60\1\227\1\230\6\13\1\20"+
    "\1\1\1\156\25\13\1\152\1\1\4\13\1\210\2\13\1\31\2\1\1\153\7\1\1\214\7\13\1"+
    "\126\1\1\1\116\1\27\1\32\1\27\1\32\1\231\4\13\1\151\1\232\1\233\2\1\1\234"+
    "\1\13\1\14\1\235\2\152\2\1\7\13\1\32\30\1\1\13\1\126\3\13\1\73\2\1\2\13\1"+
    "\1\1\13\1\236\2\13\1\42\1\13\1\152\2\13\1\237\3\1\11\13\1\152\1\116\5\1\2"+
    "\13\1\31\3\13\1\146\11\1\23\13\1\114\1\13\1\42\1\31\11\1\1\240\2\13\1\241"+
    "\1\13\1\42\1\13\1\114\1\13\1\151\4\1\1\13\1\242\1\13\1\42\1\13\1\101\4\1\3"+
    "\13\1\243\4\1\1\73\1\244\1\13\1\146\2\1\1\13\1\126\1\13\1\126\2\1\1\125\1"+
    "\13\1\51\1\1\3\13\1\42\1\13\1\42\1\13\1\33\1\13\1\20\6\1\4\13\1\50\3\1\3\13"+
    "\1\33\3\13\1\33\60\1\1\156\2\13\1\31\2\1\1\67\1\1\1\156\2\13\2\1\1\13\1\50"+
    "\1\116\1\156\1\13\1\114\1\67\1\1\2\13\1\245\1\156\2\13\1\33\1\246\1\247\2"+
    "\1\1\13\1\24\1\153\5\1\1\250\1\251\1\50\2\13\1\151\1\1\1\116\1\75\1\57\1\60"+
    "\1\72\1\1\1\252\1\20\21\1\3\13\1\1\1\253\1\116\12\1\2\13\1\151\2\1\1\254\2"+
    "\1\3\13\1\1\1\255\1\116\2\1\2\13\1\32\1\1\1\116\3\1\1\13\1\101\1\1\1\116\26"+
    "\1\4\13\1\116\1\107\34\1\3\13\1\50\20\1\71\13\1\101\16\1\14\13\1\146\53\1"+
    "\2\13\1\151\75\1\44\13\1\114\33\1\43\13\1\50\1\13\1\151\1\116\6\1\1\13\1\152"+
    "\1\1\3\13\1\1\1\146\1\116\1\156\1\256\1\13\67\1\4\13\1\51\1\73\3\1\1\156\6"+
    "\1\1\20\77\1\6\13\1\32\1\126\1\50\1\101\66\1\5\13\1\214\3\13\1\145\1\257\1"+
    "\260\1\261\3\13\1\262\1\263\1\13\1\264\1\265\1\40\24\13\1\266\1\13\1\40\1"+
    "\135\1\13\1\135\1\13\1\214\1\13\1\214\1\151\1\13\1\151\1\13\1\60\1\13\1\60"+
    "\1\13\1\267\3\270\14\13\1\51\123\1\1\261\1\13\1\271\1\272\1\273\1\274\1\275"+
    "\1\276\1\277\1\153\1\300\1\153\24\1\55\13\1\114\2\1\103\13\1\51\15\13\1\152"+
    "\150\13\1\20\25\1\41\13\1\152\36\1");

  /* The ZZ_CMAP_A table has 3088 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\6\1\7\1\11\1\12\1\5\22\0\1\14\1\4\1\23\1\0\1\37\1\40\1\24\1\10\1\32"+
    "\1\33\1\31\1\17\1\36\1\20\1\15\1\27\12\13\1\30\1\25\1\41\1\26\1\42\1\43\1"+
    "\0\1\50\1\63\1\62\1\51\1\44\1\60\1\56\1\67\1\64\1\2\1\70\1\55\1\65\1\47\1"+
    "\52\1\71\1\45\1\53\1\61\1\54\1\57\1\46\1\74\1\72\1\66\1\73\1\34\1\22\1\35"+
    "\1\0\1\3\1\0\1\50\1\63\1\62\1\21\1\16\1\60\1\56\1\67\1\64\1\2\1\70\1\55\1"+
    "\65\1\47\1\52\1\71\1\45\1\53\1\61\1\54\1\57\1\46\1\74\1\72\1\66\1\73\12\0"+
    "\1\11\24\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\10\2\2\64\35\2\1\61\2\2\4\0\14"+
    "\2\16\0\5\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0\1\2\1\0\3"+
    "\2\1\0\1\2\1\0\4\2\1\0\23\2\1\0\13\2\10\0\6\2\1\0\26\2\2\0\1\2\6\0\10\2\10"+
    "\0\13\2\5\0\3\2\15\0\12\1\4\0\6\2\1\0\1\2\17\0\2\2\7\0\2\2\12\1\3\2\2\0\2"+
    "\2\1\0\16\2\15\0\11\2\13\0\1\2\16\0\12\1\6\2\4\0\2\2\4\0\1\2\5\0\6\2\4\0\1"+
    "\2\11\0\1\2\3\0\1\2\7\0\11\2\7\0\5\2\17\0\26\2\3\0\1\2\2\0\1\2\7\0\12\2\4"+
    "\0\12\1\1\2\4\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0"+
    "\1\2\15\0\2\2\1\0\1\2\5\0\6\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\17\0\4\2\1\0"+
    "\1\2\7\0\12\1\2\0\3\2\20\0\11\2\1\0\2\2\1\0\2\2\1\0\5\2\3\0\1\2\2\0\1\2\30"+
    "\0\1\2\13\0\10\2\2\0\1\2\3\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1"+
    "\0\2\2\3\0\2\2\3\0\3\2\3\0\14\2\13\0\10\2\1\0\2\2\10\0\3\2\5\0\4\2\1\0\5\2"+
    "\3\0\1\2\3\0\2\2\15\0\13\2\2\0\1\2\21\0\1\2\12\0\6\2\5\0\22\2\3\0\10\2\1\0"+
    "\11\2\1\0\1\2\2\0\7\2\11\0\1\2\1\0\2\2\14\0\12\1\7\0\2\2\1\0\1\2\2\0\2\2\1"+
    "\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0"+
    "\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\1\2\0\14\2\1\0\24\2\13\0\5\2\3\0\6\2"+
    "\4\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0\6\2\1\0\1\2\5\0\1\2"+
    "\2\0\13\2\1\0\15\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\16\2\2\0\6\2\2\0\15\2\2\0\1\2\1\0\10\2\7\0\15\2\1\0\6"+
    "\2\23\0\1\2\4\0\1\2\3\0\11\2\1\0\1\2\5\0\17\2\1\0\16\2\2\0\14\2\13\0\1\2\15"+
    "\0\7\2\7\0\16\2\15\0\2\2\12\1\3\0\3\2\11\0\4\2\1\0\4\2\3\0\2\2\11\0\10\2\1"+
    "\0\1\2\1\0\1\2\1\0\1\2\1\0\6\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0"+
    "\6\2\14\0\2\11\7\0\1\2\15\0\1\2\2\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6"+
    "\0\1\2\1\0\1\2\1\0\1\2\1\0\1\70\3\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0\1\2\4\0\2"+
    "\2\13\0\5\2\6\0\4\2\3\0\2\2\14\0\10\2\7\0\10\2\1\0\7\2\6\0\2\2\12\0\5\2\5"+
    "\0\2\2\3\0\7\2\6\0\3\2\12\1\2\2\13\0\11\2\2\0\27\2\2\0\7\2\1\0\3\2\1\0\4\2"+
    "\1\0\4\2\2\0\6\2\3\0\1\2\1\0\1\2\2\0\5\2\1\0\12\2\12\1\5\2\1\0\3\2\1\0\10"+
    "\2\4\0\7\2\3\0\1\2\3\0\2\2\1\0\1\2\3\0\2\2\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3"+
    "\2\3\0\6\2\2\0\6\2\2\0\6\2\11\0\7\2\4\0\5\2\3\0\5\2\5\0\1\2\1\0\10\2\1\0\5"+
    "\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\12\2\6\0\12\2\2\0\6\2\2\0\6\2\2\0\6\2\2\0\3"+
    "\2\3\0\14\2\1\0\16\2\1\0\2\2\1\0\2\2\1\0\10\2\6\0\4\2\4\0\16\2\2\0\1\2\1\0"+
    "\14\2\1\0\2\2\3\0\1\2\2\0\4\2\1\0\2\2\12\0\10\2\6\0\6\2\1\0\3\2\1\0\12\2\3"+
    "\0\1\2\12\0\4\2\13\0\12\1\1\2\1\0\1\2\3\0\7\2\1\0\1\2\1\0\4\2\1\0\17\2\1\0"+
    "\2\2\14\0\3\2\4\0\2\2\1\0\1\2\20\0\4\2\10\0\1\2\13\0\10\2\5\0\3\2\2\0\1\2"+
    "\2\0\2\2\2\0\4\2\1\0\14\2\1\0\1\2\1\0\7\2\1\0\21\2\1\0\4\2\2\0\10\2\1\0\7"+
    "\2\1\0\14\2\1\0\4\2\1\0\5\2\1\0\1\2\3\0\14\2\2\0\13\2\1\0\10\2\2\0\22\1\1"+
    "\0\2\2\1\0\1\2\2\0\1\2\1\0\12\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2\4\0\1\2\1"+
    "\0\1\2\1\0\1\2\1\0\3\2\1\0\2\2\1\0\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\2\2\1\0\1\2\2\0\4\2\1\0\7\2\1\0\4\2\1\0\4\2\1\0\1\2\1\0\12\2\1\0"+
    "\5\2\1\0\3\2\1\0\5\2\1\0\5\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\12\1\2\1\6\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\20\2\1\0\4\6"+
    "\1\0\1\32\13\0\6\2\1\33\1\2\2\6\1\5"+
    "\1\0\1\5\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\32\2\1\44\1\45\1\2\1\46\10\2"+
    "\2\6\1\0\2\6\1\32\1\0\1\47\14\0\1\50"+
    "\1\51\1\52\6\2\1\6\4\2\1\53\5\2\1\54"+
    "\3\2\1\55\6\2\1\56\1\2\1\57\17\2\1\60"+
    "\1\2\1\61\7\2\1\0\1\6\4\0\1\62\1\0"+
    "\1\27\1\30\1\0\3\2\1\63\7\2\1\64\1\2"+
    "\1\65\4\2\1\66\2\2\1\67\1\70\2\2\1\71"+
    "\2\2\1\72\1\2\1\73\1\74\1\75\6\2\1\76"+
    "\7\2\1\77\12\2\1\0\1\6\1\100\1\0\1\101"+
    "\1\102\2\0\1\103\1\104\3\2\1\105\3\2\1\106"+
    "\10\2\1\107\11\2\1\110\1\111\4\2\1\112\10\2"+
    "\1\113\1\2\1\114\1\115\1\0\1\116\1\117\1\0"+
    "\1\2\1\120\2\2\1\121\11\2\1\122\11\2\1\123"+
    "\2\2\1\124\1\125\7\2\1\126\1\127\1\130\2\2"+
    "\1\131\3\2\1\132\5\2\1\133\6\2\1\134\1\2"+
    "\1\135\3\2\1\136\2\2\1\137\1\140\1\2\1\141"+
    "\1\2\1\142\4\2\1\143\1\144\3\2\1\145\4\2"+
    "\1\146\4\2\1\147\5\2\1\150\3\2\1\151\1\152"+
    "\1\153\1\154\1\155\1\156\2\2\1\157\3\2\1\160"+
    "\1\161\1\2\1\162\1\2\1\163\1\164\1\2\1\165"+
    "\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\75\0\75\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\u040d\0\u044a\0\75\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9"+
    "\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\364\0\u0857\0\u0894"+
    "\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c"+
    "\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\75\0\u0e89\0\u02dc\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d"+
    "\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165"+
    "\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d"+
    "\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\172\0\u14f8"+
    "\0\u1535\0\172\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3"+
    "\0\u16e0\0\u171d\0\u175a\0\u1797\0\u175a\0\u17d4\0\u1811\0\u184e"+
    "\0\u184e\0\u188b\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc"+
    "\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\172"+
    "\0\172\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12"+
    "\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\172\0\u1e43\0\u1e80\0\u1ebd"+
    "\0\u1efa\0\u1f37\0\172\0\u1f74\0\u1fb1\0\u1fee\0\172\0\u202b"+
    "\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\172\0\u2199\0\172"+
    "\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381"+
    "\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\172"+
    "\0\u2569\0\172\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7"+
    "\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\75"+
    "\0\u28bf\0\75\0\75\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0"+
    "\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\172"+
    "\0\u2bd8\0\172\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\172\0\u2d09"+
    "\0\u2d46\0\172\0\172\0\u2d83\0\u2dc0\0\172\0\u2dfd\0\u2e3a"+
    "\0\172\0\u2e77\0\172\0\172\0\172\0\u2eb4\0\u2ef1\0\u2f2e"+
    "\0\u2f6b\0\u2fa8\0\u2fe5\0\172\0\u3022\0\u305f\0\u309c\0\u30d9"+
    "\0\u3116\0\u3153\0\u3190\0\172\0\u31cd\0\u320a\0\u3247\0\u3284"+
    "\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u342f"+
    "\0\75\0\u346c\0\75\0\75\0\u34a9\0\u34e6\0\172\0\172"+
    "\0\u3523\0\u3560\0\u359d\0\172\0\u35da\0\u3617\0\u3654\0\172"+
    "\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c"+
    "\0\172\0\u3879\0\u38b6\0\u38f3\0\u3930\0\u396d\0\u39aa\0\u39e7"+
    "\0\u3a24\0\u3a61\0\172\0\172\0\u3a9e\0\u3adb\0\u3b18\0\u3b55"+
    "\0\172\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3\0\u3d00"+
    "\0\u3d3d\0\172\0\u3d7a\0\172\0\172\0\u3db7\0\75\0\75"+
    "\0\u3df4\0\u3e31\0\172\0\u3e6e\0\u3eab\0\172\0\u3ee8\0\u3f25"+
    "\0\u3f62\0\u3f9f\0\u3fdc\0\u4019\0\u4056\0\u4093\0\u40d0\0\172"+
    "\0\u410d\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8"+
    "\0\u42f5\0\172\0\u4332\0\u436f\0\172\0\172\0\u43ac\0\u43e9"+
    "\0\u4426\0\u4463\0\u44a0\0\u44dd\0\u451a\0\172\0\75\0\75"+
    "\0\u4557\0\u4594\0\172\0\u45d1\0\u460e\0\u464b\0\172\0\u4688"+
    "\0\u46c5\0\u4702\0\u473f\0\u477c\0\172\0\u47b9\0\u47f6\0\u4833"+
    "\0\u4870\0\u48ad\0\u48ea\0\172\0\u4927\0\172\0\u4964\0\u49a1"+
    "\0\u49de\0\172\0\u4a1b\0\u4a58\0\172\0\172\0\u4a95\0\172"+
    "\0\u4ad2\0\172\0\u4b0f\0\u4b4c\0\u4b89\0\u4bc6\0\172\0\172"+
    "\0\u4c03\0\u4c40\0\u4c7d\0\172\0\u4cba\0\u4cf7\0\u4d34\0\u4d71"+
    "\0\172\0\u4dae\0\u4deb\0\u4e28\0\u4e65\0\172\0\u4ea2\0\u4edf"+
    "\0\u4f1c\0\u4f59\0\u4f96\0\172\0\u4fd3\0\u5010\0\u504d\0\172"+
    "\0\172\0\172\0\172\0\172\0\172\0\u508a\0\u50c7\0\172"+
    "\0\u5104\0\u5141\0\u517e\0\172\0\172\0\u51bb\0\172\0\u51f8"+
    "\0\172\0\172\0\u5235\0\172\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\2\1\4\1\5\1\6\1\5\1\7"+
    "\1\0\1\6\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\2\1\16\1\17\1\5\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\12\1\3\1\36\1\37\1\40"+
    "\1\15\1\41\1\42\1\43\1\44\1\3\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\3\3\1\53\1\54\2\3"+
    "\1\55\76\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\31\3\5\4\1\0\1\4\1\0\65\4"+
    "\5\0\1\5\1\56\1\5\2\0\1\56\1\0\1\56"+
    "\10\0\1\5\54\0\1\5\1\6\1\5\2\0\1\6"+
    "\1\0\1\6\10\0\1\5\47\0\5\57\1\60\1\57"+
    "\1\0\1\61\2\60\7\57\1\62\52\57\13\0\1\10"+
    "\1\63\1\64\1\65\2\0\1\66\66\0\1\64\1\67"+
    "\1\0\1\70\25\0\1\70\2\0\1\71\1\72\1\0"+
    "\1\73\1\0\1\74\1\75\1\76\1\0\1\77\15\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\3\3\1\100\2\3\1\101\1\102\1\3\1\103\14\3"+
    "\1\104\2\3\1\0\3\3\7\0\1\3\2\0\1\105"+
    "\2\0\1\3\22\0\1\105\5\3\1\106\11\3\1\107"+
    "\10\3\7\16\1\0\12\16\1\110\1\111\51\16\5\0"+
    "\1\112\1\113\1\114\2\0\1\113\1\0\1\113\106\0"+
    "\1\115\13\0\1\116\60\0\1\117\1\120\75\0\1\121"+
    "\75\0\1\122\71\0\1\123\74\0\1\124\47\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\4\3"+
    "\1\125\1\3\1\126\22\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\4\3\1\127\1\3"+
    "\1\130\12\3\1\131\7\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\132\22\0\5\3\1\132\3\3"+
    "\1\133\3\3\1\134\13\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\3\3\1\135\7\3"+
    "\1\136\11\3\1\137\3\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\140\2\0\1\3\22\0\1\140\5\3\1\141"+
    "\22\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\4\3\1\142\16\3\1\143\5\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\6\3\1\144\22\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\3\3\1\145\11\3\1\146"+
    "\13\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\6\3\1\147\12\3\1\150\7\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\4\3\1\151\13\3\1\152\10\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\6\3\1\153"+
    "\14\3\1\154\5\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\11\3\1\155\6\3\1\156"+
    "\10\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\157\22\0\3\3\1\160\1\3\1\157\1\161\5\3"+
    "\1\162\4\3\1\163\7\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\20\3\1\164\10\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\4\3\1\165\1\3\1\166\1\167\3\3\1\170"+
    "\15\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\7\3\1\171\13\3\1\172\5\3\7\60"+
    "\1\0\1\173\11\60\1\174\61\60\1\0\1\111\11\60"+
    "\1\174\52\60\10\0\1\175\64\0\6\60\1\176\1\60"+
    "\1\177\3\60\1\176\60\60\13\0\1\10\1\63\1\64"+
    "\72\0\1\64\1\67\1\0\1\65\2\0\1\66\66\0"+
    "\1\200\1\65\2\0\2\201\67\0\1\202\1\66\2\0"+
    "\2\203\67\0\1\64\1\67\125\0\1\204\45\0\1\205"+
    "\25\0\1\205\5\0\1\206\71\0\1\207\100\0\1\210"+
    "\74\0\1\211\37\0\1\212\25\0\1\212\7\0\1\213"+
    "\36\0\1\214\25\0\1\214\7\0\1\215\70\0\1\216"+
    "\25\0\3\3\7\0\1\3\2\0\1\3\2\0\1\217"+
    "\22\0\5\3\1\217\23\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\7\3\1\220\21\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\7\3\1\221\21\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\15\3\1\222\13\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\10\3\1\223\20\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\11\3\1\224\4\3"+
    "\1\225\12\3\1\0\3\3\7\0\1\3\2\0\1\3"+
    "\2\0\1\3\22\0\13\3\1\226\15\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\21\3"+
    "\1\227\7\3\6\16\1\230\5\16\1\230\60\16\7\0"+
    "\1\114\66\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\11\3\1\231\17\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\11\3\1\232"+
    "\17\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\21\3\1\233\7\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\3\3\1\234"+
    "\25\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\11\3\1\235\17\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\2\3\1\236"+
    "\26\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\11\3\1\237\17\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\15\3\1\240"+
    "\4\3\1\241\6\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\11\3\1\242\17\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\10\3\1\243\20\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\244\2\0\1\3\22\0\1\244\7\3\1\245\20\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\4\3\1\246\11\3\1\247\12\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\13\3"+
    "\1\250\15\3\1\0\3\3\7\0\1\3\2\0\1\3"+
    "\2\0\1\3\22\0\7\3\1\251\21\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\252\2\0\1\3\22\0\1\252"+
    "\30\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\12\3\1\253\16\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\14\3\1\254"+
    "\3\3\1\255\10\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\256\2\0\1\3\22\0\1\256\30\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\7\3"+
    "\1\257\21\3\1\0\3\3\7\0\1\3\2\0\1\3"+
    "\2\0\1\3\22\0\10\3\1\260\20\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\2\3"+
    "\1\261\26\3\1\0\3\3\7\0\1\3\2\0\1\3"+
    "\2\0\1\3\22\0\12\3\1\262\14\3\1\263\1\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\264"+
    "\22\0\3\3\1\265\1\3\1\264\13\3\1\266\7\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\4\3\1\267\24\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\4\3\1\270\24\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\3\3\1\271\25\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\6\3\1\272\1\3"+
    "\1\273\20\3\1\0\3\3\7\0\1\3\2\0\1\3"+
    "\2\0\1\3\22\0\15\3\1\274\3\3\1\275\7\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\25\3\1\276\3\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\3\3\1\277\25\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\300"+
    "\22\0\5\3\1\300\1\3\1\301\21\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\15\3"+
    "\1\302\2\3\1\303\10\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\304\2\0\1\3\22\0\1\304\5\3\1\305"+
    "\11\3\1\306\10\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\17\3\1\307\11\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\20\3\1\310\10\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\20\3\1\311\10\3\2\0"+
    "\1\312\13\0\1\312\2\0\1\312\22\0\31\312\6\60"+
    "\1\176\5\60\1\176\66\60\1\176\1\60\1\111\3\60"+
    "\1\176\5\60\1\174\54\60\1\313\4\60\1\0\1\111"+
    "\5\60\1\313\2\60\1\313\1\174\21\60\31\313\13\0"+
    "\1\200\1\201\73\0\1\202\1\203\75\0\1\115\30\0"+
    "\1\314\43\0\1\117\27\0\1\315\103\0\1\316\41\0"+
    "\1\317\27\0\1\317\40\0\1\320\136\0\1\321\32\0"+
    "\1\123\74\0\1\322\74\0\1\124\74\0\1\323\134\0"+
    "\1\324\20\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\325\22\0\5\3\1\325\12\3\1\326\4\3\1\327"+
    "\3\3\1\0\3\3\7\0\1\3\2\0\1\330\2\0"+
    "\1\3\22\0\1\330\30\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\331\2\0\1\3\22\0\1\331\30\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\20\3\1\332\10\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\20\3\1\333\10\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\17\3\1\334\11\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\335\2\0\1\3\22\0\1\335\30\3\6\16\1\230"+
    "\5\16\1\230\5\16\1\110\1\111\51\16\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\13\3"+
    "\1\336\15\3\1\0\3\3\7\0\1\3\2\0\1\3"+
    "\2\0\1\3\22\0\4\3\1\337\24\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\340\2\0\1\3\22\0\1\340"+
    "\30\3\1\0\2\3\1\341\7\0\1\3\2\0\1\342"+
    "\2\0\1\3\22\0\1\342\30\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\4\3\1\343"+
    "\24\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\6\3\1\344\22\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\20\3\1\345"+
    "\10\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\3\3\1\346\25\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\22\3\1\347"+
    "\6\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\7\3\1\350\21\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\20\3\1\351"+
    "\10\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\352\22\0\5\3\1\352\3\3\1\353\17\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\3\3\1\354\25\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\12\3\1\355\16\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\3\3\1\356\25\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\20\3\1\357\10\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\6\3\1\360\22\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\10\3\1\361\20\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\21\3\1\362\7\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\363\2\0\1\3\22\0\1\363\30\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\3\3"+
    "\1\364\25\3\1\0\3\3\7\0\1\3\2\0\1\365"+
    "\2\0\1\3\22\0\1\365\30\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\20\3\1\366"+
    "\10\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\10\3\1\367\5\3\1\370\12\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\25\3\1\371\3\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\7\3\1\372\21\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\3\3\1\373\25\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\374\22\0\5\3\1\374\23\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\13\3\1\375\15\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\376\2\0\1\3\22\0\1\376\6\3\1\377\21\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\10\3\1\u0100\20\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\15\3\1\u0101\13\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\6\3\1\u0102\2\3\1\u0103\17\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\u0104\22\0\5\3"+
    "\1\u0104\23\3\1\0\3\3\7\0\1\3\2\0\1\3"+
    "\2\0\1\3\22\0\4\3\1\u0105\24\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\3\3"+
    "\1\u0106\25\3\1\0\3\3\7\0\1\3\2\0\1\3"+
    "\2\0\1\3\22\0\16\3\1\u0107\12\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\10\3"+
    "\1\u0108\1\3\1\u0109\16\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\2\3\1\u010a\1\u010b"+
    "\25\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\11\3\1\u010c\17\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\10\3\1\u010d"+
    "\20\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\11\3\1\u010e\17\3\2\0\1\312\5\0"+
    "\1\u010f\5\0\1\312\2\0\1\312\22\0\31\312\2\60"+
    "\1\313\4\60\1\0\1\u0110\5\60\1\313\2\60\1\313"+
    "\1\174\21\60\31\313\15\0\1\u0111\125\0\1\u0112\43\0"+
    "\1\u0113\74\0\1\u0114\75\0\1\u0115\25\0\1\u0115\111\0"+
    "\1\u0116\14\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\6\3\1\u0117\22\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\14\3\1\u0118"+
    "\14\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\7\3\1\u0119\21\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\20\3\1\u011a"+
    "\10\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\7\3\1\u011b\21\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\21\3\1\u011c"+
    "\7\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\21\3\1\u011d\7\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\11\3\1\u011e"+
    "\17\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\3\3\1\u011f\25\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\u0120\2\0\1\3\22\0\1\u0120\30\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\10\3\1\u0121\20\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\20\3\1\u0122\10\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\3\3\1\u0123\25\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\16\3\1\u0124\12\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\12\3\1\u0125\16\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\16\3\1\u0126\12\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\4\3\1\u0127\24\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\6\3\1\u0128\22\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\u0129"+
    "\22\0\5\3\1\u0129\23\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\u012a\2\0\1\3\22\0\1\u012a\30\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\16\3\1\u012b\12\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\7\3\1\u012c\21\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\4\3\1\u012d\24\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\21\3\1\u012e\7\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\20\3\1\u012f\10\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\13\3\1\u0130\15\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\11\3\1\u0131\17\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\4\3\1\u0132\24\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\24\3\1\u0133\4\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\10\3\1\u0134\20\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\3\3\1\u0135\6\3\1\u0136\16\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\20\3\1\u0137"+
    "\10\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\4\3\1\u0138\24\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\12\3\1\u0139"+
    "\16\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\7\3\1\u013a\21\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\20\3\1\u013b"+
    "\10\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\21\3\1\u013c\7\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\10\3\1\u013d"+
    "\20\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\20\3\1\u013e\10\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\u013f\2\0\1\3\22\0\1\u013f\30\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\7\3\1\u0140\21\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\4\3\1\u0141\24\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\10\3\1\u0142\20\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\20\3\1\u0143\10\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\u0144\2\0\1\3"+
    "\22\0\1\u0144\30\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\u0145\2\0\1\3\22\0\1\u0145\30\3\5\u0146\1\0"+
    "\1\u0146\1\0\1\u0146\2\0\62\u0146\15\0\1\u0147\74\0"+
    "\1\u0148\75\0\1\u0149\25\0\1\u0149\31\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\6\3\1\u014a"+
    "\22\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\14\3\1\u014b\14\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\3\3\1\u014c"+
    "\25\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\4\3\1\u014d\24\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\u014e\2\0\1\3\22\0\1\u014e\30\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\15\3\1\u014f\13\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\20\3\1\u0150\10\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\3\3\1\u0151\25\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\16\3\1\u0152\12\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\4\3\1\u0153\24\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\3\3\1\u0154\25\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\23\3\1\u0155\5\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\10\3\1\u0156\20\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\3\3\1\u0157\25\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\10\3\1\u0158\20\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\4\3\1\u0159\24\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\21\3\1\u015a\7\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\10\3\1\u015b\20\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\u015c\2\0\1\3\22\0\1\u015c\30\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\3\3\1\u015d\6\3\1\u015e\16\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\7\3\1\u015f"+
    "\21\3\1\0\3\3\7\0\1\3\2\0\1\u0160\2\0"+
    "\1\3\22\0\1\u0160\30\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\16\3\1\u0161\12\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\10\3\1\u0162\20\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\u0163\2\0\1\3\22\0\1\u0163\30\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\3\3\1\u0164\25\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\10\3\1\u0165\20\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\10\3\1\u0166\20\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\16\3\1\u0167\12\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\u0168\2\0\1\3\22\0"+
    "\1\u0168\30\3\1\0\3\3\7\0\1\3\2\0\1\u0169"+
    "\2\0\1\3\22\0\1\u0169\30\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\15\3\1\u016a"+
    "\13\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\16\3\1\u016b\12\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\4\3\1\u016c"+
    "\24\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\10\3\1\u016d\20\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\16\3\1\u016e"+
    "\12\3\10\0\1\u016f\101\0\1\u0170\60\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\12\3\1\u0171"+
    "\16\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\4\3\1\u0172\24\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\11\3\1\u0173"+
    "\17\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\20\3\1\u0174\10\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\11\3\1\u0175"+
    "\17\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\10\3\1\u0176\20\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\u0177\2\0\1\3\22\0\1\u0177\30\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\10\3\1\u0178\20\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\21\3\1\u0179\7\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\7\3\1\u017a\21\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\6\3\1\u017b\22\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\4\3\1\u017c\24\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\11\3\1\u017d\17\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\4\3\1\u017e\24\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\10\3\1\u017f\20\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\3\3\1\u0180\25\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\13\3\1\u0181\15\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\13\3\1\u0182\15\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\7\3\1\u0183\21\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\26\3\1\u0184\2\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\10\3\1\u0185\20\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\7\3\1\u0186\21\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\15\3\1\u0187\13\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\20\3\1\u0188\10\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\10\3\1\u0189\20\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\7\3\1\u018a\21\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\20\3\1\u018b\10\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\10\3\1\u018c\20\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\21\3\1\u018d\7\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\u018e\2\0\1\3"+
    "\22\0\1\u018e\30\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\7\3\1\u018f\21\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\11\3\1\u0190\17\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\6\3\1\u0191\22\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\u0192\2\0\1\3\22\0"+
    "\1\u0192\30\3\1\0\3\3\7\0\1\3\2\0\1\3"+
    "\2\0\1\3\22\0\7\3\1\u0193\21\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\4\3"+
    "\1\u0194\24\3\1\0\3\3\7\0\1\3\2\0\1\u0195"+
    "\2\0\1\3\22\0\1\u0195\30\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\6\3\1\u0196"+
    "\22\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\7\3\1\u0197\21\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\11\3\1\u0198"+
    "\17\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\10\3\1\u0199\20\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\u019a\2\0\1\3\22\0\1\u019a\30\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\3\2\0\1\3"+
    "\22\0\15\3\1\u019b\13\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\u019c\2\0\1\3\22\0\1\u019c\30\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\6\3\1\u019d\22\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\u019e\2\0\1\3\22\0\1\u019e\30\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\u019f\2\0\1\3\22\0\1\u019f"+
    "\30\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\20\3\1\u01a0\10\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\10\3\1\u01a1"+
    "\20\3\1\0\3\3\7\0\1\3\2\0\1\u01a2\2\0"+
    "\1\3\22\0\1\u01a2\30\3\1\0\3\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\22\0\6\3\1\u01a3\22\3"+
    "\1\0\3\3\7\0\1\3\2\0\1\u01a4\2\0\1\3"+
    "\22\0\1\u01a4\30\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\4\3\1\u01a5\24\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\3\3\1\u01a6\25\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\20\3\1\u01a7\10\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\17\3\1\u01a8\11\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\3\3\1\u01a9\25\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\3\3\1\u01aa\25\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\10\3\1\u01ab\20\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\u01ac\22\0"+
    "\5\3\1\u01ac\23\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\20\3\1\u01ad\10\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\13\3\1\u01ae\15\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\3\3\1\u01af\25\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\7\3\1\u01b0\21\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\16\3\1\u01b1\12\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\7\3\1\u01b2\21\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\3\3\1\u01b3\25\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\u01b4\22\0"+
    "\5\3\1\u01b4\23\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\21\3\1\u01b5\7\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\3\3\1\u01b6\25\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\11\3\1\u01b7\17\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\3\2\0\1\3\22\0"+
    "\10\3\1\u01b8\20\3\1\0\3\3\7\0\1\3\2\0"+
    "\1\3\2\0\1\3\22\0\6\3\1\u01b9\22\3\1\0"+
    "\3\3\7\0\1\3\2\0\1\u01ba\2\0\1\3\22\0"+
    "\1\u01ba\30\3\1\0\3\3\7\0\1\3\2\0\1\3"+
    "\2\0\1\3\22\0\6\3\1\u01bb\22\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\15\3"+
    "\1\u01bc\13\3\1\0\3\3\7\0\1\3\2\0\1\3"+
    "\2\0\1\3\22\0\10\3\1\u01bd\20\3\1\0\3\3"+
    "\7\0\1\3\2\0\1\3\2\0\1\3\22\0\15\3"+
    "\1\u01be\13\3\1\0\3\3\7\0\1\3\2\0\1\u01bf"+
    "\2\0\1\3\22\0\1\u01bf\30\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\13\3\1\u01c0"+
    "\15\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\u01c1\22\0\5\3\1\u01c1\23\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\3\3\1\u01c2"+
    "\25\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\20\3\1\u01c3\10\3\1\0\3\3\7\0"+
    "\1\3\2\0\1\3\2\0\1\3\22\0\15\3\1\u01c4"+
    "\13\3\1\0\3\3\7\0\1\3\2\0\1\3\2\0"+
    "\1\3\22\0\16\3\1\u01c5\12\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21106];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\2\11\7\1\7\11\2\1\1\11"+
    "\20\1\1\0\4\1\1\0\1\1\13\0\11\1\1\11"+
    "\1\1\1\0\11\11\50\1\1\0\3\1\1\0\1\1"+
    "\14\0\73\1\1\0\1\1\4\0\1\11\1\0\2\11"+
    "\1\0\72\1\1\0\1\1\1\11\1\0\2\11\2\0"+
    "\57\1\1\0\2\11\1\0\45\1\2\11\125\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[453];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _FortranLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 119: break;
          case 2: 
            { return IDENTIFIER;
            }
          case 120: break;
          case 3: 
            { return LINE_COMMENT;
            }
          case 121: break;
          case 4: 
            { return EOL;
            }
          case 122: break;
          case 5: 
            { return WHITE_SPACE;
            }
          case 123: break;
          case 6: 
            { return STRING_LITERAL;
            }
          case 124: break;
          case 7: 
            { return INTEGER_LITERAL;
            }
          case 125: break;
          case 8: 
            { return DOT;
            }
          case 126: break;
          case 9: 
            { return PLUS;
            }
          case 127: break;
          case 10: 
            { return MINUS;
            }
          case 128: break;
          case 11: 
            { return AMP;
            }
          case 129: break;
          case 12: 
            { return EQ;
            }
          case 130: break;
          case 13: 
            { return DIV;
            }
          case 131: break;
          case 14: 
            { return COLON;
            }
          case 132: break;
          case 15: 
            { return MUL;
            }
          case 133: break;
          case 16: 
            { return LPAR;
            }
          case 134: break;
          case 17: 
            { return RPAR;
            }
          case 135: break;
          case 18: 
            { return LBRACKET;
            }
          case 136: break;
          case 19: 
            { return RBRACKET;
            }
          case 137: break;
          case 20: 
            { return COMMA;
            }
          case 138: break;
          case 21: 
            { return DOLLAR;
            }
          case 139: break;
          case 22: 
            { return PERC;
            }
          case 140: break;
          case 23: 
            { return LT;
            }
          case 141: break;
          case 24: 
            { return GT;
            }
          case 142: break;
          case 25: 
            { return QUEST;
            }
          case 143: break;
          case 26: 
            { return FLOATING_POINT_LITERAL;
            }
          case 144: break;
          case 27: 
            { return DO;
            }
          case 145: break;
          case 28: 
            { return EQEQ;
            }
          case 146: break;
          case 29: 
            { return POINTER_ASSMNT;
            }
          case 147: break;
          case 30: 
            { return NEQ;
            }
          case 148: break;
          case 31: 
            { return DIVDIV;
            }
          case 149: break;
          case 32: 
            { return COLONCOLON;
            }
          case 150: break;
          case 33: 
            { return POWER;
            }
          case 151: break;
          case 34: 
            { return LE;
            }
          case 152: break;
          case 35: 
            { return GE;
            }
          case 153: break;
          case 36: 
            { return ID;
            }
          case 154: break;
          case 37: 
            { return IN;
            }
          case 155: break;
          case 38: 
            { return IF;
            }
          case 156: break;
          case 39: 
            { return DOUBLE_PRECISION_LITERAL;
            }
          case 157: break;
          case 40: 
            { return END;
            }
          case 158: break;
          case 41: 
            { return EOR;
            }
          case 159: break;
          case 42: 
            { return ERR;
            }
          case 160: break;
          case 43: 
            { return NML;
            }
          case 161: break;
          case 44: 
            { return OUT;
            }
          case 162: break;
          case 45: 
            { return REC;
            }
          case 163: break;
          case 46: 
            { return USE;
            }
          case 164: break;
          case 47: 
            { return FMT;
            }
          case 165: break;
          case 48: 
            { return PAD;
            }
          case 166: break;
          case 49: 
            { return POS;
            }
          case 167: break;
          case 50: 
            { return OR;
            }
          case 168: break;
          case 51: 
            { return ELSE;
            }
          case 169: break;
          case 52: 
            { return BINDNAME;
            }
          case 170: break;
          case 53: 
            { return NONE;
            }
          case 171: break;
          case 54: 
            { return ONLY;
            }
          case 172: break;
          case 55: 
            { return READ;
            }
          case 173: break;
          case 56: 
            { return REAL;
            }
          case 174: break;
          case 57: 
            { return THEN;
            }
          case 175: break;
          case 58: 
            { return UNIT;
            }
          case 176: break;
          case 59: 
            { return SAVE;
            }
          case 177: break;
          case 60: 
            { return SIGN;
            }
          case 178: break;
          case 61: 
            { return SIZE;
            }
          case 179: break;
          case 62: 
            { return BIND;
            }
          case 180: break;
          case 63: 
            { return KIND;
            }
          case 181: break;
          case 64: 
            { return LOGICAL_EQ;
            }
          case 182: break;
          case 65: 
            { return NOT;
            }
          case 183: break;
          case 66: 
            { return AND;
            }
          case 184: break;
          case 67: 
            { return ENDDO;
            }
          case 185: break;
          case 68: 
            { return ENDIF;
            }
          case 186: break;
          case 69: 
            { return DELIM;
            }
          case 187: break;
          case 70: 
            { return VALUE;
            }
          case 188: break;
          case 71: 
            { return ROUND;
            }
          case 189: break;
          case 72: 
            { return BLANK;
            }
          case 190: break;
          case 73: 
            { return INOUT;
            }
          case 191: break;
          case 74: 
            { return IOMSG;
            }
          case 192: break;
          case 75: 
            { return PRINT;
            }
          case 193: break;
          case 76: 
            { return WRITE;
            }
          case 194: break;
          case 77: 
            { return WHILE;
            }
          case 195: break;
          case 78: 
            { return LOGICAL_NEQ;
            }
          case 196: break;
          case 79: 
            { return TRUE_KEYWORD;
            }
          case 197: break;
          case 80: 
            { return ELSEIF;
            }
          case 198: break;
          case 81: 
            { return DOUBLE;
            }
          case 199: break;
          case 82: 
            { return TARGET;
            }
          case 200: break;
          case 83: 
            { return INTENT;
            }
          case 201: break;
          case 84: 
            { return IOSTAT;
            }
          case 202: break;
          case 85: 
            { return IMPORT;
            }
          case 203: break;
          case 86: 
            { return PUBLIC;
            }
          case 204: break;
          case 87: 
            { return DEFOPERATOR;
            }
          case 205: break;
          case 88: 
            { return FALSE_KEYWORD;
            }
          case 206: break;
          case 89: 
            { return DECIMAL;
            }
          case 207: break;
          case 90: 
            { return ADVANCE;
            }
          case 208: break;
          case 91: 
            { return LOGICAL;
            }
          case 209: break;
          case 92: 
            { return COMPLEX;
            }
          case 210: break;
          case 93: 
            { return INTEGER;
            }
          case 211: break;
          case 94: 
            { return POINTER;
            }
          case 212: break;
          case 95: 
            { return PROGRAM;
            }
          case 213: break;
          case 96: 
            { return PRIVATE;
            }
          case 214: break;
          case 97: 
            { return EXTERNAL;
            }
          case 215: break;
          case 98: 
            { return VOLATILE;
            }
          case 216: break;
          case 99: 
            { return OPERATOR;
            }
          case 217: break;
          case 100: 
            { return OPTIONAL;
            }
          case 218: break;
          case 101: 
            { return CONTINUE;
            }
          case 219: break;
          case 102: 
            { return IMPLICIT;
            }
          case 220: break;
          case 103: 
            { return DIMENSION;
            }
          case 221: break;
          case 104: 
            { return FORMATTED;
            }
          case 222: break;
          case 105: 
            { return CHARACTER;
            }
          case 223: break;
          case 106: 
            { return INTRINSIC;
            }
          case 224: break;
          case 107: 
            { return PARAMETER;
            }
          case 225: break;
          case 108: 
            { return PRECISION;
            }
          case 226: break;
          case 109: 
            { return PROTECTED;
            }
          case 227: break;
          case 110: 
            { return ENDPROGRAM;
            }
          case 228: break;
          case 111: 
            { return ASSIGNMENT;
            }
          case 229: break;
          case 112: 
            { return CONTIGUOUS;
            }
          case 230: break;
          case 113: 
            { return CONCURRENT;
            }
          case 231: break;
          case 114: 
            { return ALLOCATABLE;
            }
          case 232: break;
          case 115: 
            { return UNFORMATTED;
            }
          case 233: break;
          case 116: 
            { return CODIMENSION;
            }
          case 234: break;
          case 117: 
            { return ASYNCHRONOUS;
            }
          case 235: break;
          case 118: 
            { return NON_INTRINSIC;
            }
          case 236: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
