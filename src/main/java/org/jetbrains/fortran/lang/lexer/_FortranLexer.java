/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.jetbrains.fortran.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import java.util.Stack;

import static org.jetbrains.fortran.lang.FortranTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>/home/sergei/CS/fortran-plugin/src/main/java/org/jetbrains/fortran/lang/lexer/FortranLexer.flex</tt>
 */
class _FortranLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13792 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\3\12\1"+
    "\14\3\12\1\15\24\12\1\16\1\17\1\20\10\1\1\21\1\22\1\12\1\23\4\12\1\24\10\12"+
    "\1\25\12\12\1\26\1\12\1\27\1\26\1\12\1\30\4\1\1\12\1\31\1\32\2\1\2\12\1\31"+
    "\1\1\1\33\1\26\5\12\1\34\1\35\1\36\1\1\1\37\1\12\1\1\1\40\5\12\1\41\1\42\1"+
    "\43\1\12\1\31\1\44\1\12\1\45\1\46\1\1\1\12\1\47\4\1\1\12\1\50\4\1\1\51\2\12"+
    "\1\52\1\1\1\53\1\54\1\26\1\55\1\56\1\57\1\60\1\61\1\62\1\54\1\17\1\63\1\56"+
    "\1\57\1\64\1\1\1\65\1\66\1\67\1\70\1\23\1\57\1\71\1\1\1\72\1\54\1\73\1\74"+
    "\1\56\1\57\1\71\1\1\1\62\1\54\1\42\1\75\1\76\1\77\1\100\1\1\1\72\1\66\1\1"+
    "\1\101\1\37\1\57\1\52\1\1\1\102\1\54\1\1\1\101\1\37\1\57\1\103\1\1\1\61\1"+
    "\54\1\104\1\101\1\37\1\12\1\105\1\61\1\106\1\54\1\107\1\110\1\111\1\12\1\112"+
    "\1\113\1\1\1\66\1\1\1\26\2\12\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\2\1\1\72\1\1\1\115\1\1\1\124\1\12\1\125\1\1\1\126\7\1\2\12\1"+
    "\31\1\106\1\115\1\127\1\130\1\131\1\132\1\115\2\12\1\133\2\12\1\134\24\12"+
    "\1\135\1\136\2\12\1\135\2\12\1\137\1\140\1\13\3\12\1\140\3\12\1\31\2\1\1\12"+
    "\1\1\5\12\1\141\1\26\45\12\1\142\1\12\1\26\1\31\4\12\1\31\1\143\1\144\1\17"+
    "\1\12\1\17\1\12\1\17\1\144\1\72\3\12\1\145\1\1\1\146\1\115\2\1\1\115\5\12"+
    "\1\30\2\12\1\147\4\12\1\41\1\12\1\150\2\1\1\66\1\12\1\151\1\50\2\12\1\152"+
    "\1\12\1\100\1\115\2\1\1\12\1\113\3\12\1\50\2\1\2\115\1\153\5\1\1\110\2\12"+
    "\1\145\1\154\1\115\2\1\1\155\1\12\1\156\1\43\2\12\1\41\1\1\2\12\1\145\1\1"+
    "\1\157\1\43\1\12\1\151\6\1\1\160\1\161\14\12\4\1\21\12\1\141\2\12\1\141\1"+
    "\162\1\12\1\151\3\12\1\163\1\164\1\165\1\125\1\164\7\1\1\166\1\1\1\125\6\1"+
    "\1\167\1\170\1\171\1\172\1\173\3\1\1\174\147\1\2\12\1\150\2\12\1\150\10\12"+
    "\1\175\1\176\2\12\1\133\3\12\1\177\1\1\1\12\1\113\4\200\4\1\1\106\35\1\1\201"+
    "\2\1\1\202\1\26\4\12\1\203\1\26\4\12\1\134\1\110\1\12\1\151\1\26\4\12\1\150"+
    "\1\1\1\12\1\31\3\1\1\12\40\1\133\12\1\41\4\1\135\12\1\41\2\1\10\12\1\125\4"+
    "\1\2\12\1\151\20\12\1\125\1\12\1\204\1\1\2\12\1\150\1\106\1\12\1\151\4\12"+
    "\1\41\2\1\1\205\1\206\5\12\1\207\1\12\1\151\1\30\3\1\1\205\1\210\1\12\1\32"+
    "\1\1\3\12\1\145\1\206\2\12\1\145\1\1\1\115\1\1\1\211\1\43\1\12\1\41\1\12\1"+
    "\113\1\1\1\12\1\125\1\51\2\12\1\32\1\106\1\115\1\212\1\213\2\12\1\47\1\1\1"+
    "\214\1\115\1\12\1\215\3\12\1\216\1\217\1\220\1\31\1\67\1\221\1\222\1\200\2"+
    "\12\1\134\1\41\7\12\1\32\1\115\72\12\1\145\1\12\1\223\2\12\1\152\20\1\26\12"+
    "\1\151\6\12\1\100\2\1\1\113\1\224\1\57\1\225\1\226\6\12\1\17\1\1\1\155\25"+
    "\12\1\151\1\1\4\12\1\206\2\12\1\30\2\1\1\152\7\1\1\212\7\12\1\125\1\1\1\115"+
    "\1\26\1\31\1\26\1\31\1\227\4\12\1\150\1\230\1\231\2\1\1\232\1\12\1\13\1\233"+
    "\2\151\2\1\7\12\1\31\30\1\1\12\1\125\3\12\1\72\2\1\2\12\1\1\1\12\1\234\2\12"+
    "\1\41\1\12\1\151\2\12\1\235\3\1\11\12\1\151\1\115\5\1\2\12\1\30\3\12\1\145"+
    "\11\1\23\12\1\113\1\12\1\41\1\30\11\1\1\236\2\12\1\237\1\12\1\41\1\12\1\113"+
    "\1\12\1\150\4\1\1\12\1\240\1\12\1\41\1\12\1\100\4\1\3\12\1\241\4\1\1\72\1"+
    "\242\1\12\1\145\2\1\1\12\1\125\1\12\1\125\2\1\1\124\1\12\1\50\1\1\3\12\1\41"+
    "\1\12\1\41\1\12\1\32\1\12\1\17\6\1\4\12\1\47\3\1\3\12\1\32\3\12\1\32\60\1"+
    "\1\155\2\12\1\30\2\1\1\66\1\1\1\155\2\12\2\1\1\12\1\47\1\115\1\155\1\12\1"+
    "\113\1\66\1\1\2\12\1\243\1\155\2\12\1\32\1\244\1\245\2\1\1\12\1\23\1\152\5"+
    "\1\1\246\1\247\1\47\2\12\1\150\1\1\1\115\1\74\1\56\1\57\1\71\1\1\1\250\1\17"+
    "\21\1\3\12\1\1\1\251\1\115\12\1\2\12\1\150\2\1\1\252\2\1\3\12\1\1\1\253\1"+
    "\115\2\1\2\12\1\31\1\1\1\115\3\1\1\12\1\100\1\1\1\115\26\1\4\12\1\115\1\106"+
    "\34\1\3\12\1\47\20\1\71\12\1\100\16\1\14\12\1\145\53\1\2\12\1\150\75\1\44"+
    "\12\1\113\33\1\43\12\1\47\1\12\1\150\1\115\6\1\1\12\1\151\1\1\3\12\1\1\1\145"+
    "\1\115\1\155\1\254\1\12\67\1\4\12\1\50\1\72\3\1\1\155\6\1\1\17\77\1\6\12\1"+
    "\31\1\125\1\47\1\100\66\1\5\12\1\212\3\12\1\144\1\255\1\256\1\257\3\12\1\260"+
    "\1\261\1\12\1\262\1\263\1\37\24\12\1\264\1\12\1\37\1\134\1\12\1\134\1\12\1"+
    "\212\1\12\1\212\1\150\1\12\1\150\1\12\1\57\1\12\1\57\1\12\1\265\3\266\14\12"+
    "\1\50\123\1\1\257\1\12\1\267\1\270\1\271\1\272\1\273\1\274\1\275\1\152\1\276"+
    "\1\152\24\1\55\12\1\113\2\1\103\12\1\50\15\12\1\151\150\12\1\17\25\1\41\12"+
    "\1\151\36\1");

  /* The ZZ_CMAP_A table has 3056 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\17\1\4\1\0\1\5\1\6\22\0\1\10\1\3\1\20\1\0\1\33\1\34\1\35\1\21\1\26"+
    "\1\27\1\25\1\13\1\32\1\14\1\11\1\23\12\7\1\24\1\36\1\37\1\22\1\40\1\41\1\0"+
    "\1\46\2\2\1\47\1\42\1\56\1\54\1\63\1\60\2\2\1\53\1\62\1\45\1\50\1\61\1\43"+
    "\1\51\1\57\1\52\1\55\1\44\4\2\1\30\1\16\1\31\1\0\1\1\1\0\1\46\2\2\1\15\1\12"+
    "\1\56\1\54\1\63\1\60\2\2\1\53\1\62\1\45\1\50\1\61\1\43\1\51\1\57\1\52\1\55"+
    "\1\44\4\2\17\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\10\2\2\60\35\2\1\57\2\2\4"+
    "\0\14\2\16\0\5\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0\1\2\1"+
    "\0\3\2\1\0\1\2\1\0\4\2\1\0\23\2\1\0\13\2\10\0\6\2\1\0\26\2\2\0\1\2\6\0\10"+
    "\2\10\0\13\2\5\0\3\2\15\0\12\1\4\0\6\2\1\0\1\2\17\0\2\2\7\0\2\2\12\1\3\2\2"+
    "\0\2\2\1\0\16\2\15\0\11\2\13\0\1\2\16\0\12\1\6\2\4\0\2\2\4\0\1\2\5\0\6\2\4"+
    "\0\1\2\11\0\1\2\3\0\1\2\7\0\11\2\7\0\5\2\17\0\26\2\3\0\1\2\2\0\1\2\7\0\12"+
    "\2\4\0\12\1\1\2\4\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2"+
    "\20\0\1\2\15\0\2\2\1\0\1\2\5\0\6\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\17\0\4"+
    "\2\1\0\1\2\7\0\12\1\2\0\3\2\20\0\11\2\1\0\2\2\1\0\2\2\1\0\5\2\3\0\1\2\2\0"+
    "\1\2\30\0\1\2\13\0\10\2\2\0\1\2\3\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1"+
    "\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0\14\2\13\0\10\2\1\0\2\2\10\0\3\2\5\0\4\2"+
    "\1\0\5\2\3\0\1\2\3\0\2\2\15\0\13\2\2\0\1\2\21\0\1\2\12\0\6\2\5\0\22\2\3\0"+
    "\10\2\1\0\11\2\1\0\1\2\2\0\7\2\11\0\1\2\1\0\2\2\14\0\12\1\7\0\2\2\1\0\1\2"+
    "\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1"+
    "\0\4\2\1\0\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\1\2\0\14\2\1\0\24\2\13\0\5"+
    "\2\3\0\6\2\4\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0\6\2\1\0\1"+
    "\2\5\0\1\2\2\0\13\2\1\0\15\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\1\2\1\0\4"+
    "\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\16\2\2\0\6\2\2\0\15\2\2\0\1\2\1\0\10\2\7\0"+
    "\15\2\1\0\6\2\23\0\1\2\4\0\1\2\3\0\11\2\1\0\1\2\5\0\17\2\1\0\16\2\2\0\14\2"+
    "\13\0\1\2\15\0\7\2\7\0\16\2\15\0\2\2\12\1\3\0\3\2\11\0\4\2\1\0\4\2\3\0\2\2"+
    "\11\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\6\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2"+
    "\3\0\4\2\2\0\6\2\5\0\1\2\15\0\1\2\2\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2"+
    "\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0\1\2\4\0\2\2"+
    "\13\0\5\2\6\0\4\2\3\0\2\2\14\0\10\2\7\0\10\2\1\0\7\2\6\0\2\2\12\0\5\2\5\0"+
    "\2\2\3\0\7\2\6\0\3\2\12\1\2\2\13\0\11\2\2\0\27\2\2\0\7\2\1\0\3\2\1\0\4\2\1"+
    "\0\4\2\2\0\6\2\3\0\1\2\1\0\1\2\2\0\5\2\1\0\12\2\12\1\5\2\1\0\3\2\1\0\10\2"+
    "\4\0\7\2\3\0\1\2\3\0\2\2\1\0\1\2\3\0\2\2\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3\2"+
    "\3\0\6\2\2\0\6\2\2\0\6\2\11\0\7\2\4\0\5\2\3\0\5\2\5\0\1\2\1\0\10\2\1\0\5\2"+
    "\1\0\1\2\1\0\2\2\1\0\2\2\1\0\12\2\6\0\12\2\2\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2"+
    "\3\0\14\2\1\0\16\2\1\0\2\2\1\0\2\2\1\0\10\2\6\0\4\2\4\0\16\2\2\0\1\2\1\0\14"+
    "\2\1\0\2\2\3\0\1\2\2\0\4\2\1\0\2\2\12\0\10\2\6\0\6\2\1\0\3\2\1\0\12\2\3\0"+
    "\1\2\12\0\4\2\13\0\12\1\1\2\1\0\1\2\3\0\7\2\1\0\1\2\1\0\4\2\1\0\17\2\1\0\2"+
    "\2\14\0\3\2\4\0\2\2\1\0\1\2\20\0\4\2\10\0\1\2\13\0\10\2\5\0\3\2\2\0\1\2\2"+
    "\0\2\2\2\0\4\2\1\0\14\2\1\0\1\2\1\0\7\2\1\0\21\2\1\0\4\2\2\0\10\2\1\0\7\2"+
    "\1\0\14\2\1\0\4\2\1\0\5\2\1\0\1\2\3\0\14\2\2\0\13\2\1\0\10\2\2\0\22\1\1\0"+
    "\2\2\1\0\1\2\2\0\1\2\1\0\12\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2\4\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\3\2\1\0\2\2\1\0\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1"+
    "\2\1\0\2\2\1\0\1\2\2\0\4\2\1\0\7\2\1\0\4\2\1\0\4\2\1\0\1\2\1\0\12\2\1\0\5"+
    "\2\1\0\3\2\1\0\5\2\1\0\5\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\2\1\4\1\5"+
    "\1\1\1\6\1\7\2\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\3\1\1\31\1\0\1\32"+
    "\13\0\2\1\3\10\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\1\1\42\1\1\1\32\1\0\1\43"+
    "\14\0\1\44\1\1\2\10\2\1\4\0\1\45\1\0"+
    "\1\26\1\27\1\0\2\1\1\46\1\47\1\1\1\50"+
    "\1\0\1\51\1\52\2\0\1\53\3\1\1\54\1\55"+
    "\1\0\1\1\1\56\1\1\1\57\1\1\1\60\2\1"+
    "\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\234\0\234\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\234\0\234\0\234\0\234\0\234\0\234\0\234"+
    "\0\234\0\234\0\u030c\0\u0340\0\234\0\u0374\0\u03a8\0\u03dc"+
    "\0\234\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548"+
    "\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8"+
    "\0\u071c\0\234\0\u0750\0\234\0\234\0\234\0\234\0\234"+
    "\0\234\0\234\0\u0784\0\64\0\u07b8\0\u07ec\0\u07ec\0\u0820"+
    "\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\234\0\u0c98"+
    "\0\234\0\234\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\64\0\u0d9c"+
    "\0\234\0\u0dd0\0\234\0\234\0\u0e04\0\u0e38\0\64\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\234\0\234\0\u0f08\0\u0f3c\0\64\0\u0f70"+
    "\0\234\0\u0fa4\0\64\0\u0fd8\0\u100c\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\5"+
    "\1\10\1\11\1\12\1\13\1\2\1\0\1\5\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\11\7\2\1\36\5\2\1\37\1\40\2\2"+
    "\1\0\2\2\4\0\1\2\2\0\1\2\2\0\1\2"+
    "\24\0\22\2\4\3\1\41\57\3\71\0\1\5\2\0"+
    "\1\5\6\0\1\5\50\0\1\4\66\0\1\7\1\42"+
    "\1\43\1\44\2\0\1\45\55\0\1\43\1\46\1\0"+
    "\1\47\27\0\1\47\2\0\1\50\1\51\1\0\1\52"+
    "\1\0\1\53\1\54\1\55\1\0\1\56\6\0\2\2"+
    "\4\0\1\2\2\0\1\2\2\0\1\2\24\0\3\2"+
    "\1\57\5\2\1\60\10\2\4\14\1\0\11\14\1\61"+
    "\1\14\1\62\43\14\4\15\1\0\11\15\1\63\2\15"+
    "\1\62\42\15\22\0\1\64\63\0\1\65\1\66\64\0"+
    "\1\67\64\0\1\70\60\0\1\71\63\0\1\72\42\0"+
    "\2\2\4\0\1\2\2\0\1\2\2\0\1\2\24\0"+
    "\21\2\1\73\1\0\2\2\4\0\1\2\2\0\1\2"+
    "\2\0\1\2\24\0\14\2\1\74\5\2\1\0\2\2"+
    "\4\0\1\2\2\0\1\2\2\0\1\2\24\0\7\2"+
    "\1\75\12\2\7\0\1\7\1\42\1\43\61\0\1\43"+
    "\1\46\1\0\1\44\2\0\1\45\55\0\1\76\1\44"+
    "\2\0\2\77\56\0\1\100\1\45\2\0\2\101\56\0"+
    "\1\43\1\46\116\0\1\102\32\0\1\103\27\0\1\103"+
    "\5\0\1\104\60\0\1\105\67\0\1\106\63\0\1\107"+
    "\24\0\1\110\27\0\1\110\7\0\1\111\23\0\1\112"+
    "\27\0\1\112\7\0\1\113\57\0\1\114\16\0\2\2"+
    "\4\0\1\2\2\0\1\2\2\0\1\115\24\0\5\2"+
    "\1\115\14\2\1\0\2\2\4\0\1\2\2\0\1\2"+
    "\2\0\1\2\24\0\15\2\1\116\4\2\10\14\1\117"+
    "\6\14\1\117\44\14\10\15\1\120\6\15\1\120\44\15"+
    "\1\0\2\2\4\0\1\2\2\0\1\121\2\0\1\2"+
    "\24\0\1\121\21\2\1\0\2\2\4\0\1\2\2\0"+
    "\1\2\2\0\1\2\24\0\6\2\1\122\13\2\7\0"+
    "\1\76\1\77\62\0\1\100\1\101\64\0\1\64\32\0"+
    "\1\123\30\0\1\65\31\0\1\124\72\0\1\125\26\0"+
    "\1\126\31\0\1\126\25\0\1\127\127\0\1\130\17\0"+
    "\1\71\63\0\1\131\63\0\1\72\63\0\1\132\125\0"+
    "\1\133\11\0\2\2\4\0\1\2\2\0\1\2\2\0"+
    "\1\2\24\0\16\2\1\134\1\135\2\2\1\0\2\2"+
    "\4\0\1\2\2\0\1\136\2\0\1\2\24\0\1\136"+
    "\21\2\10\14\1\117\5\14\1\61\1\117\1\62\43\14"+
    "\10\15\1\120\5\15\1\63\1\120\1\15\1\62\42\15"+
    "\1\0\2\2\4\0\1\2\2\0\1\2\2\0\1\2"+
    "\24\0\3\2\1\137\16\2\1\0\2\2\4\0\1\2"+
    "\2\0\1\2\2\0\1\2\24\0\12\2\1\140\7\2"+
    "\11\0\1\141\116\0\1\142\30\0\1\143\63\0\1\144"+
    "\64\0\1\145\27\0\1\145\100\0\1\146\5\0\2\2"+
    "\4\0\1\2\2\0\1\2\2\0\1\2\24\0\14\2"+
    "\1\147\5\2\1\0\2\2\4\0\1\2\2\0\1\2"+
    "\2\0\1\2\24\0\7\2\1\150\12\2\1\0\2\2"+
    "\4\0\1\2\2\0\1\2\2\0\1\2\24\0\16\2"+
    "\1\151\3\2\1\0\2\2\4\0\1\2\2\0\1\2"+
    "\2\0\1\2\24\0\7\2\1\152\12\2\11\0\1\153"+
    "\63\0\1\154\64\0\1\155\27\0\1\155\22\0\2\2"+
    "\4\0\1\2\2\0\1\2\2\0\1\2\24\0\6\2"+
    "\1\156\13\2\1\0\2\2\4\0\1\2\2\0\1\2"+
    "\2\0\1\2\24\0\14\2\1\157\5\2\1\0\2\2"+
    "\4\0\1\2\2\0\1\2\2\0\1\2\24\0\4\2"+
    "\1\160\15\2\11\0\1\161\53\0\2\2\4\0\1\2"+
    "\2\0\1\2\2\0\1\2\24\0\12\2\1\162\7\2"+
    "\1\0\2\2\4\0\1\2\2\0\1\2\2\0\1\2"+
    "\24\0\20\2\1\163\1\2\1\0\2\2\4\0\1\2"+
    "\2\0\1\2\2\0\1\2\24\0\7\2\1\164\12\2"+
    "\1\0\2\2\4\0\1\2\2\0\1\2\2\0\1\2"+
    "\24\0\4\2\1\165\15\2\1\0\2\2\4\0\1\2"+
    "\2\0\1\2\2\0\1\2\24\0\20\2\1\166\1\2";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\5\1\2\11\6\1\11\11"+
    "\2\1\1\11\3\1\1\11\1\0\1\1\13\0\3\1"+
    "\1\11\1\1\7\11\4\1\1\0\1\1\14\0\6\1"+
    "\4\0\1\11\1\0\2\11\1\0\5\1\1\11\1\0"+
    "\2\11\2\0\4\1\2\11\1\0\3\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _FortranLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return IDENTIFIER;
            }
          case 50: break;
          case 2: 
            { return EOL;
            }
          case 51: break;
          case 3: 
            { return WHITE_SPACE;
            }
          case 52: break;
          case 4: 
            { return INTEGER_LITERAL;
            }
          case 53: break;
          case 5: 
            { return DOT;
            }
          case 54: break;
          case 6: 
            { return PLUS;
            }
          case 55: break;
          case 7: 
            { return MINUS;
            }
          case 56: break;
          case 8: 
            { return STRING_LITERAL;
            }
          case 57: break;
          case 9: 
            { return EQ;
            }
          case 58: break;
          case 10: 
            { return DIV;
            }
          case 59: break;
          case 11: 
            { return COLON;
            }
          case 60: break;
          case 12: 
            { return MUL;
            }
          case 61: break;
          case 13: 
            { return LPAR;
            }
          case 62: break;
          case 14: 
            { return RPAR;
            }
          case 63: break;
          case 15: 
            { return LBRACKET;
            }
          case 64: break;
          case 16: 
            { return RBRACKET;
            }
          case 65: break;
          case 17: 
            { return COMMA;
            }
          case 66: break;
          case 18: 
            { return DOLLAR;
            }
          case 67: break;
          case 19: 
            { return PERC;
            }
          case 68: break;
          case 20: 
            { return AMP;
            }
          case 69: break;
          case 21: 
            { return SEMICOLON;
            }
          case 70: break;
          case 22: 
            { return LT;
            }
          case 71: break;
          case 23: 
            { return GT;
            }
          case 72: break;
          case 24: 
            { return QUEST;
            }
          case 73: break;
          case 25: 
            { return LINE_COMMENT;
            }
          case 74: break;
          case 26: 
            { return FLOATING_POINT_LITERAL;
            }
          case 75: break;
          case 27: 
            { return EQEQ;
            }
          case 76: break;
          case 28: 
            { return NEQ;
            }
          case 77: break;
          case 29: 
            { return DIVDIV;
            }
          case 78: break;
          case 30: 
            { return COLONCOLON;
            }
          case 79: break;
          case 31: 
            { return POWER;
            }
          case 80: break;
          case 32: 
            { return LE;
            }
          case 81: break;
          case 33: 
            { return GE;
            }
          case 82: break;
          case 34: 
            { return IF;
            }
          case 83: break;
          case 35: 
            { return DOUBLE_PRECISION_LITERAL;
            }
          case 84: break;
          case 36: 
            { return END;
            }
          case 85: break;
          case 37: 
            { return OR;
            }
          case 86: break;
          case 38: 
            { return ELSE;
            }
          case 87: break;
          case 39: 
            { return THEN;
            }
          case 88: break;
          case 40: 
            { return LOGICAL_EQ;
            }
          case 89: break;
          case 41: 
            { return NOT;
            }
          case 90: break;
          case 42: 
            { return AND;
            }
          case 91: break;
          case 43: 
            { return ENDIF;
            }
          case 92: break;
          case 44: 
            { return LOGICAL_NEQ;
            }
          case 93: break;
          case 45: 
            { return TRUE_KEYWORD;
            }
          case 94: break;
          case 46: 
            { return ELSEIF;
            }
          case 95: break;
          case 47: 
            { return FALSE_KEYWORD;
            }
          case 96: break;
          case 48: 
            { return PROGRAM;
            }
          case 97: break;
          case 49: 
            { return ENDPROGRAM;
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
