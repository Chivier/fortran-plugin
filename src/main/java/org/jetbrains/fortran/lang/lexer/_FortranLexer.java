/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.jetbrains.fortran.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import java.util.Stack;

import static com.intellij.psi.TokenType.*;
import static org.jetbrains.fortran.lang.FortranTypes.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>/home/sergei/CS/fortran-plugin/src/main/java/org/jetbrains/fortran/lang/lexer/FortranLexer.flex</tt>
 */
class _FortranLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13856 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\3"+
    "\13\1\15\3\13\1\16\24\13\1\17\1\20\1\21\10\1\1\22\1\23\1\13\1\24\4\13\1\25"+
    "\10\13\1\26\12\13\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13"+
    "\1\32\1\1\1\34\1\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1"+
    "\43\1\44\1\13\1\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52"+
    "\2\13\1\53\1\1\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\20\1\64"+
    "\1\57\1\60\1\65\1\1\1\66\1\67\1\70\1\71\1\24\1\60\1\72\1\1\1\73\1\55\1\74"+
    "\1\75\1\57\1\60\1\72\1\1\1\63\1\55\1\43\1\76\1\77\1\100\1\101\1\1\1\73\1\67"+
    "\1\1\1\102\1\40\1\60\1\53\1\1\1\103\1\55\1\1\1\102\1\40\1\60\1\104\1\1\1\62"+
    "\1\55\1\105\1\102\1\40\1\13\1\106\1\62\1\107\1\55\1\110\1\111\1\112\1\13\1"+
    "\113\1\114\1\1\1\67\1\1\1\27\2\13\1\115\1\114\1\116\2\1\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\2\1\1\73\1\1\1\116\1\1\1\125\1\13\1\126\1\1\1\127\7\1\2"+
    "\13\1\32\1\107\1\116\1\130\1\131\1\132\1\133\1\116\2\13\1\134\2\13\1\135\24"+
    "\13\1\136\1\137\2\13\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\32\2\1"+
    "\1\13\1\1\5\13\1\142\1\27\45\13\1\143\1\13\1\27\1\32\4\13\1\32\1\144\1\145"+
    "\1\20\1\13\1\20\1\13\1\20\1\145\1\73\3\13\1\146\1\1\1\147\1\116\2\1\1\116"+
    "\5\13\1\31\2\13\1\150\4\13\1\42\1\13\1\151\2\1\1\67\1\13\1\152\1\51\2\13\1"+
    "\153\1\13\1\101\1\116\2\1\1\13\1\114\3\13\1\51\2\1\2\116\1\154\5\1\1\111\2"+
    "\13\1\146\1\155\1\116\2\1\1\156\1\13\1\157\1\44\2\13\1\42\1\1\2\13\1\146\1"+
    "\1\1\160\1\44\1\13\1\152\6\1\1\161\1\162\14\13\4\1\21\13\1\142\2\13\1\142"+
    "\1\163\1\13\1\152\3\13\1\164\1\165\1\166\1\126\1\165\2\1\1\167\4\1\1\170\1"+
    "\1\1\126\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\151\2\13"+
    "\1\151\10\13\1\177\1\200\2\13\1\134\3\13\1\201\1\1\1\13\1\114\4\202\4\1\1"+
    "\107\35\1\1\203\2\1\1\204\1\27\4\13\1\205\1\27\4\13\1\135\1\111\1\13\1\152"+
    "\1\27\4\13\1\151\1\1\1\13\1\32\3\1\1\13\40\1\133\13\1\42\4\1\135\13\1\42\2"+
    "\1\10\13\1\126\4\1\2\13\1\152\20\13\1\126\1\13\1\206\1\1\2\13\1\151\1\107"+
    "\1\13\1\152\4\13\1\42\2\1\1\207\1\210\5\13\1\211\1\13\1\152\1\31\3\1\1\207"+
    "\1\212\1\13\1\33\1\1\3\13\1\146\1\210\2\13\1\146\1\1\1\116\1\1\1\213\1\44"+
    "\1\13\1\42\1\13\1\114\1\1\1\13\1\126\1\52\2\13\1\33\1\107\1\116\1\214\1\215"+
    "\2\13\1\50\1\1\1\216\1\116\1\13\1\217\3\13\1\220\1\221\1\222\1\32\1\70\1\223"+
    "\1\224\1\202\2\13\1\135\1\42\7\13\1\33\1\116\72\13\1\146\1\13\1\225\2\13\1"+
    "\153\20\1\26\13\1\152\6\13\1\101\2\1\1\114\1\226\1\60\1\227\1\230\6\13\1\20"+
    "\1\1\1\156\25\13\1\152\1\1\4\13\1\210\2\13\1\31\2\1\1\153\7\1\1\214\7\13\1"+
    "\126\1\1\1\116\1\27\1\32\1\27\1\32\1\231\4\13\1\151\1\232\1\233\2\1\1\234"+
    "\1\13\1\14\1\235\2\152\2\1\7\13\1\32\30\1\1\13\1\126\3\13\1\73\2\1\2\13\1"+
    "\1\1\13\1\236\2\13\1\42\1\13\1\152\2\13\1\237\3\1\11\13\1\152\1\116\5\1\2"+
    "\13\1\31\3\13\1\146\11\1\23\13\1\114\1\13\1\42\1\31\11\1\1\240\2\13\1\241"+
    "\1\13\1\42\1\13\1\114\1\13\1\151\4\1\1\13\1\242\1\13\1\42\1\13\1\101\4\1\3"+
    "\13\1\243\4\1\1\73\1\244\1\13\1\146\2\1\1\13\1\126\1\13\1\126\2\1\1\125\1"+
    "\13\1\51\1\1\3\13\1\42\1\13\1\42\1\13\1\33\1\13\1\20\6\1\4\13\1\50\3\1\3\13"+
    "\1\33\3\13\1\33\60\1\1\156\2\13\1\31\2\1\1\67\1\1\1\156\2\13\2\1\1\13\1\50"+
    "\1\116\1\156\1\13\1\114\1\67\1\1\2\13\1\245\1\156\2\13\1\33\1\246\1\247\2"+
    "\1\1\13\1\24\1\153\5\1\1\250\1\251\1\50\2\13\1\151\1\1\1\116\1\75\1\57\1\60"+
    "\1\72\1\1\1\252\1\20\21\1\3\13\1\1\1\253\1\116\12\1\2\13\1\151\2\1\1\254\2"+
    "\1\3\13\1\1\1\255\1\116\2\1\2\13\1\32\1\1\1\116\3\1\1\13\1\101\1\1\1\116\26"+
    "\1\4\13\1\116\1\107\34\1\3\13\1\50\20\1\71\13\1\101\16\1\14\13\1\146\53\1"+
    "\2\13\1\151\75\1\44\13\1\114\33\1\43\13\1\50\1\13\1\151\1\116\6\1\1\13\1\152"+
    "\1\1\3\13\1\1\1\146\1\116\1\156\1\256\1\13\67\1\4\13\1\51\1\73\3\1\1\156\6"+
    "\1\1\20\77\1\6\13\1\32\1\126\1\50\1\101\66\1\5\13\1\214\3\13\1\145\1\257\1"+
    "\260\1\261\3\13\1\262\1\263\1\13\1\264\1\265\1\40\24\13\1\266\1\13\1\40\1"+
    "\135\1\13\1\135\1\13\1\214\1\13\1\214\1\151\1\13\1\151\1\13\1\60\1\13\1\60"+
    "\1\13\1\267\3\270\14\13\1\51\123\1\1\261\1\13\1\271\1\272\1\273\1\274\1\275"+
    "\1\276\1\277\1\153\1\300\1\153\24\1\55\13\1\114\2\1\103\13\1\51\15\13\1\152"+
    "\150\13\1\20\25\1\41\13\1\152\36\1");

  /* The ZZ_CMAP_A table has 3088 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\20\1\7\1\73\1\6\1\5\22\0\1\11\1\4\1\21\1\0\1\36\1\37\1\23\1\22\1\31"+
    "\1\32\1\30\1\14\1\35\1\15\1\12\1\26\12\10\1\27\1\24\1\40\1\25\1\41\1\42\1"+
    "\0\1\47\1\62\1\61\1\50\1\43\1\57\1\55\1\66\1\63\1\2\1\71\1\54\1\64\1\46\1"+
    "\51\1\67\1\44\1\52\1\60\1\53\1\56\1\45\1\72\1\70\1\65\1\2\1\33\1\17\1\34\1"+
    "\0\1\3\1\0\1\47\1\62\1\61\1\16\1\13\1\57\1\55\1\66\1\63\1\2\1\71\1\54\1\64"+
    "\1\46\1\51\1\67\1\44\1\52\1\60\1\53\1\56\1\45\1\72\1\70\1\65\1\2\12\0\1\73"+
    "\24\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\10\2\2\63\35\2\1\60\2\2\4\0\14\2\16"+
    "\0\5\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0\1\2\1\0\3\2\1\0"+
    "\1\2\1\0\4\2\1\0\23\2\1\0\13\2\10\0\6\2\1\0\26\2\2\0\1\2\6\0\10\2\10\0\13"+
    "\2\5\0\3\2\15\0\12\1\4\0\6\2\1\0\1\2\17\0\2\2\7\0\2\2\12\1\3\2\2\0\2\2\1\0"+
    "\16\2\15\0\11\2\13\0\1\2\16\0\12\1\6\2\4\0\2\2\4\0\1\2\5\0\6\2\4\0\1\2\11"+
    "\0\1\2\3\0\1\2\7\0\11\2\7\0\5\2\17\0\26\2\3\0\1\2\2\0\1\2\7\0\12\2\4\0\12"+
    "\1\1\2\4\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0\1\2"+
    "\15\0\2\2\1\0\1\2\5\0\6\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\17\0\4\2\1\0\1\2"+
    "\7\0\12\1\2\0\3\2\20\0\11\2\1\0\2\2\1\0\2\2\1\0\5\2\3\0\1\2\2\0\1\2\30\0\1"+
    "\2\13\0\10\2\2\0\1\2\3\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2"+
    "\2\3\0\2\2\3\0\3\2\3\0\14\2\13\0\10\2\1\0\2\2\10\0\3\2\5\0\4\2\1\0\5\2\3\0"+
    "\1\2\3\0\2\2\15\0\13\2\2\0\1\2\21\0\1\2\12\0\6\2\5\0\22\2\3\0\10\2\1\0\11"+
    "\2\1\0\1\2\2\0\7\2\11\0\1\2\1\0\2\2\14\0\12\1\7\0\2\2\1\0\1\2\2\0\2\2\1\0"+
    "\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2"+
    "\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\1\2\0\14\2\1\0\24\2\13\0\5\2\3\0\6\2\4"+
    "\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0\6\2\1\0\1\2\5\0\1\2\2"+
    "\0\13\2\1\0\15\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\1\2\1\0\4\2\2\0\7\2\1"+
    "\0\1\2\1\0\4\2\2\0\16\2\2\0\6\2\2\0\15\2\2\0\1\2\1\0\10\2\7\0\15\2\1\0\6\2"+
    "\23\0\1\2\4\0\1\2\3\0\11\2\1\0\1\2\5\0\17\2\1\0\16\2\2\0\14\2\13\0\1\2\15"+
    "\0\7\2\7\0\16\2\15\0\2\2\12\1\3\0\3\2\11\0\4\2\1\0\4\2\3\0\2\2\11\0\10\2\1"+
    "\0\1\2\1\0\1\2\1\0\1\2\1\0\6\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0"+
    "\6\2\14\0\2\73\7\0\1\2\15\0\1\2\2\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6"+
    "\0\1\2\1\0\1\2\1\0\1\2\1\0\1\71\3\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0\1\2\4\0\2"+
    "\2\13\0\5\2\6\0\4\2\3\0\2\2\14\0\10\2\7\0\10\2\1\0\7\2\6\0\2\2\12\0\5\2\5"+
    "\0\2\2\3\0\7\2\6\0\3\2\12\1\2\2\13\0\11\2\2\0\27\2\2\0\7\2\1\0\3\2\1\0\4\2"+
    "\1\0\4\2\2\0\6\2\3\0\1\2\1\0\1\2\2\0\5\2\1\0\12\2\12\1\5\2\1\0\3\2\1\0\10"+
    "\2\4\0\7\2\3\0\1\2\3\0\2\2\1\0\1\2\3\0\2\2\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3"+
    "\2\3\0\6\2\2\0\6\2\2\0\6\2\11\0\7\2\4\0\5\2\3\0\5\2\5\0\1\2\1\0\10\2\1\0\5"+
    "\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\12\2\6\0\12\2\2\0\6\2\2\0\6\2\2\0\6\2\2\0\3"+
    "\2\3\0\14\2\1\0\16\2\1\0\2\2\1\0\2\2\1\0\10\2\6\0\4\2\4\0\16\2\2\0\1\2\1\0"+
    "\14\2\1\0\2\2\3\0\1\2\2\0\4\2\1\0\2\2\12\0\10\2\6\0\6\2\1\0\3\2\1\0\12\2\3"+
    "\0\1\2\12\0\4\2\13\0\12\1\1\2\1\0\1\2\3\0\7\2\1\0\1\2\1\0\4\2\1\0\17\2\1\0"+
    "\2\2\14\0\3\2\4\0\2\2\1\0\1\2\20\0\4\2\10\0\1\2\13\0\10\2\5\0\3\2\2\0\1\2"+
    "\2\0\2\2\2\0\4\2\1\0\14\2\1\0\1\2\1\0\7\2\1\0\21\2\1\0\4\2\2\0\10\2\1\0\7"+
    "\2\1\0\14\2\1\0\4\2\1\0\5\2\1\0\1\2\3\0\14\2\2\0\13\2\1\0\10\2\2\0\22\1\1"+
    "\0\2\2\1\0\1\2\2\0\1\2\1\0\12\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2\4\0\1\2\1"+
    "\0\1\2\1\0\1\2\1\0\3\2\1\0\2\2\1\0\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\2\2\1\0\1\2\2\0\4\2\1\0\7\2\1\0\4\2\1\0\4\2\1\0\1\2\1\0\12\2\1\0"+
    "\5\2\1\0\3\2\1\0\5\2\1\0\5\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\1\10\1\11\1\2\2\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\20\2\2\0\1\32\13\0"+
    "\3\2\1\33\1\2\3\12\1\5\1\0\1\5\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\24\2"+
    "\1\44\1\45\10\2\1\32\1\0\1\46\14\0\1\47"+
    "\4\2\2\12\10\2\1\50\7\2\1\51\23\2\4\0"+
    "\1\52\1\0\1\27\1\30\1\0\3\2\1\53\5\2"+
    "\1\54\1\2\1\55\3\2\1\56\2\2\1\57\1\60"+
    "\1\2\1\61\3\2\1\62\5\2\1\63\14\2\1\64"+
    "\2\2\1\65\1\0\1\66\1\67\2\0\1\70\1\71"+
    "\5\2\1\72\20\2\1\73\14\2\1\74\1\75\1\76"+
    "\1\77\1\0\1\2\1\100\1\2\1\101\10\2\1\102"+
    "\11\2\1\103\2\2\1\104\7\2\1\105\1\106\12\2"+
    "\1\107\6\2\1\110\1\2\1\111\3\2\1\112\2\2"+
    "\1\113\1\114\1\2\1\115\1\2\1\116\4\2\1\117"+
    "\1\120\3\2\1\121\4\2\1\122\4\2\1\123\5\2"+
    "\1\124\3\2\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\2\2\1\133\3\2\1\134\1\135\1\2\1\136\1\2"+
    "\1\137\1\140\1\2\1\141\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\74\0\74\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\u03fc\0\u0438\0\74\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\360\0\u0834\0\u0870"+
    "\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50"+
    "\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30"+
    "\0\u0c6c\0\74\0\u0ca8\0\u0ce4\0\u02d0\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\u0d20\0\u0d5c"+
    "\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u11d0\0\170\0\u120c\0\u1248\0\u1284\0\u12c0"+
    "\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u13ec\0\u1428\0\u1428"+
    "\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608"+
    "\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8"+
    "\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8"+
    "\0\u1a04\0\u1a40\0\170\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\170\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10"+
    "\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0"+
    "\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0"+
    "\0\u210c\0\u2148\0\74\0\u2184\0\74\0\74\0\u21c0\0\u21fc"+
    "\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc"+
    "\0\170\0\u2418\0\170\0\u2454\0\u2490\0\u24cc\0\170\0\u2508"+
    "\0\u2544\0\170\0\170\0\u2580\0\170\0\u25bc\0\u25f8\0\u2634"+
    "\0\170\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\170\0\u279c"+
    "\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\u29b8\0\u29f4\0\u2a30\0\170\0\u2a6c\0\u2aa8\0\74\0\u2ae4"+
    "\0\74\0\74\0\u2b20\0\u2b5c\0\170\0\170\0\u2b98\0\u2bd4"+
    "\0\u2c10\0\u2c4c\0\u2c88\0\170\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78"+
    "\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58"+
    "\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\170\0\u3084\0\u30c0\0\u30fc"+
    "\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc"+
    "\0\u3318\0\170\0\170\0\74\0\74\0\u3354\0\u3390\0\170"+
    "\0\u33cc\0\170\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534"+
    "\0\u3570\0\u35ac\0\170\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8"+
    "\0\u3714\0\u3750\0\u378c\0\u37c8\0\170\0\u3804\0\u3840\0\170"+
    "\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4\0\170"+
    "\0\74\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88"+
    "\0\u3bc4\0\u3c00\0\u3c3c\0\170\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c"+
    "\0\u3d68\0\u3da4\0\170\0\u3de0\0\170\0\u3e1c\0\u3e58\0\u3e94"+
    "\0\170\0\u3ed0\0\u3f0c\0\170\0\170\0\u3f48\0\170\0\u3f84"+
    "\0\170\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\170\0\170\0\u40b0"+
    "\0\u40ec\0\u4128\0\170\0\u4164\0\u41a0\0\u41dc\0\u4218\0\170"+
    "\0\u4254\0\u4290\0\u42cc\0\u4308\0\170\0\u4344\0\u4380\0\u43bc"+
    "\0\u43f8\0\u4434\0\170\0\u4470\0\u44ac\0\u44e8\0\170\0\170"+
    "\0\170\0\170\0\170\0\170\0\u4524\0\u4560\0\170\0\u459c"+
    "\0\u45d8\0\u4614\0\170\0\170\0\u4650\0\170\0\u468c\0\170"+
    "\0\170\0\u46c8\0\170\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\2\1\4\1\5\1\6\1\5\1\7"+
    "\1\6\1\10\1\11\1\12\1\13\1\14\1\2\1\6"+
    "\1\15\1\16\1\17\1\5\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\11\1\3\1\36\1\37\1\40\1\14"+
    "\1\41\1\42\1\43\1\44\1\3\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\3\3\1\53\1\3\1\54\1\55"+
    "\76\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\30\3\1\0\5\4\1\0\1\4\1\0\64\4"+
    "\5\0\1\5\1\56\1\5\1\0\1\56\6\0\1\56"+
    "\3\0\1\5\54\0\1\5\1\6\1\5\1\0\1\6"+
    "\6\0\1\6\3\0\1\5\57\0\1\7\1\57\1\60"+
    "\1\61\2\0\1\62\65\0\1\60\1\63\1\0\1\64"+
    "\27\0\1\64\2\0\1\65\1\66\1\0\1\67\1\0"+
    "\1\70\1\71\1\72\1\0\1\73\15\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\3\3\1\74"+
    "\5\3\1\75\13\3\1\76\2\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\6\3\1\77"+
    "\11\3\1\100\7\3\1\0\7\15\1\0\7\15\1\101"+
    "\1\15\1\102\52\15\7\16\1\0\7\16\1\103\2\16"+
    "\1\102\51\16\5\0\1\104\1\105\1\106\1\0\1\105"+
    "\6\0\1\105\100\0\1\107\13\0\1\110\57\0\1\111"+
    "\1\112\74\0\1\113\74\0\1\114\70\0\1\115\73\0"+
    "\1\116\47\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\4\3\1\117\1\3\1\120\21\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\4\3\1\121\1\3\1\122\21\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\11\3\1\123"+
    "\3\3\1\124\12\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\3\3\1\125\7\3\1\126"+
    "\10\3\1\127\3\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\130\2\0\1\3\24\0\1\130\27\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\4\3"+
    "\1\131\16\3\1\132\4\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\6\3\1\133\21\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\3\3\1\134\11\3\1\135\12\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\6\3"+
    "\1\136\21\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\4\3\1\137\23\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\6\3"+
    "\1\140\14\3\1\141\4\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\20\3\1\142\7\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\3\3\1\143\10\3\1\144\4\3\1\145\6\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\4\3\1\146\1\3\1\147\1\150\3\3\1\151"+
    "\14\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\20\3\1\152\7\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\153"+
    "\13\3\1\154\4\3\11\0\1\7\1\57\1\60\71\0"+
    "\1\60\1\63\1\0\1\61\2\0\1\62\65\0\1\155"+
    "\1\61\2\0\2\156\66\0\1\157\1\62\2\0\2\160"+
    "\66\0\1\60\1\63\126\0\1\161\42\0\1\162\27\0"+
    "\1\162\5\0\1\163\70\0\1\164\77\0\1\165\73\0"+
    "\1\166\34\0\1\167\27\0\1\167\7\0\1\170\33\0"+
    "\1\171\27\0\1\171\7\0\1\172\67\0\1\173\25\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\174\24\0"+
    "\5\3\1\174\22\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\15\3\1\175\12\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\10\3\1\176\17\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\13\3\1\177\14\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\21\3\1\200\6\3\1\0\11\15\1\201\6\15\1\201"+
    "\53\15\11\16\1\202\6\16\1\202\53\16\7\0\1\106"+
    "\65\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\11\3\1\203\16\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\11\3\1\204\16\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\21\3\1\205\6\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\206\24\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\11\3\1\207\16\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\15\3\1\210\4\3"+
    "\1\211\5\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\11\3\1\212\16\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\10\3"+
    "\1\213\17\3\2\0\3\3\4\0\1\3\2\0\1\214"+
    "\2\0\1\3\24\0\1\214\7\3\1\215\17\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\4\3\1\216\23\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\7\3\1\217\20\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\220\2\0\1\3\24\0"+
    "\1\220\27\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\12\3\1\221\15\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\14\3"+
    "\1\222\13\3\2\0\3\3\4\0\1\3\2\0\1\223"+
    "\2\0\1\3\24\0\1\223\27\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\224"+
    "\20\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\2\3\1\225\25\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\226\24\0\3\3\1\227"+
    "\1\3\1\226\13\3\1\230\6\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\4\3\1\231"+
    "\23\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\3\3\1\232\24\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\6\3\1\233"+
    "\1\3\1\234\17\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\24\3\1\235\3\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\7\3\1\236\20\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\20\3\1\237\7\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\240\2\0\1\3\24\0"+
    "\1\240\5\3\1\241\11\3\1\242\7\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\17\3"+
    "\1\243\10\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\3\3\1\244\24\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\20\3"+
    "\1\245\7\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\20\3\1\246\7\3\11\0\1\155"+
    "\1\156\72\0\1\157\1\160\74\0\1\107\32\0\1\247"+
    "\40\0\1\111\31\0\1\250\102\0\1\251\36\0\1\252"+
    "\31\0\1\252\35\0\1\253\137\0\1\254\27\0\1\115"+
    "\73\0\1\255\73\0\1\116\73\0\1\256\135\0\1\257"+
    "\20\0\3\3\4\0\1\3\2\0\1\3\2\0\1\260"+
    "\24\0\5\3\1\260\12\3\1\261\3\3\1\262\3\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\263\2\0\1\3"+
    "\24\0\1\263\27\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\264\2\0\1\3\24\0\1\264\27\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\17\3"+
    "\1\265\10\3\2\0\3\3\4\0\1\3\2\0\1\266"+
    "\2\0\1\3\24\0\1\266\27\3\1\0\11\15\1\201"+
    "\5\15\1\101\1\201\1\102\52\15\11\16\1\202\5\16"+
    "\1\103\1\202\1\16\1\102\51\16\1\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\13\3\1\267"+
    "\14\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\4\3\1\270\23\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\271\2\0\1\3\24\0\1\271\27\3"+
    "\2\0\2\3\1\272\4\0\1\3\2\0\1\273\2\0"+
    "\1\3\24\0\1\273\27\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\6\3\1\274\21\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\20\3\1\275\7\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\276\24\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\22\3\1\277\5\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\7\3\1\300\20\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\20\3\1\301\7\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\302\24\0\5\3\1\302\3\3"+
    "\1\303\16\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\12\3\1\304\15\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\3\3"+
    "\1\305\24\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\20\3\1\306\7\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\6\3"+
    "\1\307\21\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\21\3\1\310\6\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\311\2\0\1\3\24\0\1\311"+
    "\27\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\20\3\1\312\7\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\10\3\1\313"+
    "\5\3\1\314\11\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\24\3\1\315\3\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\7\3\1\316\20\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\317\24\0\5\3\1\317\22\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\13\3\1\320\14\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\321\2\0\1\3\24\0\1\321\6\3\1\322\20\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\6\3\1\323\2\3\1\324\16\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\4\3"+
    "\1\325\23\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\3\3\1\326\24\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\16\3"+
    "\1\327\11\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\10\3\1\330\1\3\1\331\15\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\2\3\1\332\25\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\11\3\1\333\16\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\334"+
    "\24\0\5\3\1\334\22\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\10\3\1\335\17\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\11\3\1\336\16\3\13\0\1\337\126\0\1\340"+
    "\40\0\1\341\73\0\1\342\74\0\1\343\27\0\1\343"+
    "\110\0\1\344\14\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\6\3\1\345\21\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\14\3"+
    "\1\346\13\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\7\3\1\347\20\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\20\3"+
    "\1\350\7\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\7\3\1\351\20\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\11\3"+
    "\1\352\16\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\3\3\1\353\24\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\354\2\0\1\3\24\0\1\354"+
    "\27\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\10\3\1\355\17\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\20\3\1\356"+
    "\7\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\16\3\1\357\11\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\12\3\1\360"+
    "\15\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\16\3\1\361\11\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\4\3\1\362"+
    "\23\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\6\3\1\363\21\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\364\2\0\1\3\24\0\1\364\27\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\16\3\1\365\11\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\7\3\1\366\20\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\4\3\1\367\23\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\21\3\1\370\6\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\20\3\1\371\7\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\13\3\1\372\14\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\11\3\1\373\16\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\4\3\1\374\23\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\10\3\1\375\17\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\376\6\3"+
    "\1\377\15\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\20\3\1\u0100\7\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\7\3"+
    "\1\u0101\20\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\20\3\1\u0102\7\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\21\3"+
    "\1\u0103\6\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\10\3\1\u0104\17\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\20\3"+
    "\1\u0105\7\3\2\0\3\3\4\0\1\3\2\0\1\u0106"+
    "\2\0\1\3\24\0\1\u0106\27\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\u0107"+
    "\20\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\4\3\1\u0108\23\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\20\3\1\u0109"+
    "\7\3\2\0\3\3\4\0\1\3\2\0\1\u010a\2\0"+
    "\1\3\24\0\1\u010a\27\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\u010b\2\0\1\3\24\0\1\u010b\27\3\13\0"+
    "\1\u010c\73\0\1\u010d\74\0\1\u010e\27\0\1\u010e\31\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\6\3\1\u010f\21\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\14\3\1\u0110\13\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\3\3\1\u0111\24\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\u0112\2\0\1\3\24\0\1\u0112\27\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\15\3"+
    "\1\u0113\12\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\20\3\1\u0114\7\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\3\3"+
    "\1\u0115\24\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\4\3\1\u0116\23\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\3\3"+
    "\1\u0117\24\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\23\3\1\u0118\4\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\10\3"+
    "\1\u0119\17\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\3\3\1\u011a\24\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\10\3"+
    "\1\u011b\17\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\4\3\1\u011c\23\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\21\3"+
    "\1\u011d\6\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\10\3\1\u011e\17\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\u011f\2\0\1\3\24\0\1\u011f"+
    "\27\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\3\3\1\u0120\6\3\1\u0121\15\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\7\3\1\u0122\20\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\u0123\2\0\1\3\24\0\1\u0123\27\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\16\3"+
    "\1\u0124\11\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\10\3\1\u0125\17\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\u0126\2\0\1\3\24\0\1\u0126"+
    "\27\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\3\3\1\u0127\24\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\10\3\1\u0128"+
    "\17\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\16\3\1\u0129\11\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\u012a\2\0\1\3\24\0\1\u012a\27\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\u012b\2\0\1\3"+
    "\24\0\1\u012b\27\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\15\3\1\u012c\12\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\16\3\1\u012d\11\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\4\3\1\u012e\23\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\10\3\1\u012f\17\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\16\3\1\u0130\11\3\13\0"+
    "\1\u0131\62\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\12\3\1\u0132\15\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\4\3\1\u0133"+
    "\23\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\20\3\1\u0134\7\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\11\3\1\u0135"+
    "\16\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\10\3\1\u0136\17\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\10\3\1\u0137"+
    "\17\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\21\3\1\u0138\6\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\u0139"+
    "\20\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\6\3\1\u013a\21\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\4\3\1\u013b"+
    "\23\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\11\3\1\u013c\16\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\4\3\1\u013d"+
    "\23\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\10\3\1\u013e\17\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\3\3\1\u013f"+
    "\24\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\13\3\1\u0140\14\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\13\3\1\u0141"+
    "\14\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\7\3\1\u0142\20\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\25\3\1\u0143"+
    "\2\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\10\3\1\u0144\17\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\u0145"+
    "\20\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\15\3\1\u0146\12\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\20\3\1\u0147"+
    "\7\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\10\3\1\u0148\17\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\7\3\1\u0149"+
    "\20\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\20\3\1\u014a\7\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\10\3\1\u014b"+
    "\17\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\21\3\1\u014c\6\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\u014d\2\0\1\3\24\0\1\u014d\27\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\7\3\1\u014e\20\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\11\3\1\u014f\16\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\6\3\1\u0150\21\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\u0151\2\0\1\3\24\0\1\u0151\27\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\7\3\1\u0152\20\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\4\3\1\u0153\23\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\u0154\2\0\1\3\24\0"+
    "\1\u0154\27\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\6\3\1\u0155\21\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\7\3"+
    "\1\u0156\20\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\11\3\1\u0157\16\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\10\3"+
    "\1\u0158\17\3\2\0\3\3\4\0\1\3\2\0\1\u0159"+
    "\2\0\1\3\24\0\1\u0159\27\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\3\2\0\1\3\24\0\15\3\1\u015a"+
    "\12\3\2\0\3\3\4\0\1\3\2\0\1\u015b\2\0"+
    "\1\3\24\0\1\u015b\27\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\6\3\1\u015c\21\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\u015d\2\0\1\3"+
    "\24\0\1\u015d\27\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\u015e\2\0\1\3\24\0\1\u015e\27\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\20\3"+
    "\1\u015f\7\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\10\3\1\u0160\17\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\u0161\2\0\1\3\24\0\1\u0161"+
    "\27\3\2\0\3\3\4\0\1\3\2\0\1\3\2\0"+
    "\1\3\24\0\6\3\1\u0162\21\3\2\0\3\3\4\0"+
    "\1\3\2\0\1\u0163\2\0\1\3\24\0\1\u0163\27\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\4\3\1\u0164\23\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\u0165\24\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\20\3\1\u0166\7\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\17\3\1\u0167\10\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\3\3\1\u0168\24\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\u0169\24\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\10\3\1\u016a\17\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\u016b\24\0\5\3\1\u016b\22\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\20\3\1\u016c\7\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\13\3\1\u016d\14\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\3\3\1\u016e\24\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\7\3\1\u016f\20\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\16\3\1\u0170\11\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\7\3\1\u0171\20\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\3\3\1\u0172\24\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\u0173\24\0\5\3\1\u0173\22\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\21\3\1\u0174\6\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\3\3\1\u0175\24\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\11\3\1\u0176\16\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\3\2\0\1\3\24\0\10\3\1\u0177\17\3"+
    "\2\0\3\3\4\0\1\3\2\0\1\3\2\0\1\3"+
    "\24\0\6\3\1\u0178\21\3\2\0\3\3\4\0\1\3"+
    "\2\0\1\u0179\2\0\1\3\24\0\1\u0179\27\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\6\3\1\u017a\21\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\15\3\1\u017b\12\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\3\2\0\1\3\24\0"+
    "\10\3\1\u017c\17\3\2\0\3\3\4\0\1\3\2\0"+
    "\1\3\2\0\1\3\24\0\15\3\1\u017d\12\3\2\0"+
    "\3\3\4\0\1\3\2\0\1\u017e\2\0\1\3\24\0"+
    "\1\u017e\27\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\13\3\1\u017f\14\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\u0180\24\0\5\3"+
    "\1\u0180\22\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\3\3\1\u0181\24\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\20\3"+
    "\1\u0182\7\3\2\0\3\3\4\0\1\3\2\0\1\3"+
    "\2\0\1\3\24\0\15\3\1\u0183\12\3\2\0\3\3"+
    "\4\0\1\3\2\0\1\3\2\0\1\3\24\0\16\3"+
    "\1\u0184\11\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18180];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\2\11\10\1\7\11\2\1\1\11"+
    "\20\1\2\0\1\1\13\0\6\1\1\11\2\1\1\0"+
    "\11\11\37\1\1\0\1\1\14\0\53\1\4\0\1\11"+
    "\1\0\2\11\1\0\57\1\1\11\1\0\2\11\2\0"+
    "\47\1\2\11\1\0\42\1\1\11\123\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _FortranLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 99: break;
          case 2: 
            { return IDENTIFIER;
            }
          case 100: break;
          case 3: 
            { return LINE_COMMENT;
            }
          case 101: break;
          case 4: 
            { return EOL;
            }
          case 102: break;
          case 5: 
            { return WHITE_SPACE;
            }
          case 103: break;
          case 6: 
            { return INTEGER_LITERAL;
            }
          case 104: break;
          case 7: 
            { return DOT;
            }
          case 105: break;
          case 8: 
            { return PLUS;
            }
          case 106: break;
          case 9: 
            { return MINUS;
            }
          case 107: break;
          case 10: 
            { return STRING_LITERAL;
            }
          case 108: break;
          case 11: 
            { return AMP;
            }
          case 109: break;
          case 12: 
            { return EQ;
            }
          case 110: break;
          case 13: 
            { return DIV;
            }
          case 111: break;
          case 14: 
            { return COLON;
            }
          case 112: break;
          case 15: 
            { return MUL;
            }
          case 113: break;
          case 16: 
            { return LPAR;
            }
          case 114: break;
          case 17: 
            { return RPAR;
            }
          case 115: break;
          case 18: 
            { return LBRACKET;
            }
          case 116: break;
          case 19: 
            { return RBRACKET;
            }
          case 117: break;
          case 20: 
            { return COMMA;
            }
          case 118: break;
          case 21: 
            { return DOLLAR;
            }
          case 119: break;
          case 22: 
            { return PERC;
            }
          case 120: break;
          case 23: 
            { return LT;
            }
          case 121: break;
          case 24: 
            { return GT;
            }
          case 122: break;
          case 25: 
            { return QUEST;
            }
          case 123: break;
          case 26: 
            { return FLOATING_POINT_LITERAL;
            }
          case 124: break;
          case 27: 
            { return DO;
            }
          case 125: break;
          case 28: 
            { return EQEQ;
            }
          case 126: break;
          case 29: 
            { return POINTER_ASSMNT;
            }
          case 127: break;
          case 30: 
            { return NEQ;
            }
          case 128: break;
          case 31: 
            { return DIVDIV;
            }
          case 129: break;
          case 32: 
            { return COLONCOLON;
            }
          case 130: break;
          case 33: 
            { return POWER;
            }
          case 131: break;
          case 34: 
            { return LE;
            }
          case 132: break;
          case 35: 
            { return GE;
            }
          case 133: break;
          case 36: 
            { return IN;
            }
          case 134: break;
          case 37: 
            { return IF;
            }
          case 135: break;
          case 38: 
            { return DOUBLE_PRECISION_LITERAL;
            }
          case 136: break;
          case 39: 
            { return END;
            }
          case 137: break;
          case 40: 
            { return OUT;
            }
          case 138: break;
          case 41: 
            { return USE;
            }
          case 139: break;
          case 42: 
            { return OR;
            }
          case 140: break;
          case 43: 
            { return ELSE;
            }
          case 141: break;
          case 44: 
            { return BINDNAME;
            }
          case 142: break;
          case 45: 
            { return NONE;
            }
          case 143: break;
          case 46: 
            { return ONLY;
            }
          case 144: break;
          case 47: 
            { return READ;
            }
          case 145: break;
          case 48: 
            { return REAL;
            }
          case 146: break;
          case 49: 
            { return THEN;
            }
          case 147: break;
          case 50: 
            { return SAVE;
            }
          case 148: break;
          case 51: 
            { return BIND;
            }
          case 149: break;
          case 52: 
            { return KIND;
            }
          case 150: break;
          case 53: 
            { return LOGICAL_EQ;
            }
          case 151: break;
          case 54: 
            { return NOT;
            }
          case 152: break;
          case 55: 
            { return AND;
            }
          case 153: break;
          case 56: 
            { return ENDDO;
            }
          case 154: break;
          case 57: 
            { return ENDIF;
            }
          case 155: break;
          case 58: 
            { return VALUE;
            }
          case 156: break;
          case 59: 
            { return INOUT;
            }
          case 157: break;
          case 60: 
            { return WRITE;
            }
          case 158: break;
          case 61: 
            { return WHILE;
            }
          case 159: break;
          case 62: 
            { return LOGICAL_NEQ;
            }
          case 160: break;
          case 63: 
            { return TRUE_KEYWORD;
            }
          case 161: break;
          case 64: 
            { return ELSEIF;
            }
          case 162: break;
          case 65: 
            { return DOUBLE;
            }
          case 163: break;
          case 66: 
            { return TARGET;
            }
          case 164: break;
          case 67: 
            { return INTENT;
            }
          case 165: break;
          case 68: 
            { return IMPORT;
            }
          case 166: break;
          case 69: 
            { return PUBLIC;
            }
          case 167: break;
          case 70: 
            { return FALSE_KEYWORD;
            }
          case 168: break;
          case 71: 
            { return LOGICAL;
            }
          case 169: break;
          case 72: 
            { return COMPLEX;
            }
          case 170: break;
          case 73: 
            { return INTEGER;
            }
          case 171: break;
          case 74: 
            { return POINTER;
            }
          case 172: break;
          case 75: 
            { return PROGRAM;
            }
          case 173: break;
          case 76: 
            { return PRIVATE;
            }
          case 174: break;
          case 77: 
            { return EXTERNAL;
            }
          case 175: break;
          case 78: 
            { return VOLATILE;
            }
          case 176: break;
          case 79: 
            { return OPERATOR;
            }
          case 177: break;
          case 80: 
            { return OPTIONAL;
            }
          case 178: break;
          case 81: 
            { return CONTINUE;
            }
          case 179: break;
          case 82: 
            { return IMPLICIT;
            }
          case 180: break;
          case 83: 
            { return DIMENSION;
            }
          case 181: break;
          case 84: 
            { return FORMATTED;
            }
          case 182: break;
          case 85: 
            { return CHARACTER;
            }
          case 183: break;
          case 86: 
            { return INTRINSIC;
            }
          case 184: break;
          case 87: 
            { return PARAMETER;
            }
          case 185: break;
          case 88: 
            { return PRECISION;
            }
          case 186: break;
          case 89: 
            { return PROTECTED;
            }
          case 187: break;
          case 90: 
            { return ENDPROGRAM;
            }
          case 188: break;
          case 91: 
            { return ASSIGNMENT;
            }
          case 189: break;
          case 92: 
            { return CONTIGUOUS;
            }
          case 190: break;
          case 93: 
            { return CONCURRENT;
            }
          case 191: break;
          case 94: 
            { return ALLOCATABLE;
            }
          case 192: break;
          case 95: 
            { return UNFORMATTED;
            }
          case 193: break;
          case 96: 
            { return CODIMENSION;
            }
          case 194: break;
          case 97: 
            { return ASYNCHRONOUS;
            }
          case 195: break;
          case 98: 
            { return NON_INTRINSIC;
            }
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
